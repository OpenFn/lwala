name: lwala-chw-support
description: null
credentials:
  rita@openfn.org-Lwala-Case-Endpoint-Test-User-HTTP:
    name: Lwala Case Endpoint Test User HTTP
    owner: rita@openfn.org
  rita@openfn.org-Lwala-Salesforce-Prod---March-2024:
    name: Lwala Salesforce Prod - March 2024
    owner: rita@openfn.org
  "rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)":
    name: 'Lwala Salesforce Sandbox (April 2024)'
    owner: rita@openfn.org
  rita@openfn.org-Lwala-case-endpoint-production-user:
    name: Lwala case endpoint production user
    owner: rita@openfn.org
  rita@openfn.org-Lwala-cases-endpoint-test-user:
    name: Lwala cases endpoint test user
    owner: rita@openfn.org
workflows:
  1-Bulk-HH-cases:
    name: 1-Bulk HH cases
    jobs:
      WF1-1-Bulk-get-HH-cases:
        name: WF1-1 Bulk get HH cases
        adaptor: '@openfn/language-http@6.5.1'
        credential: rita@openfn.org-Lwala-case-endpoint-production-user
        body: |
          // comment
          fn(state => {
            const { baseUrl } = state.configuration;

            const caseTypes = ['Household'];

            //NOTE: You can use 'limit' to modify this batch size as desired
            const limit = 1000; 

            //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs
            const indexedOnStart = '2024-01-18T10:00:00';

            //NOTE: After first job run, OpenFn will check the job sync data ("lastRunAt") to set as the indexedOnStart
            const lastRunAt =
              typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;
            console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);
          //May 31st, 2023 at 3:00:13 PM.
            const queries = caseTypes.map(
              t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}
              &owner_id=a3c31c9be392427a97f8704262065661` // User id of test user test.2021. Remove for production
              
              //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...
              //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates
              //t => `?type=${t}&indexed_on_start=2023-03-03T00:00:00&limit=${limit}&indexed_on_end=2023-03-06T00:00:00` //returns 14 records
           //   t => `?type=${t}&indexed_on_start=2024-01-15T15:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59` 
            );

            return { ...state, queries, baseUrl, payloads: [] };
          });

          // create a "recursiveGet" which will call itself if CommCare tells us there's
          // more data to fetch for the same form
          fn(state => {
            const recursiveGet = url =>
              get(
                url,
                {
                  headers: { 'content-type': 'application/json' },
                },
                nextState => {
                  const now = new Date();
                  const { baseUrl, data, payloads } = nextState;

                  const { meta, objects } = data;
                  console.log('Metadata in CommCare response:', meta);

                  const finalState = {
                    ...nextState,
                    payloads: [...payloads, ...objects],
                  };

                  if (meta.next) {
                    console.log('Next query detected, recursing...');
                    return recursiveGet(`${baseUrl}${meta.next}`)(finalState);
                  }
                  finalState.lastRunAt = now.toISOString().slice(0, 19);
                  return finalState;
                }
              );

            return { ...state, recursiveGet };
          });

          // for each initial query, fetch data recursively
          each(
            '$.queries[*]',
            fn(state => {
              return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);
            })
          );
          // log the total number of payloads returned
          fn(state => {
            console.log('Count of payloads', state.payloads.length);
            console.log(state.data);

            return { ...state, references: [], data: {} };
          });

      WF1-2-Bulk-upsert-HHs-and-HH-Visits:
        name: WF1-2 Bulk upsert HHs and HH Visits
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          fn(state => {
            if (state.payloads.length == 0)
              return { ...state, housevisits: [], households: [] };

            const owner_ids = state.payloads.map(data => data.properties.owner_id);
            const uniq_owner_ids = [...new Set(owner_ids)];

            return { ...state, uniq_owner_ids };
          });


          fn(state => {
            if (state.payloads.length == 0) return state;

            return query(
              `SELECT CommCare_User_ID__c, Id village, Parent_Geographic_Area__c area, Parent_Geographic_Area__r.Name name, Parent_Geographic_Area__r.Parent_Geographic_Area__c catchment FROM Location__c catchment WHERE CommCare_User_ID__c IN ('${state.uniq_owner_ids.join(
                "','"
              )}') GROUP BY Id, CommCare_User_ID__c, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c`
            )(state);
          });

          fn(state => {
            if (state.payloads.length == 0) return state;

            console.log('Done querying âœ…');

            return state;
          });

          fn(state => {
            if (state.payloads.length == 0) return state;

            console.log(
              'Filtering out unwanted users and applying mapping for households and housevisits'
            );

            const [reference] = state.references;

            //HMN 06/11/2023
           // console.log(JSON.stringify(reference.records, null, 2));

            const records = reference.records;
            const fetchReference = (owner_id, arg) => {
              const result =
                records && records.length > 0
                  ? records.filter(record => record.CommCare_User_ID__c === owner_id)
                  : 0;

              //TODO: Update default value for 'unknown location' before go-live
              return result.length > 0
                ? result[0][arg]
                : 'a000800001tMobaAAC' /*unknown location*/;
            };

            const supervisorMap = {
              community_health_nurse: 'Community Health Nurse',
              chw_supervisor: 'CHW Supervisor',
              chewschas: 'CHEWs/CHAs',
              other: 'Other',
              none: 'None',
            };

            const insuranceMap = {
              nhif: 'NHIF',
              Linda_mama: 'Linda mama',
              other_please_specify_if_active: 'Other',
              none: 'None',
            };

            const households = state.payloads
              /* HMN 050723 
              .filter(
                h =>
                  h.properties.commcare_username !== 'openfn.test' &&
                  h.properties.commcare_username !== 'test.2021' &&
                  h.properties.test_user !== 'Yes'
              )
              */
              .map(h => {
                // Special calculations ==================================================
                const insuranceStatus = h.properties.health_insurance;
                const Health_insurance_type__c =
                  insuranceStatus && insuranceStatus === 'other_please_specify_if_active'
                    ? 'Other'
                    : insuranceStatus === 'nhif'
                    ? 'NHIF'
                    : insuranceStatus === 'Linda_mama' || 'linda_mama'
                    ? 'Linda mama'
                    : insuranceStatus;

                const hhStatus = h.properties.Household_Status;
                const Active_Household__c =
                  hhStatus && hhStatus === 'No'
                    ? false
                    : hhStatus === 'Yes'
                    ? true
                    : hhStatus;

                const reason = h.properties.Reason_for_Inactive;
                const Inactive_Reason__c = reason
                  ? reason.toString().replace(/_/g, ' ')
                  : null;
           //HMN 06/11/2023
          // console.log(JSON.stringify(h.properties, null, 2));
               /*HMN remove this dependancy 07/07/2023
               const chw = h.properties.CHW_ID;
                const Household_CHW__c =
                  chw === 'a030800001zQrk' ? 'a030800001zQrk5' : chw ? chw : undefined;
                // =======================================================================
          */
           
                return {
                  CommCare_Username__c: h.properties.commcare_username,
                  MOH_household_code__c: h.properties.moh_code,
                  CommCare_Code__c: h.case_id,
                  Source__c: true,
                  // TODO: Prod mapping to add back before go-live =======================
                  Household_CHW__c: h.properties.CHW_ID, // Uncomment me to go live!
                  //Household_CHW__c: 'a032400000GHpdsAAD', // Comment me OUT to go live!
                //  Household_CHW__c: 'a03AW00000643nLYAQ',
                  // =====================================================================
                  Catchment__c: fetchReference(h.properties.owner_id, 'catchment'),
                  Area__c: fetchReference(h.properties.owner_id, 'area'),
                  Village__c: fetchReference(h.properties.owner_id, 'village'),
                  Household_Village__c: h.properties.village,
                  Deaths_in_the_last_6_months__c:
                    h.properties.deaths_in_past_6_months > 0 ? 'Yes' : 'No',
                  Access_to_safe_water__c: h.properties.Safe_Water,
                  Treats_Drinking_Water__c: h.properties.Treats_Drinking_Water,
                  Tippy_Tap__c: h.properties.Active_Handwashing_Station,
                  Pit_Latrine__c: h.properties.Functional_Latrine,
                  Rubbish_Pit__c: h.properties.Rubbish_Pit,
                  Drying_Rack__c: h.properties.Drying_Rack,
                  Kitchen_Garden__c: h.properties.Kitchen_Garden,
                  Cookstove__c: h.properties.Improved_Cooking_Method,
                  Clothe__c: h.properties.Clothesline,
                  WASH_Trained__c: h.properties.WASH_Trained,
                  Uses_ITNs__c: h.properties.ITNs,
                  Has_muac_tape__c: h.properties.family_muac_tape_available,
                  Health_insurance__c: h.properties.health_insurace_cover,
                  Health_insurance_active_status__c: h.properties.healthinsurance_active,
                  Health_insurance_type__c,
                  Other_Health_Insurance__c: h.properties.if_other_please_specify,
                  Work_with_TBA__c: h.properties.tba,
                  TBA_name__c: h.properties.which_tba,
                  Last_Modified_Date_CommCare__c: h.server_date_modified, //Need a case property,
                  Active_Household__c,
                  Inactive_Reason__c,
                  Active_in_Nutrition_Program__c:
                    h.properties.enrolled_in_a_lwala_nutrition_program,
                  lwala_nutrition_program_enrollment_date__c:
                    h.properties.lwala_nutrition_program_enrollment_date,
                  Trained_in_gardening__c: h.properties.household_trained_on_gardening,
                  household_trained_on_gardening_date__c:
                    h.properties.when_was_the_household_trained_on_gardening,
                  Seed_Input_Support__c:
                    h.properties.household_provided_with_seed_input_support,
                  household_provided_with_seed_input_suppo__c:
                    h.properties.when_was_the_household_provided_with_seed_input_support,
                  MIYCN_Trained__c: h.properties.household_trained_on_MIYC,
                  // TODO: @Aleksa to find out if Case_Closed_Date__c still exist
                   Case_Closed_Date__c: h.date_closed //&& h.date_closed == true
                       ? h.date_closed
                       : undefined 
                };
              });

            const housevisits = state.payloads
            //HMN remove test user filters 
            /*
              .filter(
                h =>
                  h.properties.commcare_username !== 'openfn.test' &&
                  h.properties.commcare_username !== 'test.2021' &&
                  h.properties.test_user !== 'Yes'
              )*/
              .map(h => {
                // Special calculations ==================================================
              
                
                const visitIdC =
                  h.case_id + '_' + h.properties.last_form_opened_date_and_time;

                const hVstatus = h.properties.Household_Status;
                const Active_Household__c =
                  hVstatus === 'No' ? false : hVstatus === 'Yes' ? true : hVstatus;

                const insuranceTypeC = () => {
                  let status = h.properties.health_insurance;

                  let value =
                    status && status !== ''
                      ? status
                          .replace(/ /gi, ';')
                          .split(';')
                          .map(value => {
                            return insuranceMap[value] || value;
                          })
                      : undefined;
                  return value ? value.join(';') : undefined;
                };

                const openedC = () => {
                  const form_opened = h.properties.last_form_opened_date_and_time;

                  if (form_opened) {
                    const value1 = form_opened.split('-').slice(0, 2).join('-');
                    const value2 = form_opened.split('-').slice(2).join('-');
                    const formattedValue = [value1, value2].join(' ');
                    return new Date(formattedValue).toISOString();
                  }
                  return undefined;
                };

                return {
                  CommCare_Username__c: h.properties.commcare_username,
                  CommCare_Visit_ID__c: visitIdC,
                  Catchment__c: fetchReference(h.properties.owner_id, 'catchment'),
                  'Household__r.CommCare_Code__c': h.case_id,
                  Date__c: h.properties.Date,
                  Form_Submitted__c: h.properties.last_form_opened_name,
                  Active_Household__c: Active_Household__c,
                  Active_in_Nutrition_Program__c:
                    h.properties.enrolled_in_a_lwala_nutrition_program,
                  lwala_nutrition_program_enrollment_date__c:
                    h.properties.lwala_nutrition_program_enrollment_date,
                  Trained_in_gardening__c: h.properties.household_trained_on_gardening,
                  household_trained_on_gardening_date__c:
                    h.properties.when_was_the_household_trained_on_gardening,
                  Seed_Input_Support__c:
                    h.properties.household_provided_with_seed_input_support,
                  household_provided_with_seed_input_suppo__c:
                    h.properties.when_was_the_household_provided_with_seed_input_support,
                  MIYCN_Trained__c: h.properties.household_trained_on_MIYCN,
                  Kitchen_Garden__c: h.properties.Kitchen_Garden,
                  Access_to_safe_water__c: h.properties.Safe_Water,
                  Treats_Drinking_Water__c: h.properties.Treats_Drinking_Water,
                  Tippy_Tap__c: h.properties.Active_Handwashing_Station,
                  Pit_Latrine__c: h.properties.Functional_Latrine,
                  Rubbish_Pit__c: h.properties.Rubbish_Pit,
                  Drying_Rack__c: h.properties.Drying_Rack,
                  Cookstove__c: h.properties.Improved_Cooking_Method,
                  Clothe__c: h.properties.Clothesline,
                  WASH_Trained__c: h.properties.WASH_Trained,
                  Has_muac_tape__c: h.properties.family_muac_tape_available,
                  Uses_ITNs__c: h.properties.ITNs,
                  Supervisor_Visit__c: h.properties.supervisor_visit
                    ? supervisorMap[h.properties.supervisor_visit]
                    : null,
                  Health_insurance__c: h.properties.health_insurace_cover,
                  Health_insurance_active_status__c: h.properties.healthinsurance_active,
                  Health_insurance_type__c: insuranceTypeC(),

                  Other_Health_Insurance__c: h.properties.if_other_please_specify,
                  CommCare_Form_Opened__c: openedC(),
                  
                };
              });

            return { ...state, households, housevisits, fetchReference };
          });

          //JSON logging of records
          //HMN 06/11/2023
          /*fn(state => {
            console.log('HHs to upsert ::', JSON.stringify(state.households));
            return state;
          });*/


          bulk(
            'Household__c',
            'upsert',
            {
              extIdField: 'CommCare_Code__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting households...');
              return state.households;
            }
          );

          fn(state => {
            if (state.payloads.length == 0) return state;

            console.log('house holds bulk upsert done');
            return state;
          });

          // TODO clean up in QA used for troubleshooting
          // Uncomment this block to add cooldown
          // fn(state => {
          //   return new Promise((resolve, reject) => {
          //     setTimeout(() => {
          //       console.log('4 second cooldown finished.');
          //       resolve(state);
          //     }, 4000);
          //   });
          // });

          bulk(
            'Visit__c',
            'upsert',
            {
              extIdField: 'CommCare_Visit_ID__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting housevisits...');
              return state.housevisits;
            }
          );

          fn(state => {
            if (state.payloads.length == 0) return state;
            console.log('house visits bulk upsert done');
            return state;
          });

          // TODO clean up in QA for troubleshooting
          // Uncomment this block to add cooldown
          // fn(state => {
          //   return new Promise((resolve, reject) => {
          //     setTimeout(() => {
          //       console.log('Final 4 second cooldown finished.');
          //       resolve(state);
          //     }, 4000);
          //   });
          // });

    triggers:
      cron:
        type: cron
        cron_expression: '0 * * * *'
        enabled: false
    edges:
      cron->WF1-1-Bulk-get-HH-cases:
        source_trigger: cron
        target_job: WF1-1-Bulk-get-HH-cases
        condition_type: always
        enabled: true
      WF1-1-Bulk-get-HH-cases->WF1-2-Bulk-upsert-HHs-and-HH-Visits:
        source_job: WF1-1-Bulk-get-HH-cases
        target_job: WF1-2-Bulk-upsert-HHs-and-HH-Visits
        condition_type: on_job_success
        enabled: true
  2-Bulk-Person-cases:
    name: 2-Bulk Person cases
    jobs:
      WF2-1-Bulk-get-Person-cases:
        name: WF2-1 Bulk get Person cases
        adaptor: '@openfn/language-http@6.5.1'
        credential: rita@openfn.org-Lwala-case-endpoint-production-user
        body: |
          fn(state => {
            const { baseUrl } = state.configuration;

            const caseTypes = ['Person'];

            //NOTE: You can use 'limit' to modify this batch size as desired
            const limit = 1000; //E.g., change to 10 to process records in smaller batch sizes

            //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs
            const indexedOnStart = '2021-01-17T00:00:00';
            

            //NOTE: After first job run, OpenFn will check the job sync data ("lastRunAt") to set as the indexedOnStart
            const lastRunAt =
              typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;
            console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);

            const queries = caseTypes.map(
              t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}
              &owner_id=a3c31c9be392427a97f8704262065661` // User id of test user test.2021. Remove for production
              //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...
              //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates
              // t => `?type=${t}&indexed_on_start=2024-01-16T00:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59`
            );

            return { ...state, queries, baseUrl, payloads: [] };
          });

          // create a "recursiveGet" which will call itself if CommCare tells us there's
          // more data to fetch for the same form
          fn(state => {
            const recursiveGet = url =>
              get(
                url,
                {
                  headers: { 'content-type': 'application/json' },
                },
                nextState => {
                  const now = new Date();
                  const { baseUrl, data, payloads } = nextState;

                  const { meta, objects } = data;
                  console.log('Metadata in CommCare response:', meta);

                  const finalState = {
                    ...nextState,
                    payloads: [...payloads, ...objects],
                  };

                  if (meta.next) {
                    console.log('Next query detected, recursing...');
                    return recursiveGet(`${baseUrl}${meta.next}`)(finalState);
                  }
                  finalState.lastRunAt = now.toISOString().slice(0, 19);
                  return finalState;
                }
              );

            return { ...state, recursiveGet };
          });

          // for each initial query, fetch data recursively
          each(
            '$.queries[*]',
            fn(state => {
              return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);
            })
          );
          // log the total number of payloads returned
          fn(state => {
            console.log('Count of payloads', state.payloads.length);
            //HMN 11072023
           // console.log(JSON.stringify(state.payloads, null, 2));

            return { ...state, references: [], data: {} };
          });

      WF2-2-Bulk-upsert-Persons:
        name: WF2-2 Bulk upsert Persons
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          fn(state => {
            if (state.payloads.length == 0)
              return {
                ...state,
                householdMapping: [],
                headOfHouseholdMapping: [],
                motherMapping: [],
                caregiverMapping: [],
                sfRecordMapping: [],
              };
              // JSON logging of records
              //HMN debug
            //console.log('cases before query :: ', JSON.stringify(state.payloads, null, 2));
            const owner_ids = state.payloads.map(data => data.properties.owner_id);
            const uniq_owner_ids = [...new Set(owner_ids)];

            return { ...state, uniq_owner_ids };
          });

          // get data from SF
          fn(state => {
            if (state.payloads.length == 0) return state;

            return query(
              `SELECT CommCare_User_ID__c, Id village, Parent_Geographic_Area__c area, Parent_Geographic_Area__r.Name name, Parent_Geographic_Area__r.Parent_Geographic_Area__c catchment FROM Location__c WHERE CommCare_User_ID__c IN ('${state.uniq_owner_ids.join(
                "','"
              )}') GROUP BY Id, CommCare_User_ID__c, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c`
            )(state);
          });

          fn(state => {
            if (state.payloads.length == 0) return state;

            const [reference] = state.references;

            // console.log(JSON.stringify(reference.records, null, 2));

            const records = reference.records;
            const fetchReference = (owner_id, arg) => {
              const result =
                records && records.length > 0
                  ? records.filter(record => record.CommCare_User_ID__c === owner_id)
                  : 0;

              //TODO: Update default value for 'unknown location' before go-live
              return result.length > 0 ? result[0][arg] 
              : 'a000800001tMobaAAC' /*unknown location*/;

            };

            const cleanChoice = choice => {
              if (choice) {
                return choice.charAt(0).toUpperCase() + choice.slice(1).replace('_', ' ');
              } else {
                return '';
              }
            };

            const handleMultiSelect = multiField => {
              return multiField
                ? multiField
                    .replace(/ /gi, ';')
                    .toLowerCase()
                    .split(';')
                    .map(value => {
                      return (
                        value.charAt(0).toUpperCase() + value.slice(1).replace('_', ' ')
                      );
                    })
                    .join(';')
                : '';
            };

            const pregDangerMap = {
              Vaginal_Bleeding: 'Vaginal Bleeding',
              Water_Breaks: 'Water Breaks before Time of Delivery',
              Prolonged_Labour: 'Prolonged Labour over 12 Hours',
              Convulsions: 'Convulsions or Fits',
              Abdominal_Pain: 'Severe Abdominal Pain before Delivery',
              High_Fever: 'High Fever',
              Low_Baby_Movement: 'Feeling the Baby move less or not at all',
              Swelling: 'Swelling of Face and Hands',
              Severe_Headache: 'Severe or Continuous Headache for more than 12 hours',
              Severe_Vomiting: 'Severe or Continuous Vomiting',
              none: 'None',
            };

            const counselMap = {
              anc_visits: 'ANC Visits',
              early_initiation_of_anc_less_than_3_months:
                'Early initiation of ANC (less than 3 months)',
              completing_recomended_anc_visits: 'Completing recomended ANC visits',
              danger_signs: 'Danger signs',
              skilled_birth: 'Skilled birth',
              immunization: 'Immunization',
              individual_birth_plan: 'Individual Birth Plan',
              emergency_preparedness: 'Emergency preparedness',
              childcare_and_affection: 'Childcare and affection',
              nutrition_counseling: 'Nutrition counseling',
              growth_monitoring: 'Growth monitoring',
              exclusive_breastfeeding: 'Exclusive breastfeeding',
              complementary_feeding: 'Complementary feeding',
              sleeping_under_llitn: 'Sleeping under LLITN',
              knowing_hiv_status: 'Knowing HIV status',
              indoor_pollution: 'Indoor pollution',
              personal_hygiene: 'Personal Hygiene',
              safe_drinking_water: 'Safe drinking water',
              safe_disposal_of_human_waste: 'Safe disposal of human waste',
            };

            const serviceMap = {
              Scheduled_PSC_Apt: 'Scheduled PSC Apt',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction/Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              TB: 'TB',
              Treatment_for_Other_OIs: 'Treatment for other Ols',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care: 'Pregnancy Care (ANC)',
              Family_Planning: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              Other: 'Other',
            };

            const reasonMapping = {
              lack_of_access_to_fp_information: 'Lack of access to FP information',
              no_access_to_fp_services_hospitals:
                'Lack of hospitals or places where FP services can be accessed',
              not_willing_to_use_fp_due_to_negative_effects_myths_and_misconceptions:
                'Myths and misconceptions',
              barriers_at_service_delivery_points: 'Barriers at service delivery points',
              pregnant: 'The client is pregnant',
              intentions_of_getting_pregnant: 'Intentions of getting pregnant',
              not_sexually_active: 'The client is not sexually active',
              other_barriers_culture_male_partners_parents_etc:
                'Other barriers (culture, male partners, parents, etc)',
            };

            const milestoneTypeMap = {
              cognitive_delays_learning_difficulties:
                'Cognitive Delays Learning Difficulties',
              motor_delays: 'Motor Delays',
              speech_and_language_delay: 'Delay Speech and Language Delay',
              social_and_emotional: 'Social and emotional',
            };

            const milestoneMap = {
              movement: 'Movement',
              hearing: 'Hearing',
              communication: 'Communication',
              seeing: 'Seeing',
              cognitive_delays: 'Cognitive Delays',
              play: 'Play',
            };
            const nutritionMap = {
              severe: 'Severely Malnourished',
              moderate: 'Moderately Malnourished',
              normal: 'Normal',
            };

            const fpMethodMap = {
              male_condoms: 'Male condoms',
              female_condoms: 'Female condoms',
              pop: 'POP',
              coc: 'COC',
              emergency_pills: 'Emergency pills',
              none: 'None',
            };

            return {
              ...state,
              counselMap,
              serviceMap,
              reasonMapping,
              milestoneTypeMap,
              milestoneMap,
              nutritionMap,
              pregDangerMap,
              fpMethodMap,
              cleanChoice,
              handleMultiSelect,
              fetchReference,
            };
          });

          // build sfRecord before upserting
          fn(state => {
            if (state.payloads.length == 0) return state;

            const {
              counselMap,
              reasonMapping,
              milestoneTypeMap,
              milestoneMap,
              nutritionMap,
              pregDangerMap,
              fpMethodMap,
              cleanChoice,
              handleMultiSelect,
              fetchReference,
            } = state;

            const householdMapping = [
              ...new Map(
                state.payloads
                 .filter(
                    p =>
                      p.indices.parent.case_id  !== undefined &&
                      p.indices.parent.case_id  !== ''
                  )
                  .map(p => {
                    return {
                      CommCare_Code__c:
                        p.indices.parent.case_id || p.properties.parent_id,
                    };
                  })
                  .map(h => [h.CommCare_Code__c, h])
              ).values(),
            ];

            const headOfHouseholdMapping = state.payloads
              .filter(
                p =>
                  p.properties.head_of_household_case_id !== undefined &&
                  p.properties.head_of_household_case_id !== ''
              )
              .map(p => {
                return {
                  CommCare_Code__c: p.indices.parent.case_id || p.properties.parent_id,
                  'Head_of_Household__r.CommCare_ID__c':
                    p.properties.head_of_household_case_id,
                };
              });

            const motherMapping = state.payloads
              .filter(
                p =>
                 /*HMN 050723 p.properties.commcare_username !== 'test.2021' &&
                  p.properties.test_user !== 'Yes' &&
                  */
                  p.properties.mother_case_id !== undefined &&
                  p.properties.mother_case_id !== '' &&
                  p.case_id!== undefined
              )
              .map(p => {
                return {
                  'Mother__r.CommCare_ID__c': p.properties.mother_case_id,
                  CommCare_ID__c: p.case_id,
                };
              });

            const caregiverMapping = state.payloads
              .filter(
                p =>
                 /*HMN 070523 p.properties.commcare_username !== 'test.2021' &&
                  p.properties.test_user !== 'Yes' &&
                  */
                  p.properties.caretaker_case_id !== undefined &&
                  p.properties.caretaker_case_id !== '' &&
                  p.case_id!== undefined
              )
              .map(p => {
                return {
                  'Primary_Caregiver_Lookup__r.CommCare_ID__c':
                    p.properties.caretaker_case_id,
                  CommCare_ID__c: p.case_id,
                };
              });

            const sfRecordMapping = state.payloads
            .filter(
                p =>
                 /*HMN 050723 
                  p.properties.commcare_username !== 'test.2021' &&
                  p.properties.test_user !== 'Yes'
                  */
                  p.case_id !== undefined &&
                  p.case_id !== ''
              ) 
              .map(p => {
                // For unbornOrName
                const name1 = p.properties.Person_Name || p.properties.case_name;
                const unborn = p.properties.name;

                const name2 =
                  name1 === undefined || name1 === '' || name1 === null
                    ? unborn
                    : name1.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                      });
                const unbornOrName = name1 !== null ? name2 : 'Unborn Child';
                // console.log('Person Name ::', unbornOrName);

                // For chronicIllness
                const chronicChoice =p.properties.please_specify_which_chronic_illness_the_person_has;
                const choice2 = handleMultiSelect(chronicChoice);
                const chronicIllness = choice2 ? choice2.replace(/_/g, ' ') : '';

                const disabilityC =
                  p.properties.disability !== undefined && p.properties.disability !=='---' && p.properties.disability !== null
                    ? p.properties.disability
                        .toLowerCase()
                        .split(' ')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(';')
                    : null;
          //HMN remove
          console.log(p.case_id)
          //console.log(disabilityC)
          //
                const otherDisability =
                  p.properties.other_disability !== undefined && p.properties.other_disability !=='---' && p.properties.other_disability !== null
                    ? p.properties.other_disability
                        .toLowerCase()
                        .split(' ')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(';')
                    : null;
          //HMN remove
          //console.log(otherDisability)
          //HMN
                const hh_relation = p.properties.relation_to_hh;

                const relationToTheHead = hh_relation !== undefined && hh_relation !== null
                  ? hh_relation.toString().replace(/_/g, ' ').charAt(0).toUpperCase() +
                    hh_relation.toString().replace(/_/g, ' ').slice(1)
                  : null;

                const childStatus =
                  p.properties.Child_Status && p.properties.Record_Type === 'Unborn'
                    ? (p.properties.Child_Status = 'Unborn')
                    : p.properties.Child_Status && p.properties.Record_Type === 'Born'
                    ? (p.properties.Child_Status = 'Born')
                    : p.properties.Child_Status;

                const childDangerSigns = p.properties.Other_Danger_Signs !== undefined && p.properties.Other_Danger_Signs !== null 
                  ? p.properties.Other_Danger_Signs.toLowerCase()
                      .split(' ')
                      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                      .join(';')
                      .toString()
                      .replace(/_/g, ' ')
                  : p.properties.Other_Danger_Signs;

                //clientCounselled
                const clientChoices = p.properties.counsel_topic;
                const choiceGroups = clientChoices ? clientChoices.split(' ') : null;
                const clientCounselled = choiceGroups
                  ? choiceGroups
                      .map(cg => {
                        return counselMap[cg];
                      })
                      .join(';')
                  : choiceGroups;

                // fpMethodDistributed
                const fpStatus = p.properties.FP_commodity;
                const fpValue =
                  fpStatus && fpStatus !== ''
                    ? fpStatus
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return fpMethodMap[value] || value;
                        })
                    : undefined;
                const fpMethodDistributed = fpValue ? fpValue.join(';') : undefined;

                // placeOfDelivery
                const pFacility = p.properties.Delivery_Type;
                const placeOfDelivery =
                  pFacility === 'Skilled'
                    ? 'Facility'
                    : pFacility === 'Unskilled'
                    ? 'Home'
                    : undefined;

                // reasonForNotTakingFP
                const rStatus = p.properties.No_FPmethod_reason;
                const rValue =
                  rStatus && rStatus !== ''
                    ? rStatus
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return reasonMapping[value] || value;
                        })
                    : undefined;
                const reasonForNotTakingFP = rValue ? rValue.join(';') : undefined;
                
                const recordType = p.properties.Record_Type;
               
                
                return {
                  // TODO @aleksa, Source__c is causing an error
                  Source__c: true,
                  CommCare_ID__c: p.case_id,
            
                  //HMN 05072023 'Primary_Caregiver_Lookup__r.CommCare_ID__c':p.properties.caretaker_case_id,
                  //HMN 05072023 'Mother__r.CommCare_ID__c': p.properties.mother_case_id,
                  'Household__r.CommCare_Code__c':
                    p.properties.parent_id || p.indices.parent.case_id,
                  commcare_location_id__c: p.properties.commcare_location_id,
                  CommCare_Username__c: p.properties.commcare_username,
                  Telephone__c: p.properties.contact_phone_number,

                  Consent_for_data_use__c: p.properties.data_sharing_consent,
                  CommCare_HH_Code__c: p.indices.parent.case_id,
                  Client_Status__c: p.properties.Client_Status,
                  Catchment__c: fetchReference(p.properties.owner_id, 'catchment'),
                  Area__c: fetchReference(p.properties.owner_id, 'area'),
                  Household_Village__c: fetchReference(p.properties.owner_id, 'village'),
                  Name: unbornOrName,
                  Chronic_illness__c: chronicIllness,
                  Currently_enrolled_in_school__c: p.properties.enrolled_in_school,
                  Education_Level__c: p.properties.Education_Level !== null && p.properties.Education_Level !== undefined
                    ? p.properties.Education_Level.toString().replace(/_/g, ' ')
                    : null,
                  Relation_to_the_head_of_the_household__c: relationToTheHead,
                  Gender__c: p.properties.Gender !== undefined ? p.properties.Gender : null,
                  Disability__c: disabilityC,
                  Other_disability__c: otherDisability,
                  Use_mosquito_net__c: p.properties.sleep_under_net,
                  Birth_Certificate__c: p.properties.birth_certificate,
                  Child_Status__c: childStatus,
                  'RecordType.Name': recordType === 'Unborn' || recordType === '' 
                    ? 'Child' 
                    : recordType.toString().replace(/_/g, ' '), //convert Unborn children to Child RT
                  //TT5 Mother Information  =====================//
                  MCH_booklet__c: p.properties.mch_booklet,
                  Reason_for_not_taking_a_pregnancy_test__c: p.properties.No_Preg_Test
                    ? p.properties.No_Preg_Test.toString().replace(/_/g, ' ')
                    : undefined,
                  Pregnancy_danger_signs__c: p.properties.pregnancy_danger_signs
                    ? pregDangerMap[p.properties.pregnancy_danger_signs]
                    : undefined,
                  Individual_birth_plan_counselling__c:
                    p.properties.individual_birth_plan,
                  Child_Danger_Signs__c: childDangerSigns,
                  //HAWI =====================//

                  Unique_Patient_Code__c: p.properties.Unique_Patient_Code,
                  Active_in_Support_Group__c: p.properties.Active_in_Support_Group,
                  Preferred_Care_Facility__c: p.properties.Preferred_Care_Facility,
                  Currently_on_ART_s__c: p.properties.ART,
                  ART_Regimen__c: p.properties.ARVs,
                  HAWI_Defaulter__c: p.properties.default === 'Yes' ? true : false,
                  Date_of_Default__c: p.properties.date_of_default,
                  Know_HIV_status__c: p.properties.known_hiv_status,
                  HIV_Status__c: p.properties.hiv_status,
                  //Illness ========================//
                  Persons_temperature__c: p.properties.temperature,
                  Days_since_illness_start__c: p.properties.duration_of_sickness,
                  Current_Malaria_Status__c: p.properties.malaria_test_results,
                  Malaria_test__c: p.properties.malaria_test,
                  Last_Malaria_Home_Test__c: p.properties.malaria_test_date,
                  Last_Malaria_Home_Treatment__c: cleanChoice(
                    p.properties.malaria_test_date
                  ),
                  Cough_over_14days__c: p.properties.symptoms_check_cough,
                  TB_patients_therapy_observed__c: p.properties.observed_tb_therapy,
                  Injuries_or_wounds__c: p.properties.wounds_or_injuries,
                  Pulse_Oximeter__c: p.properties.pulse_oximeter_available,
                  Heart_Rate_Pulse_Oximeter__c: p.properties.heart_rate_pulse_oximeter,
                  Oxygen_Concentration_Pulse_Oximeter__c:
                    p.properties.oxygen_concentration,
                  Can_child_drink__c: p.properties.can_child_drink,
                  Antibiotic_provided_for_fast_breathing__c: cleanChoice(
                    p.properties.antibiotic_fast_breathing
                  ),
                  Antibiotic_provided_for_chest_indrawing__c: cleanChoice(
                    p.properties.antibiotic_chest_indrawing
                  ),
                  Default_on_TB_treatment__c: cleanChoice(
                    p.properties.default_tb_treatment
                  ),
                  Treatment_Distribution__c: cleanChoice(
                    p.properties.distributed_treatments
                  ),
                  //Delivery  =====================//
                  Immediate_Breastfeeding__c: p.properties.Breastfeeding_Delivery,
                  Place_of_Delivery__c: placeOfDelivery,
                  Delivery_Facility__c: p.properties.Delivery_Facility
                    ? p.properties.Delivery_Facility.toString().replace(/_/g, ' ')
                    : null,
                  Delivery_Facility_Other__c: p.properties.Delivery_Facility_Other,
                  //Family Planning  =====================//
                  LMP__c: p.properties.LMP,
                  Family_Planning__c: p.properties.family_planning,
                  Family_Planning_Method__c: p.properties.family_planning_method,
                  FP_Method_Distributed__c: fpMethodDistributed,
                  Reasons_for_not_taking_FP_method__c: reasonForNotTakingFP,
                  Pregnant__c: p.properties.Pregnant === 'Yes' ? true : false,
                  Date_of_Delivery__c: p.properties.delivery_date,
                  Counselled_on_FP_Methods__c: p.properties.CounselledFP_methods,
                  Client_counselled_on__c: clientCounselled,
                  Client_provided_with_FP__c: cleanChoice(
                    p.properties[
                      'was_the_woman_15-49yrs_provided_with_family_planning_commodities_by_chv'
                    ]
                  ),
                  Received_pregnancy_test__c:
                    p.properties.did_you_adminsiter_a_pregnancy_test,
                  Pregnancy_test_result__c: p.properties.pregnancy_test_result,
                  Gravida__c: p.properties.Gravida,
                  Parity__c: p.properties.Parity,
                  //TT5 Child Information  =====================//
                  Exclusive_Breastfeeding__c: p.properties.Exclusive_Breastfeeding,
                  Counselled_on_Exclusive_Breastfeeding__c: p.properties.counseling,
                  Newborn_visited_48_hours_of_delivery__c:
                    p.properties.newborn_visited_48_hours_of_delivery,
                  Newborn_visit_counselling__c: cleanChoice(
                    p.properties.did_you_consel_the_mother_on1
                  ),
                  mother_visited_48_hours_of_the_delivery__c:
                    p.properties.visit_mother_48,
                  Mother_visit_counselling__c: cleanChoice(
                    p.properties.did_you_consel_the_mother_on2
                  ),
                  Newborn_visited_by_a_CHW_within_6_days__c:
                    p.properties.visit_6_days_from_delivery,
                  //Nutrition  =====================//
                  Caretaker_action_after_muac_screening__c:
                    p.properties.mother_screened_muac_action,
                  Caretaker_muac_findings__c:
                    p.properties.mother_screened_child_muac_result,
                  Food_groups_3_times_a_day__c: p.properties.food_groups,
                  Caretaker_screened_for_muac_this__c: cleanChoice(
                    p.properties.mother_screened_child_muac
                  ),
                  Caretaker_trained_in_muac__c: cleanChoice(
                    p.properties.mother_trained_muac
                  ),
                  of_Caretaker_MUAC_screenings__c: p.properties.mother_nb_screening,
                  Current_Height__c: p.properties.current_height,
                  Current_MUAC__c: p.properties.MUAC,
                  Current_Nutrition_Status__c: p.properties.Nutrition_Status
                    ? nutritionMap[p.properties.Nutrition_Status]
                    : undefined,
                  //TT5 & HAWI  =====================//
                  TT5_Mother_Registrant__c: p.properties.Pregnant == 'Yes' ? 'Yes' : null,
                  Enrollment_Date__c:
                    p.properties.age < 5 || p.properties.Pregnant == 'Yes'
                      ? p.server_date_modified
                      : null,
                  HAWI_Enrollment_Date__c:
                    p.properties.hiv_status == 'positive' ? p.server_date_modified : null,
                  Thrive_Thru_5_Registrant__c:
                    p.properties.age < 5 || p.properties.Pregnant == 'Yes' ? 'Yes' : 'No',
                  HAWI_Registrant__c:
                    p.properties.hiv_status == 'positive' ? 'Yes' : 'No',
                  //ANC  =====================//
                  ANC_1__c:
                    p.properties.ANC_1 && p.properties.ANC_1 !== ''
                      ? p.properties.ANC_1
                      : undefined,
                  ANC_2__c:
                    p.properties.ANC_2 && p.properties.ANC_2 !== ''
                      ? p.properties.ANC_2
                      : undefined,
                  ANC_3__c:
                    p.properties.ANC_3 && p.properties.ANC_3 !== ''
                      ? p.properties.ANC_3
                      : undefined,
                  ANC_4__c:
                    p.properties.ANC_4 && p.properties.ANC_4 !== ''
                      ? p.properties.ANC_4
                      : undefined,
                  ANC_5__c:
                    p.properties.ANC_5 && p.properties.ANC_5 !== ''
                      ? p.properties.ANC_5
                      : undefined,
                  Date_of_Birth__c:
                    p.properties.DOB && p.properties.DOB !== ''
                      ? p.properties.DOB.replace(/\\/g, '-')
                      : undefined,
                  //Immunization  =====================//
                  // Child_missed_immunization_type__c:
                  //   p.form.TT5.Child_Information.Immunizations.immunization_type,
                  BCG__c: p.properties.BCG,
                  OPV_0__c: p.properties.OPV_0,
                  Measles_6__c: p.properties.Measles_6,
                  Measles_9__c: p.properties.Measles_9,
                  Measles_18__c: p.properties.Measles_18,
                  OPV_1__c: p.properties.OPV_PCV_Penta_1,
                  OPV_2__c: p.properties.OPV_PCV_Penta_2,
                  OPV_3__c: p.properties.OPV_PCV_Penta_3,
                  Rotavirus_1__c: p.properties.rotavirus_1,
                  Rotavirus_2__c: p.properties.rotavirus_2,
                  IPV__c: p.properties.IPV,
                  Vitamin_A_12__c: p.properties.Vitamine_A,
                  Vitamin_A_18__c: p.properties.Vitamine_A_2,
                  Vitamin_A_24__c: p.properties.Vitamine_A_3,
                  Deworming_12__c: p.properties.Deworming_1,
                  Deworming_18__c: p.properties.Deworming_2,
                  Deworming_24__c: p.properties.Deworming_3,
                  //ECD  =====================//
                  Did_you_counsel_caregiver_on__c: cleanChoice(
                    p.properties.did_you_counsel_the_caregiver_on_delayed_milestones
                  ),
                  Delayed_Milestone__c: cleanChoice(
                    p.properties.does_the_child_has_a_delayed_milestone
                  ),
                  Child_has_2_or_more_play_items__c: cleanChoice(
                    p.properties.does_the_child_has_2_or_more_play_items_at_home
                  ),
                  Child_has_3_or_more_picture_books__c: cleanChoice(
                    p.properties.does_the_child_has_3_or_more_picture_books
                  ),
                  Delayed_Milestones_Counselled_On__c: p.properties
                    .which_delayed_milestone_area_did_you_counsel_the_caregiver_on
                    ? milestoneMap[
                        p.properties
                          .which_delayed_milestone_area_did_you_counsel_the_caregiver_on
                      ]
                    : undefined,
                  Delayed_Milestone_Type__c: p.properties.which_delayed_milestone
                    ? milestoneTypeMap[p.properties.which_delayed_milestone]
                    : undefined,
                  //Death  =====================//
                  Date_of_Death__c: p.properties.Date_of_Death,
                  Cause_of_Death__c: p.properties.cause_of_death_dead
                    ? p.properties.cause_of_death_dead.toString().replace(/_/g, ' ')
                    : p.properties.cause_of_death_dead,
                  Verbal_autopsy__c: p.properties.verbal_autopsy,
                  //Closing  =====================//
                  Last_Modified_Date_CommCare__c: p.date_modified,
                  Case_Closed_Date__c: p.date_closed,
                };
              });

            sfRecordMapping.forEach(rec => {
              Object.entries(rec).forEach(([key, value]) => {
                if (value === '' || value === null) rec[key] = undefined;
              });
            });

            // TODO clean up after QA
            // console.log(JSON.stringify(caregiverMapping, null, 2), 'careGiver');
            // console.log(JSON.stringify(motherMapping, null, 2), 'Mother');
             //console.log(JSON.stringify(sfRecordMapping, null, 2), 'sfRecordMapping');
            // console.log(JSON.stringify(householdMapping, null, 2), 'householdMapping');
            // console.log(
            //   JSON.stringify(headOfHouseholdMapping, null, 2),
            //   'headOfHouseholdMapping'
            // );

            return {
              ...state,
              motherMapping,
              sfRecordMapping,
              caregiverMapping,
              householdMapping,
              headOfHouseholdMapping,
            };
          });


          // TODO, Clean up when pass QA
           /*fn(state => {
             state.sfRecordMapping.forEach(rec => {
              Object.entries(rec).forEach(([key, value]) => {
                 if (typeof key !== 'string') throw `${key} is not a string`;
              });
             });
             return state;
           });
          */
          // bulk(
          //   'Household__c',
          //   'upsert',
          //   {
          //     extIdField: 'CommCare_Code__c',
          //     failOnError: true,
          //     allowNoOp: true,
          //   },
          //   state => {
          //     console.log('Bulk upserting...');
          //     return state.householdMapping;
          //   }
          // );

          // TODO, Clean up when pass QA
          // upsert data to SF
          // upsertIf(
          //   state.data.properties.commcare_username !== 'test.2021' &&
          //     state.data.properties.test_user !== 'Yes',
          //   'Person__c',
          //   'CommCare_ID__c',
          //   state => state.sfRecord
          // );

          bulk(
            'Person__c',
            'upsert',
            {
              extIdField: 'CommCare_ID__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting persons ::');
              //HMN commented this  
              //console.log(JSON.stringify(state.sfRecordMapping, null, 2));
              return state.sfRecordMapping;
            }
          );
          // TODO, Clean up when pass QA
          // upsertIf(
          //   state.data.properties.commcare_username !== 'test.2021' &&
          //     state.data.properties.test_user !== 'Yes' &&
          //     state.data.properties.caretaker_case_id !== undefined &&
          //     state.data.properties.caretaker_case_id !== '',
          //   'Person__c',
          //   'CommCare_ID__c',
          //   fields(
          //     relationship('Primary_Caregiver_Lookup__r', 'CommCare_ID__c', state => {
          //       return (caregiver = dataValue('properties.caretaker_case_id')(state));
          //     }),
          //     field('CommCare_ID__c', dataValue('case_id'))
          //   )
          // );

          bulk(
            'Person__c',
            'upsert',
            {
              extIdField: 'CommCare_ID__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting primary caregiver Persons ::');
              //console.log(JSON.stringify(state.caregiverMapping, null, 2));
              return state.caregiverMapping;
            }
          );

          // TODO, Clean up when pass QA
          // upsertIf(
          //   state.data.properties.commcare_username !== 'test.2021' &&
          //     state.data.properties.test_user !== 'Yes' &&
          //     state.data.properties.mother_case_id !== undefined &&
          //     state.data.properties.mother_case_id !== '',
          //   'Person__c',
          //   'CommCare_ID__c',
          //   fields(
          //     relationship('Mother__r', 'CommCare_ID__c', state => {
          //       return (caregiver = dataValue('properties.mother_case_id')(state));
          //     }),
          //     field('CommCare_ID__c', dataValue('case_id'))
          //   )
          // );
          bulk(
            'Person__c',
            'upsert',
            {
              extIdField: 'CommCare_ID__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting mother Person::');
             // console.log(JSON.stringify(state.motherMapping, null, 2));
              return state.motherMapping;
            }
          );

          // TODO, Clean up when pass QA
          // upsertIf(
          //   state.data.properties.commcare_username !== 'test.2021' &&
          //     state.data.properties.test_user !== 'Yes' &&
          //     state.data.properties.head_of_household_case_id !== undefined &&
          //     state.data.properties.head_of_household_case_id !== '',
          //   'Household__c',
          //   'CommCare_Code__c',
          //   fields(
          //     field('CommCare_Code__c', dataValue('indices.parent.case_id')),
          //     relationship(
          //       'Head_of_Household__r',
          //       'CommCare_ID__c',
          //       dataValue('properties.head_of_household_case_id')
          //     )
          //   )
          // );

          bulk(
            'Household__c',
            'upsert',
            {
              extIdField: 'CommCare_Code__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting head of household field on HH ::');
             // console.log(JSON.stringify(state.headOfHouseholdMapping, null, 2));
              return state.headOfHouseholdMapping;
            }
          );

    triggers:
      cron:
        type: cron
        cron_expression: '1 * * * *'
        enabled: false
    edges:
      cron->WF2-1-Bulk-get-Person-cases:
        source_trigger: cron
        target_job: WF2-1-Bulk-get-Person-cases
        condition_type: always
        enabled: true
      WF2-1-Bulk-get-Person-cases->WF2-2-Bulk-upsert-Persons:
        source_job: WF2-1-Bulk-get-Person-cases
        target_job: WF2-2-Bulk-upsert-Persons
        condition_type: on_job_success
        enabled: true
  3-Bulk-Person-Visit-cases:
    name: 3-Bulk Person Visit cases
    jobs:
      WF3-1-Bulk-get-Person-Visit-cases:
        name: WF3-1 Bulk get Person Visit cases
        adaptor: '@openfn/language-http@6.5.1'
        credential: rita@openfn.org-Lwala-case-endpoint-production-user
        body: |
          fn(state => {
            const { baseUrl } = state.configuration;

            const caseTypes = ['visite'];

            //NOTE: You can use 'limit' to modify this batch size as desired
            const limit = 1000; //E.g., change to 10 to process records in smaller batch sizes

            //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs
            const indexedOnStart = '2024-01-17T01:00:00';

            //NOTE: After first job run, OpenFn will check the job sync data ("lastRunAt") to set as the indexedOnStart
            const lastRunAt =
              typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;
            console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);
            
            const aMinuteAgo = new Date( Date.now() - 1000 * 60 );
            console.log(aMinuteAgo);

            const queries = caseTypes.map(
             t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}
             &owner_id=a3c31c9be392427a97f8704262065661` // User id of test user test.2021. Remove for production
              //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...
              //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates
             //t => `?type=${t}&indexed_on_start=2024-01-15T00:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59`
            );

            return { ...state, queries, baseUrl, payloads: [] };
          });

          // create a "recursiveGet" which will call itself if CommCare tells us there's
          // more data to fetch for the same form

          fn(state => {
            const recursiveGet = url =>
              get(
                url,
                {
                  headers: { 'content-type': 'application/json' },
                },
                nextState => {
                  const now = new Date();
                  const { baseUrl, data, payloads } = nextState;

                  const { meta, objects } = data;
                  console.log('Metadata in CommCare response:', meta);

                  const finalState = {
                    ...nextState,
                    payloads: [...payloads, ...objects],
                  };

                  if (meta.next) {
                    console.log('Next query detected, recursing...');
                    return recursiveGet(`${baseUrl}${meta.next}`)(finalState);
                  }
                  finalState.lastRunAt = now.toISOString().slice(0, 19);
                  return finalState;
                }
              );

            return { ...state, recursiveGet };
          });

          // for each initial query, fetch data recursively
          each(
            '$.queries[*]',
            fn(state => {
              return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);
            })
          );
          // log the total number of payloads returned
          fn(state => {
            console.log('Count of payloads', state.payloads.length);

            return { ...state, references: [], data: {} };
          });

      WF3-2-Bulk-upsert-Person-Visits:
        name: WF3-2 Bulk upsert Person Visits
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          fn(state => {
            if (state.payloads.length == 0) return { ...state, personVisits: [] };

            const owner_ids = state.payloads.map(data => data.properties.owner_id);
            const uniq_owner_ids = [...new Set(owner_ids)];

            return { ...state, uniq_owner_ids };
          });

          fn(state => {
            if (state.payloads.length == 0) return state;
            return query(
              `SELECT CommCare_User_ID__c, Id village, Parent_Geographic_Area__c area, Parent_Geographic_Area__r.Name name, Parent_Geographic_Area__r.Parent_Geographic_Area__c catchment FROM Location__c WHERE CommCare_User_ID__c IN ('${state.uniq_owner_ids.join(
                "','"
              )}') GROUP BY Id, CommCare_User_ID__c, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c`
            )(state);
          });

          fn(state => {
            if (state.payloads.length == 0) return state;
            const [reference] = state.references;

            
           // console.log(JSON.stringify(reference, null, 2));
            const records = reference.records;
            const fetchReference = (owner_id, arg) => {
              const result =
                records && records.length > 0
                  ? records.filter(record => record.CommCare_User_ID__c === owner_id)
                  : 0;

              return result.length > 0 ? result[0][arg] : undefined;
            };
            const cleanChoice = choice => {
              if (choice) {
                return choice.charAt(0).toUpperCase() + choice.slice(1).replace('_', ' ');
              } else {
                return '';
              }
            };

            const handleMultiSelect = multiField => {
              return multiField
                ? multiField
                    .replace(/ /gi, ';')
                    .toLowerCase()
                    .split(';')
                    .map(value => {
                      return (
                        value.charAt(0).toUpperCase() + value.slice(1).replace('_', ' ')
                      );
                    })
                    .join(';')
                : '';
            };

            const handleMultiSelectOriginal = multiField => {
              return multiField
                ? multiField
                    .replace(/ /gi, ';')
                    .toLowerCase()
                    .split(';')
                    .map(value => {
                      return value;
                    })
                    .join(';')
                : '';
            };

            const pregDangerMap = {
              Vaginal_Bleeding: 'Vaginal Bleeding',
              Water_Breaks: 'Water Breaks before Time of Delivery',
              Prolonged_Labour: 'Prolonged Labour over 12 Hours',
              Convulsions: 'Convulsions or Fits',
              Abdominal_Pain: 'Severe Abdominal Pain before Delivery',
              High_Fever: 'High Fever',
              Low_Baby_Movement: 'Feeling the Baby move less or not at all',
              Swelling: 'Swelling of Face and Hands',
              Severe_Headache: 'Severe or Continuous Headache for more than 12 hours',
              Severe_Vomiting: 'Severe or Continuous Vomiting',
              none: 'None',
            };

            const counselMap = {
              anc_visits: 'ANC Visits',
              early_initiation_of_anc_less_than_3_months:
                'Early initiation of ANC (less than 3 months)',
              completing_recomended_anc_visits: 'Completing recomended ANC visits',
              danger_signs: 'Danger signs',
              skilled_birth: 'Skilled birth',
              immunization: 'Immunization',
              individual_birth_plan: 'Individual Birth Plan',
              emergency_preparedness: 'Emergency preparedness',
              childcare_and_affection: 'Childcare and affection',
              nutrition_counseling: 'Nutrition counseling',
              growth_monitoring: 'Growth monitoring',
              exclusive_breastfeeding: 'Exclusive breastfeeding',
              complementary_feeding: 'Complementary feeding',
              sleeping_under_llitn: 'Sleeping under LLITN',
              knowing_hiv_status: 'Knowing HIV status',
              indoor_pollution: 'Indoor pollution',
              personal_hygiene: 'Personal Hygiene',
              safe_drinking_water: 'Safe drinking water',
              safe_disposal_of_human_waste: 'Safe disposal of human waste',
            };

            const serviceMap = {
              Scheduled_PSC_Apt: 'Scheduled PSC Apt',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction/Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              TB: 'TB',
              Treatment_for_Other_OIs: 'Treatment for other Ols',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care: 'Pregnancy Care (ANC)',
              Family_Planning: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              Other: 'Other',
            };

            const reasonMap = {
              lack_of_access_to_fp_information: 'Lack of access to FP information',
              no_access_to_fp_services_hospitals:
                'Lack of hospitals or places where FP services can be accessed',
              not_willing_to_use_fp_due_to_negative_effects_myths_and_misconceptions:
                'Myths and misconceptions',
              barriers_at_service_delivery_points: 'Barriers at service delivery points',
              pregnant: 'The client is pregnant',
              intentions_of_getting_pregnant: 'Intentions of getting pregnant',
              not_sexually_active: 'The client is not sexually active',
              other_barriers_culture_male_partners_parents_etc:
                'Other barriers (culture, male partners, parents, etc)',
            };

            const milestoneTypeMap = {
              cognitive_delays_learning_difficulties:
                'Cognitive Delays Learning Difficulties',
              motor_delays: 'Motor Delays',
              speech_and_language_delay: 'Delay Speech and Language Delay',
              social_and_emotional: 'Social and emotional',
            };

            const milestoneMap = {
              movement: 'Movement',
              hearing: 'Hearing',
              communication: 'Communication',
              seeing: 'Seeing',
              cognitive_delays: 'Cognitive Delays',
              play: 'Play',
            };
            const nutritionMap = {
              severe: 'Severely Malnourished',
              moderate: 'Moderately Malnourished',
              normal: 'Normal',
            };

            const fpMethodMap = {
              male_condoms: 'Male condoms',
              female_condoms: 'Female condoms',
              pop: 'POP',
              coc: 'COC',
              emergency_pills: 'Emergency pills',
              none: 'None',
              //HMN -12/01/2023-
              //adding normalization for the family_planning_method to Family_Planning_Method__c
              iucd: 'IUCD',
              condoms: 'Condoms',
              depo: 'Depo',
              implant: 'Implant',
              injection: 'Injection',
              pills: 'Pills',
              traditional: 'Traditional',
            };

            const symptomsMap = {
              convulsions: 'Convulsions',
              not_able_to_eatdrink: 'Not able to drink or feed at all',
              vomits_everything: 'Vomits everything',
              'chest_in-drawing': 'Chest in - drawing',
              unusually_sleepyunconscious: 'Unusually sleepy or unconscious',
              swelling_of_both_feet: 'Swelling of both feet',
              none: 'None',
            };

            const supervisorMap = {
              community_health_nurse: 'Community_health_nurse',
              chw_supervisor: 'CHW_supervisor',
              chewschas: 'Chewschas',
              other: 'Other',
              none: 'None',
            };

            const treatmentDistributionMap = {
              ors_205gltr_sachets: 'ORS (20.5h/ltr): Sachets',
              acts_6s: 'ACTs (6s)',
              acts_12s: 'ACTs (12s)',
              acts_18s: 'ACTs (18s)',
              acts_24s: 'ACTs (24s)',
              albendazole_abz_tabs: 'Albendazole (ABZ): Tabs',
              paracetamol_tabs: 'Tetracycline Eye Ointment (TEO): 1%:tube',
              tetracycline_eye_ointment_teo_1_tube:
                'Tetracycline Eye Ointment (TEO): 1%:tube',
              amoxycillin: 'Amoxycillin (125mg/5mls: Bottle',
              none: 'None',
            };

            const childDangerSignsMap = {
              none: 'None',
              Poor_Breastfeeding: 'Poor Breastfeeding',
              not_able_to_feed_since_birth_or_stopped_feeding_well:
                'Not able to feed since birth, or stopped feeding well',
              not_able_to_breastfeed: 'Not able to breastfeed',
              Fever: 'Fever',
              very_low_temperature: 'Very low temperature (35.4 C or less)',
              shivering: 'Shivering',
              Fast_Breathing: 'Fast Breathing',
              Very_Sleepy: 'Very Sleepy',
              Convulsions_and_Fits: 'Convulsions and Fits',
              only_moves_when_stimulated_or_does_not_move_even_on_stimulation:
                'Only moves when stimulated, or does not move even on stimulation',
              yellow_solebaby_body_turning_yellow_especially_eyes_palms_soles:
                'Yellow sole(Baby body turning yellow especially eyes, palms,soles)',
              bleeding_from_the_umbilical_stump: 'Bleeding from the umbilical stump',
              signs_of_local_infection_umbilicus_is_red_or_draining_pus_skin_boils_or_eye:
                'Signs of local infection: umbilicus is red or draining pus, skin boils, or eyes draining pus',
              weight_chart_using_color_coded_scales_if_red_or_yellowweight_below_25kg_or_:
                'Weight chart using color coded scales if RED or YELLOW(Weight below 2.5kg or born less than 36 weeks of age)',
              unable_to_cry: 'Unable to cry',
              cyanosis: 'Cyanosis',
              bulging_fontanelle: 'Bulging fontanelle',
            };

            return {
              ...state,
              counselMap,
              serviceMap,
              reasonMap,
              milestoneTypeMap,
              milestoneMap,
              nutritionMap,
              pregDangerMap,
              fpMethodMap,
              symptomsMap,
              supervisorMap,
              treatmentDistributionMap,
              childDangerSignsMap,
              fetchReference,
              cleanChoice,
              handleMultiSelect,
              handleMultiSelectOriginal,
            };
          });

          fn(state => {
            if (state.payloads.length == 0) return state;
            const {
              counselMap,
              serviceMap,
              reasonMap,
              milestoneTypeMap,
              milestoneMap,
              nutritionMap,
              pregDangerMap,
              fpMethodMap,
              symptomsMap,
              supervisorMap,
              treatmentDistributionMap,
              childDangerSignsMap,
              fetchReference,
              cleanChoice,
              handleMultiSelect,
              handleMultiSelectOriginal,
            } = state;

            const personVisits = state.payloads
              //HMN 30/06/2023 Allow test user to post
              /*
              .filter(
                p =>
                  p.properties.username !== 'test.2021' &&
                  p.properties.test_user !== 'Yes'
              )*/
              .map(p => {
                // commCareVisitID
                const commCareCase_id = p.case_id;
                const dateVisit = p.properties.date_opened;
                const commCareVisitID = commCareCase_id + '_' + dateVisit;

                // personsSymptoms
                const psCheck = p.properties.symptoms_check_other;
                const psValue =
                  psCheck && psCheck !== ''
                    ? psCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return symptomsMap[value] || value;
                        })
                    : undefined;
                const personsSymptoms = psValue ? psValue.join(';') : undefined;

                // familyPlanningMethod
                const fpmStatus = p.properties.family_planning_method;
                const fpmValue =
                  fpmStatus && fpmStatus !== ''
                    ? fpmStatus
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return fpMethodMap[value] || value;
                        })
                    : undefined;
                const familyPlanningMethod = fpmValue ? fpmValue.join(';') : undefined;

                // fpMethodDistributed
                const fpmdStatus = p.properties.FP_commodity;
                const fpmdValue =
                  fpmdStatus && fpmdStatus !== ''
                    ? fpmdStatus
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return fpMethodMap[value] || value;
                        })
                    : undefined;
                const fpMethodDistributed = fpmdValue ? fpmdValue.join(';') : undefined;

                // reasonForNotTakingFPMethod
                const rfntStatus = p.properties.No_FPmethod_reason;
                const rfntValue =
                  rfntStatus && rfntStatus !== ''
                    ? rfntStatus
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return reasonMap[value] || value;
                        })
                    : undefined;
                const reasonForNotTakingFPMethod = rfntValue
                  ? rfntValue.join(';')
                  : undefined;

                // clientCounselledOnC
                const ccocChoices =
                  p.properties.counsel_topic || p.properties.counsel_topic;
                const ccocVhoiceGroups = ccocChoices ? ccocChoices.split(' ') : null;
                const clientCounselledOnC = ccocVhoiceGroups
                  ? ccocVhoiceGroups
                      .map(cg => {
                        return counselMap[cg];
                      })
                      .join(';')
                  : ccocVhoiceGroups;

                // treatmentDistributionC
                //const tdcStatus = p.form.treatment_and_tracking.distribution.distributed_treatments;
                const tdcStatus = p.properties.distributed_treatments;
                const tdcValue =
                  tdcStatus && tdcStatus !== ''
                    ? tdcStatus
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return treatmentDistributionMap[value] || value;
                        })
                    : undefined;
                const treatmentDistributionC = tdcValue ? tdcValue.join(';') : undefined;

                // chronicIllnesC
                const ciChoice =
                  p.properties.please_specify_which_chronic_illness_the_person_has;
                const ciChoice2 = handleMultiSelect(ciChoice);
                const chronicIllnesC = ciChoice2 ? ciChoice2.replace(/_/g, ' ') : '';

                // supervisorVisit
                const svCheck = p.properties.supervisor_visit;
                const svValue =
                  svCheck && svCheck !== ''
                    ? svCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return supervisorMap[value] || value;
                        })
                    : undefined;
                const supervisorVisit = svValue ? svValue.join(';') : undefined;
                const recordType = p.properties.RecordType;

                return {
                  CommCare_ID__c: p.case_id, //'visit' case_id
                  'Person__r.CommCare_ID__c':
                    p.indices.parent.case_id || p.properties.parent_id,
                  CommCare_Visit_ID__c: commCareVisitID,
                  Date__c: p.properties.Date,
                  Birth_Status__c: p.properties.child_status,
                  Catchment__c: fetchReference(p.properties.owner_id, 'catchment'),
                  //HMN Accommodating Record Type in Visit
                  'RecordType.Name': recordType === 'Unborn' || recordType === 'Child' 
                    ? 'Child Visit' 
                    :recordType === 'Youth'
                    ? 'Youth Visit'
                    :recordType === 'Male Adult'
                    ? 'Adult Male Visit'
                    : recordType === 'Female Adult'
                    ? 'Adult Female Visit'
                    :undefined,
                  Use_mosquito_net__c: cleanChoice(p.properties.sleep_under_net),
                  Individual_birth_plan_counselling__c:
                    p.properties.individual_birth_plan,
                  Reason_for_not_taking_a_pregnancy_test__c: p.properties.No_Preg_Test
                    ? p.properties.No_Preg_Test.toString().replace(/_/g, ' ')
                    : undefined,
                  Pregnancy_danger_signs__c: p.properties.No_Preg_Test
                    ? pregDangerMap[p.properties.No_Preg_Test]
                    : undefined,
                  Child_Danger_Signs__c: p.properties.Other_Danger_Signs
                    ? childDangerSignsMap[p.properties.Other_Danger_Signs]
                    : undefined,
                  Current_Malaria_Status__c: cleanChoice(
                    p.properties.malaria_test_results
                  ),
                  Malaria_Home_Test__c: p.properties.malaria_test_date,
                  Malaria_Home_Treatment__c: p.properties.malaria_test_date,
                  Persons_symptoms__c: personsSymptoms,
                  Active_in_Support_Group__c: p.properties.Active_in_Support_Group,
                  HAWI_Defaulter__c: p.properties.default === 'Yes' ? true : false,
                  Date_of_Default__c: p.properties.date_of_default,
                  Persons_temperature__c: p.properties.temperature,
                  Days_since_illness_start__c: p.properties.duration_of_sickness,
                  Newborn_visited_48_hours_of_delivery__c:
                    p.properties.newborn_visited_48_hours_of_delivery,
                  Newborn_visited_by_a_CHW_within_6_days__c:
                    p.properties.visit_6_days_from_delivery,
                  Current_Malaria_Status__c: p.properties.malaria_test_results,
                  Malaria_test__c: cleanChoice(p.properties.malaria_test),
                  Fever__c: cleanChoice(p.properties.symptoms_check_fever),
                  Cough__c: cleanChoice(p.properties.symptoms_check_cough),
                  Diarrhoea__c: cleanChoice(p.properties.symptoms_check_diarrhea),
                  TB_patients_therapy_observed__c: p.properties.observed_tb_therapy,
                  Injuries_or_wounds__c: p.properties.wounds_or_injuries,
                  Currently_on_ART_s__c: p.properties.ART,
                  // ART_Regimen__c: () => {
                  // const choice = dataValue(
                  //  'properties.ARVs;
                  // return cleanChoice(choice);
                  // },
                  Immediate_Breastfeeding__c: p.properties.Breastfeeding_Delivery,
                  Exclusive_Breastfeeding__c: p.properties.Exclusive_Breastfeeding,
                  Counselled_on_Exclusive_Breastfeeding__c: p.properties.counseling,
                  LMP__c: p.properties.when_was_your_lmp,
                  Family_Planning__c: cleanChoice(p.properties.family_planning),
                  Family_Planning_Method__c: p.properties.family_planning_method,
                  Family_Planning_Method__c: familyPlanningMethod,
                  FP_Method_Distributed__c: fpMethodDistributed,
                  Reasons_for_not_taking_FP_method__c: reasonForNotTakingFPMethod,
                  Pregnant__c: p.properties.Pregnant === 'Yes' ? true : false,
                  Counselled_on_FP_Methods__c: cleanChoice(
                    p.properties.CounselledFP_methods
                  ),
                  Client_counselled_on__c: clientCounselledOnC,
                  Client_provided_with_FP__c: cleanChoice(
                    p.properties[
                      'was_the_woman_15-49yrs_provided_with_family_planning_commodities_by_chv'
                    ]
                  ),
                  Newborn_visited_48_hours_of_delivery__c:
                    p.properties.newborn_visited_48_hours_of_delivery,
                  Mother_visit_counselling__c: cleanChoice(
                    p.properties.did_you_consel_the_mother_on1
                  ),
                  mother_visited_48_hours_of_the_delivery__c:
                    p.properties.visit_mother_48,
                  Newborn_visit_counselling__c: cleanChoice(
                    p.properties.did_you_consel_the_mother_on2
                  ),
                  Know_HIV_status__c: cleanChoice(p.properties.known_hiv_status),
                  HIV_Status__c: p.properties.hiv_status,
                  Treatment_Distribution__c: treatmentDistributionC,
                  // QUESTION: Field name not found : Current_Weight__c
                  // Current_Weight__c: p.properties.Current_Weight,
                  Current_Height__c: p.properties.current_height,
                  Current_MUAC__c: p.properties.MUAC,
                  Food_groups_3_times_a_day__c: p.properties.food_groups,
                  Nutrition_Case_Managed__c: p.properties.nutrition_case_managed,
                  Nutrition_Danger_Signs__c: handleMultiSelectOriginal(
                    p.properties.nutrition_danger_signs
                  ),
                  Why_was_nutrition_case_not_managed__c:
                    p.properties.nutrition_case_not_managed_why,
                  Community_Nutrition_Treatment__c:
                    p.properties.nutrition_treatment_severe,
                  Community_Nutrition_Treatment__c:
                    p.properties.nutrition_treatment_moderate,
                  Why_was_nutrition_treatment_not_given__c:
                    p.properties.nutrition_treatment_not_given,
                  Current_Nutrition_Status__c: p.properties.Nutrition_Status
                    ? nutritionMap[p.properties.Nutrition_Status]
                    : undefined,
                  Default_on_TB_treatment__c: cleanChoice(
                    p.properties.default_tb_treatment
                  ),
                  Received_pregnancy_test__c: cleanChoice(
                    p.properties.did_you_adminsiter_a_pregnancy_test
                  ),
                  Pregnancy_test_result__c: cleanChoice(
                    p.properties.pregnancy_test_result
                  ),
                  Chronic_illness__c: chronicIllnesC,
                  Childs_breath_per_minute__c: p.properties.breaths_per_minuite,
                  Child_chest_in_drawing__c: p.properties.Child_chest_in_drawing_c,
                  Caregiver_counseled_on_delayed_milestone__c:
                    p.properties.did_you_counsel_the_caregiver_on_delayed_milestones,
                  Delayed_Milestone__c:
                    p.properties.does_the_child_has_a_delayed_milestone,
                  Child_has_2_or_more_play_items__c:
                    p.properties.does_the_child_has_2_or_more_play_items_at_home,
                  Child_has_3_more_picture_books__c:
                    p.properties.does_the_child_has_3_or_more_picture_books,
                  Delayed_Milestones_Counselled_On__c: p.properties
                    .which_delayed_milestone_area_did_you_counsel_the_caregiver_on
                    ? milestoneMap[
                        p.properties
                          .which_delayed_milestone_area_did_you_counsel_the_caregiver_on
                      ]
                    : undefined,
                  Delayed_Milestone_Type__c: p.properties.which_delayed_milestone
                    ? milestoneMap[p.properties.which_delayed_milestone]
                    : undefined,
                  Caretaker_trained_in_muac__c: p.properties.mother_trained_muac,
                  Caretaker_screened_for_muac_this__c:
                    p.properties.mother_screened_child_muac,
                  Caretaker_muac_findings__c:
                    p.properties.mother_screened_child_muac_result,
                  Caretaker_action_after_muac_screening__c:
                    p.properties.mother_screened_muac_action,
                  of_Caretaker_MUAC_screenings__c: p.properties.mother_nb_screening,
                  Pulse_Oximeter__c: p.properties.pulse_oximeter_available,
                  Heart_Rate_Pulse_Oximeter__c: p.properties.heart_rate_pulse_oximeter,
                  Oxygen_Concentration_Pulse_Oximeter__c:
                    p.properties.oxygen_concentration,
                  Can_child_drink__c: p.properties.can_child_drink,
                  Antibiotic_provided_for_fast_breathing__c:
                    p.properties.antibiotic_fast_breathing,
                  Antibiotic_provided_for_chest_indrawing__c:
                    p.properties.antibiotic_chest_indrawing,
                  Supervisor_Visit__c: supervisorVisit,
                  //HMN commented this one due to error "Error: InvalidBatch : Field name not found : Visit_Closed_Date__c"
                  //Visit_Closed_Date__c: p.properties.date_closed,
                  //29/06/2023 Added Malaria Vaccine mapping 
                  malaria_vaccine_received__c:
                    p.properties.malaria_vaccine_received,
                  rts_s_1_date__c:
                    p.properties.rts_s_1_date,
                  rts_s_2_date__c:
                    p.properties.rts_s_2_date, 
                  rts_s_3_date__c:
                    p.properties.rts_s_3_date, 
                  rts_s_4_date__c:
                    p.properties.rts_s_4_date, 
                    
                    //HMN 29/06/2023
                };
              });

            personVisits.forEach(person => {
              Object.entries(person).forEach(([key, value]) => {
                if (value === '' || value === null) person[key] = undefined;
              });
            });

            // JSON logging of records
            //HMN debugger 19/10/2023
           //  console.log(JSON.stringify(personVisits, null, 2));

            return { ...state, personVisits };
          });

          bulk(
            'Person_visit__c',
            'upsert',
            {
              extIdField: 'CommCare_ID__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting person visit...');
              return state.personVisits;
            }
          );

    triggers:
      cron:
        type: cron
        cron_expression: '2 * * * *'
        enabled: false
    edges:
      cron->WF3-1-Bulk-get-Person-Visit-cases:
        source_trigger: cron
        target_job: WF3-1-Bulk-get-Person-Visit-cases
        condition_type: always
        enabled: true
      WF3-1-Bulk-get-Person-Visit-cases->WF3-2-Bulk-upsert-Person-Visits:
        source_job: WF3-1-Bulk-get-Person-Visit-cases
        target_job: WF3-2-Bulk-upsert-Person-Visits
        condition_type: on_job_success
        enabled: true
  4-Bulk-Referral-cases:
    name: 4-Bulk Referral cases
    jobs:
      WF4-1-Bulk-get-Referral-Cases:
        name: WF4-1 Bulk get Referral Cases
        adaptor: '@openfn/language-http@6.5.0'
        credential: rita@openfn.org-Lwala-case-endpoint-production-user
        body: |
          fn(state => {
            const { baseUrl } = state.configuration;

            const caseTypes = ['Case'];

            //NOTE: You can use 'limit' to modify this batch size as desired
            const limit = 1000; //E.g., change to 10 to process records in smaller batch sizes

            //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs
            const indexedOnStart = '2024-01-17T00:00:00';

            //NOTE: After first job run, OpenFn will check the job sync data ("lastRunAt") to set as the indexedOnStart
            const lastRunAt =
              typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;
            console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);

            const queries = caseTypes.map(
               t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}
               &owner_id=a3c31c9be392427a97f8704262065661` // User id of test user test.2021. Remove for production`
              //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...
              //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates
              //t => `?type=${t}&indexed_on_start=2024-01-14T00:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59`
            );

            return { ...state, queries, baseUrl, payloads: [] };
          });

          // create a "recursiveGet" which will call itself if CommCare tells us there's
          // more data to fetch for the same form
          fn(state => {
            const recursiveGet = url =>
              get(
                url,
                {
                  headers: { 'content-type': 'application/json' },
                },
                nextState => {
                  const now = new Date();
                  const { baseUrl, data, payloads } = nextState;

                  const { meta, objects } = data;
                  console.log('Metadata in CommCare response:', meta);

                  const finalState = {
                    ...nextState,
                    payloads: [...payloads, ...objects],
                  };

                  if (meta.next) {
                    console.log('Next query detected, recursing...');
                    return recursiveGet(`${baseUrl}${meta.next}`)(finalState);
                  }
                  finalState.lastRunAt = now.toISOString().slice(0, 19);
                  return finalState;
                }
              );

            return { ...state, recursiveGet };
          });

          // for each initial query, fetch data recursively
          each(
            '$.queries[*]',
            fn(state => {
              return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);
            })
          );
          // log the total number of payloads returned
          fn(state => {
            console.log('Count of payloads', state.payloads.length);
            return { ...state, references: [], data: {} };
          });

      WF4-2-Bulk-upsert-Services:
        name: WF4-2 Bulk upsert Services
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          // NOTE: We perform a query before anything else if this is a 'Case'
          fn(state => {
            // state.type = state.data.indices.parent.case_type;
            if (state.payloads.length == 0) return { ...state, services: [] };

            const caseType = state.payloads
              .filter(c => c.indices.parent.case_type === 'Case')
              .map(c => c.indices.parent.case_id);

             console.log(JSON.stringify(caseType, null, 2));

            if (caseType.length > 0)
              return query(
                `SELECT Person__r.CommCare_ID__c FROM Service__c WHERE Service_UID__c IN ('${caseType.join(
                  "','"
                )}')`
              )(state).then(state => {
                const { records } = state.references[0];
                const ccId =
                  records.length == 1 ? records[0].Person__r.CommCare_ID__c : null;
                return { ...state, ccId };
              });

            return state;
          });

          // NOTE: We construct a facilityMap and populate some conditional relationships
          fn(state => {
            if (state.payloads.length == 0) return state;
            const facilityMap = {
              Lwala_Hospital: 'Lwala Hospital',
              Minyenya_Dispensary: 'Minyenya Dispensary',
              Ndege_Oriedo_Dispensary: 'Ndege Oriedo Dispensary',
              'Rongo_Sub-District_Hospital': 'Rongo Sub-District Hospital',
              Kangeso_Dispensary: 'Kangeso Dispensary',
              Ngodhe_Dispensary: 'Ngodhe Dispensary',
              Ngere_Dispensary: 'Ngere Dispensary',
              Verna_Health_Center: 'Verna Health Center',
              Kochola_Dispensary: 'Kochola Dispensary',
              Ongo_Health_Center: 'Ongo Health Center',
              Royal_Medical_Center: 'Royal Medical Center',
              Rosewood_Facility: 'Rosewood Facility',
              Other: 'Other',
            };

            const pregDangerMap = {
              Vaginal_Bleeding: 'Vaginal Bleeding',
              Water_Breaks: 'Water Breaks before Time of Delivery',
              Prolonged_Labour: 'Prolonged Labour over 12 Hours',
              Convulsions: 'Convulsions or Fits',
              Abdominal_Pain: 'Severe Abdominal Pain before Delivery',
              High_Fever: 'High Fever',
              Low_Baby_Movement: 'Feeling the Baby move less or not at all',
              Swelling: 'Swelling of Face and Hands',
              Severe_Headache: 'Severe or Continuous Headache for more than 12 hours',
              Severe_Vomiting: 'Severe or Continuous Vomiting',
              none: 'None',
            };

            const serviceMap = {
              Scheduled_PSC_Apt: 'Scheduled PSC Apt',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction/Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              TB: 'TB',
              Treatment_for_Other_OIs: 'Treatment for Other OIs',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care: 'Pregnancy Care (ANC)',
              Family_Planning: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              Other: 'Other',
            };

            const milestoneTypeMap = {
              cognitive_delays_learning_difficulties:
                'Cognitive Delays (Learning Difficulties)',
              motor_delays: 'Motor Delays',
              speech_and_language_delay: 'Speech and language Delay',
              social_and_emotional: 'Social and emotional',
            };

            const symptomsMap = {
              convulsions: 'Convulsions',
              not_able_to_eatdrink: 'Not able to eat/drink',
              vomits_everything: 'Vomits everything',
              'chest_in-drawing': 'Chest in-drawing',
              unusually_sleepyunconscious: 'Unusually sleepy/unconscious',
              swelling_of_both_feet: 'Swelling of both feet',
            };

            const childSignMap = {
              Poor_Breastfeeding: 'Poor Breastfeeding (under 6 months old child)',
              not_able_to_feed_since_birth_or_stopped_feeding_well:
                'Not able to feed since birth, or stopped feeding well',
              not_able_to_breastfeed: 'Not able to breastfeed',
              Fever: 'Fever (37.5 C or more)',
              very_low_temperature: 'Very low temperature (35.4 C or less)',
              shivering: 'Shivering',
              Fast_Breathing: 'Fast Breathing',
              Very_Sleepy: 'Very Sleepy',
              Convulsions_and_Fits: 'Convulsions and Fits',
              only_moves_when_stimulated_or_does_not_move_even_on_stimulation:
                'Only moves when stimulated, or does not move even on stimulation',
              yellow_solebaby_body_turning_yellow_especially_eyes_palms_soles:
                'Yellow sole(Baby body turning yellow especially eyes, palms, soles)',
              bleeding_from_the_umbilical_stump: 'Bleeding from the umbilical stump',
              signs_of_local_infection_umbilicus_is_red_or_draining_pus_skin_boils_or_eye:
                'Signs of local infection: umbilicus is red or draining pus, skin boils, or eyes draining pus',
              weight_chart_using_color_coded_scales_if_red_or_yellowweight_below_25kg_or_:
                'Weight chart using color coded scales if RED or YELLOW(Weight below 2.5kg or born less than 36 weeks of age)',
              unable_to_cry: 'Unable to cry',
              cyanosis: 'Cyanosis',
              bulging_fontanelle: 'Bulging fontanelle',
            };

            const otherReferralMap = {
              HIV_Testing_and_Counseling: 'HIV Testing and Counseling',
              Visit_to_Clinician: 'Visit to Clinician',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              PMTCT: 'PMTCT',
              TB: 'TB',
              Treatment_for_other_OIs: 'Treatment for other OIs',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care_ANCE: 'Pregnancy Care (ANC)',
              Family_Planning_FP: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              blood_in_stool: 'Blood in Stool',
              Blood_in_Stool: 'Blood in Stool',
              Immunization: 'Immunization',
              Routine_Health_Check_ups: 'Routine Health Check ups',
              routine_health_check_ups: 'Routine Health Check ups',
              Other: 'Other',
              Poor_Breastfeeding: 'Poor Breastfeeding (under 6 months old child)',
              not_able_to_feed_since_birth_or_stopped_feeding_well:
                'Not able to feed since birth, or stopped feeding well',
              not_able_to_breastfeed: 'Not able to breastfeed',
              Fever: 'Fever (37.5 C or more)',
              very_low_temperature: 'Very low temperature (35.4 C or less)',
              shivering: 'Shivering',
              Fast_Breathing: 'Fast Breathing',
              Very_Sleepy: 'Very Sleepy',
              Convulsions_and_Fits: 'Convulsions and Fits',
              only_moves_when_stimulated_or_does_not_move_even_on_stimulation:
                'Only moves when stimulated, or does not move even on stimulation',
              yellow_solebaby_body_turning_yellow_especially_eyes_palms_soles:
                'Yellow sole(Baby body turning yellow especially eyes, palms, soles)',
              bleeding_from_the_umbilical_stump: 'Bleeding from the umbilical stump',
              signs_of_local_infection_umbilicus_is_red_or_draining_pus_skin_boils_or_eye:
                'Signs of local infection: umbilicus is red or draining pus, skin boils, or eyes draining pus',
              weight_chart_using_color_coded_scales_if_red_or_yellowweight_below_25kg_or_:
                'Weight chart using color coded scales if RED or YELLOW(Weight below 2.5kg or born less than 36 weeks of age)',
              unable_to_cry: 'Unable to cry',
              cyanosis: 'Cyanosis',
              bulging_fontanelle: 'Bulging fontanelle',
            };

            const homeCareMap = {
              Adherence_Counseling: 'Adherence Counseling',
              Pill_Count_Monitoring: 'Pill Count Monitoring',
              Nutrition_Assessment_and_Counseling: 'Nutrition Assessment and Counseling',
              WASH_Counseling: 'WASH Counseling',
              Prevention_Counseling: 'Prevention Counseling',
              Psychosocial_Support: 'Psychosocial Support',
              Provision_of_Supplies: 'Provision of Supplies',
              OI_Management_Support: 'OI Management Support',
            };

            const ecdMap = {
              physiotherapy: 'Physiotherapy',
              speech_therapy: 'Speech Therapy',
              nutrition_education: 'Nutrition Education',
              play_therapy: 'Play Therapy',
              assessment: 'Assessment',
              counselling: 'Counselling',
              other: 'Other',
            };

            const clinicalMap = {
              diarrhea: 'Diarrhea',
              malnutrition: 'Malnutrition',
              malaria: 'Malaria',
              acute_respiratory_infection: 'Acute Respiratoy Infection (ARI)',
              accident_injury: 'Accident/Injury',
              other: 'Other',
            };

            const caseType = state.payloads
              .filter(c => c.indices.parent.case_type === 'Case')
              .map(c => c.indices.parent.case_id);

            const personType = state.payloads
              .filter(c => c.indices.parent.case_type === 'Person')
              .map(c => c.indices.parent.case_id);

            let relationships = [];

            // If it's a person, add the person relationship
            if (personType.length > 0) {
              personType.forEach(case_id => {
                relationships.push({ 'Person__r.CommCare_ID__c': case_id });
              });
            }

            // If it's a service, add the service rship AND a different person rship
            if (caseType.length > 0) {
              caseType.forEach(case_id => {
                relationships.push({ 'Parent_Service__r.Service_UID__c': case_id });
              });

              relationships.push({ 'Person__r.CommCare_ID__c': state.ccId });
            }

            return {
              ...state,
              facilityMap,
              relationships,
              serviceMap,
              pregDangerMap,
              milestoneTypeMap,
              symptomsMap,
              childSignMap,
              otherReferralMap,
              homeCareMap,
              clinicalMap,
              ecdMap,
            };
          });

          // NOTE: We finally upsert to the Service__c object in Salesforce
          fn(state => {
            if (state.payloads.length == 0) return state;
            const services = state.payloads
              .filter(r => r.properties.owner_id !== '8e725928e3ce43d19b390dd604097069')
              .map(r => {
                // pregnancyDangerSigns
                const pCheck = r.properties.pregnancy_danger_signs;
                const pValue =
                  pCheck && pCheck !== ''
                    ? pCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.pregDangerMap[value] || value;
                        })
                    : undefined;
                const pregnancyDangerSigns = pValue ? pValue.join(';') : undefined;

                // childDangerSigns
                const cCheck = r.properties.Other_Danger_Signs;
                const cValue =
                  cCheck && cCheck !== ''
                    ? cCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.childSignMap[value] || value;
                        })
                    : undefined;
                const childDangerSigns = cValue ? cValue.join(';') : undefined;

                // delayedMilestone
                const dCheck = r.properties.which_delayed_milestone;
                const dValue =
                  dCheck && dCheck !== ''
                    ? dCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.milestoneTypeMap[value] || value;
                        })
                    : undefined;
                const delayedMilestone = dValue ? dValue.join(';') : undefined;

                // seriousSymptoms
                const sCheck = r.properties.symptoms_check_other;
                const sValue =
                  sCheck && sCheck !== ''
                    ? sCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.symptomsMap[value] || value;
                        })
                    : undefined;
                const seriousSymptoms = sValue ? sValue.join(';') : undefined;

                // otherReferralReason
                const otCheck = r.properties.Other_Referral_Reasons;
                const otValue =
                  otCheck && otCheck !== ''
                    ? otCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.otherReferralMap[value] || value;
                        })
                    : undefined;
                const otherReferralReason = otValue ? otValue.join(';') : undefined;

                // homeBasedCareRendered
                const homeCheck = r.properties.Home_Based_Care_Provided;
                const homeValue =
                  homeCheck && homeCheck !== ''
                    ? homeCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.homeCareMap[value] || value;
                        })
                    : undefined;
                const homeBasedCareRendered = homeValue ? homeValue.join(';') : undefined;

                // ecdClinicalService
                const ecdCheck = r.properties.ECD_Clinical_Service;
                const ecdValue =
                  ecdCheck && ecdCheck !== ''
                    ? ecdCheck
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.ecdMap[value] || value;
                        })
                    : undefined;
                const ecdClinicalService = ecdValue ? ecdValue.join(';') : undefined;

                return {
                  'Person__r.CommCare_ID__c':
                    r.indices.parent.case_type === 'Person'
                      ? r.indices.parent.case_id
                      : r.indices.parent.case_type === 'Case'
                      ? state.ccId
                      : undefined,
                  Service_UID__c: r.case_id,
                  CommCare_Code__c: r.case_id,
                  RecordTypeID: '01224000000YAuK',
                  'Household_CHW__r.CommCare_ID__c': r.properties.CHW_ID,
                  Open_Case__c: r.closed === false ? true : false,
                  Case_Closed_Date__c: r.properties.date_closed,
                  Age_Time_of_Service__c: r.properties.age,
                  Source__c: r.properties.Source === '1',
                  Clinical_facility__c: r.properties.Facility_Visited
                    ? state.facilityMap[r.properties.Facility_Visited]
                    : undefined,
                  Client_Received_Services_at_Facility2__c: r.properties.Facility_Visit,
                  Clinical_Visit_Date__c:
                    r.properties.Facility_Date === '' ||
                    r.properties.Facility_Date === undefined
                      ? undefined
                      : r.properties.Facility_Date,
                  CHW_Followed_Up_with_the_Client__c: r['properties.Follow-Up']!== ''
                      ? r['properties.Follow-Up']
                      : undefined,
                  Follow_Up_Date__c: r['properties.Follow-Up_Date'],
               
                  Person_Complied_w_Referral_in_24_hrs__c:r.properties.referral_compliance,
                  Skillled_Delivery__c: r.properties.skilled_delivery,
                  Child_received_immunizations__c: r.properties.immunization,
                  Received_a_diagnosis_for_PSBI__c: r.properties.psbi_diagnosis !== ''
                      ? r.properties.psbi_diagnosis
                      : undefined, //Form: CHW.Follow-Up.PSBI.psbi_diagnosis
                  Received_antibiotics_per_protocol__c: r.properties.antibiotic_8days, //Form: CHW.Follow-Up.PSBI.antibiotic_8day
                  
                  Distributed_Treatment_on_Last_Visit__c:
                    r.properties.distribute_treatment, //Form: CHW.Follow-Up.distribute_treatment
                  Person_had_an_adverse_drug_reaction__c:
                    r.properties.adverse_drug_reaction,
                  Defaulted__c:
                    r.properties.date_of_default && r.properties.date_of_default !== ''
                      ? true
                      : false,
                  Date_of_Default__c: r.properties.date_of_default,
                  Client_s_Symptoms_Improved__c: r.properties.Client_Improved,
                  Case_Type__c: r.properties.Case_Type,
                  Follow_Up_By_Date__c:
                    r.properties['Follow-Up_By_Date'] &&
                    r.properties['Follow-Up_By_Date'] !== ''
                      ? r.properties['Follow-Up_By_Date']
                      : undefined,
                  Date__c: new Date(r.properties.date_opened).toISOString(),
                  Reason_for_Service__c: r.properties.Reason_for_Service,
                  Type_of_Service__c: r.properties.Type_of_Service,
                  Malaria_Status__c: r.properties.Malaria_Status,
                  Home_Treatment_Date__c: r.properties.home_treatment_date,
                  Malaria_Home_Test_Date__c: r.properties.malaria_test_date,
                  Home_ORS__c: r.properties.clinic_ors,
                  Home_Zinc__c: r.properties.clinic_zinc,
                  Height__c: r.properties.height,
                  Weight__c: r.properties.weight,
                  MUAC__c: r.properties.muac,
                  Nutrition_Status__c: r.properties.Nutrition_Status,
                  
                  //===== NEW MAPPINGS - JAN 14 ===========================//
                  Pregnancy_Danger_Signs__c: pregnancyDangerSigns,
                  Child_Danger_Signs__c: childDangerSigns,
                  Delayed_Milestone__c: delayedMilestone,
                  Serious_Symptoms__c: seriousSymptoms,
                  Other_Referral_Reasons__c: otherReferralReason,
                  Home_Based_Care_Rendered__c: homeBasedCareRendered,
                  PSBI_Visit__c:
                    r.properties.psbi_task && r.properties.psbi_task !== ''
                      ? `Day ${r.properties.psbi_task}`
                      : undefined,
                  Clinical_Services__c: r.properties.TT5_Clinical_Service
                    ? state.clinicalMap[r.properties.TT5_Clinical_Service]
                    : r.properties.TT5_Clinical_Service,
                  Referred_Facility__c: r.properties.referred_facility
                    ? state.facilityMap[r.properties.referred_facility]
                    : r.properties.referred_facility,
                  HAWI_Clinical_Services__c: r.properties.HAWI_Clinical_Service
                    ? state.serviceMap[r.properties.HAWI_Clinical_Service]
                    : r.properties.HAWI_Clinical_Service,
                  ECD_Clinical_Services__c: ecdClinicalService,
                  
                };
              });

            return { ...state, services };
          });
          /* JSON logging of records
          fn(state => {
            console.log('Services to upsert ::', JSON.stringify(state.services));
            return state;
          });
          */

          bulk(
            'Service__c',
            'upsert',
            {
              extIdField: 'Service_UID__c',
              failOnError: true,
              allowNoOp: true,
            },
            state => {
              console.log('Bulk upserting service...');
              return state.services;
            }
          );

    triggers:
      cron:
        type: cron
        cron_expression: '2 * * * *'
        enabled: false
    edges:
      cron->WF4-1-Bulk-get-Referral-Cases:
        source_trigger: cron
        target_job: WF4-1-Bulk-get-Referral-Cases
        condition_type: always
        enabled: true
      WF4-1-Bulk-get-Referral-Cases->WF4-2-Bulk-upsert-Services:
        source_job: WF4-1-Bulk-get-Referral-Cases
        target_job: WF4-2-Bulk-upsert-Services
        condition_type: on_job_success
        enabled: true
  "Create-Distribution-and-Referral-in-SF-[Q3-2022]":
    name: 'Create Distribution and Referral in SF [Q3 2022]'
    jobs:
      Q3-2022-Create-Distribution-and-Referral-in-SF:
        name: Q3 2022 Create Distribution and Referral in SF
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          //Job to integrate CommCare 'Distribution & Referrals' form
          upsert(
            'Family_Planning_community_Distribution__c',
            'Commcare_Case_ID__c',
            fields(
              field('Commcare_Case_ID__c', dataValue('id')),
              relationship('RecordType', 'Name', 'FP Community Distribution & Referrals'),
              field('Distribute_Date__c', dataValue('form.date')),
              field('Client_Name__c', dataValue('form.name')),
              field('Client_Gender__c', dataValue('form.gender')),
              field('Client_Age__c', dataValue('form.age')),
              field('Client_currently_on_FP__c', dataValue('form.current_use')),
              field('Referral_Date__c', dataValue('form.Referral_Date')),
              field('Referral_Method__c', state => {
                var method = dataValue('form.referral_method')(state);
                var newMethod = method
                  ? method
                      .split(/_/g)
                      .map(
                        word =>
                          `${word.substring(0, 1).toUpperCase()}${word.substring(1)}`
                      )
                      .join(' ')
                  : '';
                return newMethod;
              }),
              field('Implant_Type__c', state => {
                var type = dataValue('form.implant_type')(state);
                var newType = '';
                if (type) {
                  if (type === 'implanon') {
                    newType = '3-year Implanon';
                  } else {
                    newType = type === 'jadelle' ? '5-year Jadelle' : null;
                  }
                }
                return newType;
              }),
              field('Male_Condoms__c', dataValue('form.male_condoms_count')),
              field('Female_Condoms__c', dataValue('form.female_condoms_count')),
              field('POP__c', dataValue('form.POP_count')),
              field('COC__c', dataValue('form.COC_count')),
              field('Emergency_Pills__c', dataValue('form.emergency_pills_count')),
              field(
                'Pregnancy_test_positive__c',
                dataValue('form.positive_pregnancy_tests')
              ),
              field('Pregnancy_referrals__c', dataValue('form.pregnancy_referrals')),
              field(
                'Contraception_referrals__c',
                dataValue('form.family_planning_referrals')
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q3-2022-Create-Distribution-and-Referral-in-SF:
        source_trigger: webhook
        target_job: Q3-2022-Create-Distribution-and-Referral-in-SF
        condition_type: js_expression
        condition_label: 'CommCare Distribution & Referral form submitted'
        condition_expression: |
          state.data.form["@name"] == "Distribution and Referrals" && state.data.form["test_user"] != "Yes"
        enabled: true
  "Referrals-Upsert-Service-in-SF-V2--[Q3-2022]-(private)":
    name: 'Referrals Upsert Service in SF V2  [Q3 2022] (private)'
    jobs:
      Q3-2022-Referrals-Upsert-Service-in-SF-V2:
        name: Q3 2022 Referrals Upsert Service in SF V2
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          // NOTE: We perform a query before anything else if this is a 'Case'
          fn(state => {
            state.type = state.data.indices.parent.case_type;

            if (state.type === 'Case')
              return query(
                `SELECT Person__r.CommCare_ID__c FROM Service__c WHERE Service_UID__c = '${state.data.indices.parent.case_id}'`
              )(state).then(state => {
                const { records } = state.references[0];
                const ccId =
                  records.length == 1 ? records[0].Person__r.CommCare_ID__c : null;
                return { ...state, ccId };
              });

            return state;
          });

          // NOTE: We construct a facilityMap and populate some conditional relationships
          fn(state => {
            const facilityMap = {
              Lwala_Hospital: 'Lwala Hospital',
              Minyenya_Dispensary: 'Minyenya Dispensary',
              Ndege_Oriedo_Dispensary: 'Ndege Oriedo Dispensary',
              'Rongo_Sub-District_Hospital': 'Rongo Sub-District Hospital',
              Kangeso_Dispensary: 'Kangeso Dispensary',
              Ngodhe_Dispensary: 'Ngodhe Dispensary',
              Ngere_Dispensary: 'Ngere Dispensary',
              Verna_Health_Center: 'Verna Health Center',
              Kochola_Dispensary: 'Kochola Dispensary',
              Ongo_Health_Center: 'Ongo Health Center',
              Royal_Medical_Center: 'Royal Medical Center',
              Rosewood_Facility: 'Rosewood Facility',
              Other: 'Other',
            };

            const pregDangerMap = {
              Vaginal_Bleeding: 'Vaginal Bleeding',
              Water_Breaks: 'Water Breaks before Time of Delivery',
              Prolonged_Labour: 'Prolonged Labour over 12 Hours',
              Convulsions: 'Convulsions or Fits',
              Abdominal_Pain: 'Severe Abdominal Pain before Delivery',
              High_Fever: 'High Fever',
              Low_Baby_Movement: 'Feeling the Baby move less or not at all',
              Swelling: 'Swelling of Face and Hands',
              Severe_Headache: 'Severe or Continuous Headache for more than 12 hours',
              Severe_Vomiting: 'Severe or Continuous Vomiting',
              none: 'None',
            };

            const serviceMap = {
              Scheduled_PSC_Apt: 'Scheduled PSC Apt',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction/Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              TB: 'TB',
              Treatment_for_Other_OIs: 'Treatment for Other OIs',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care: 'Pregnancy Care (ANC)',
              Family_Planning: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              Other: 'Other',
            };

            const milestoneTypeMap = {
              cognitive_delays_learning_difficulties:
                'Cognitive Delays (Learning Difficulties)',
              motor_delays: 'Motor Delays',
              speech_and_language_delay: 'Speech and language Delay',
              social_and_emotional: 'Social and emotional',
            };

            const symptomsMap = {
              convulsions: 'Convulsions',
              not_able_to_eatdrink: 'Not able to eat/drink',
              vomits_everything: 'Vomits everything',
              'chest_in-drawing': 'Chest in-drawing',
              unusually_sleepyunconscious: 'Unusually sleepy/unconscious',
              swelling_of_both_feet: 'Swelling of both feet',
            };

            const childSignMap = {
              Poor_Breastfeeding: 'Poor Breastfeeding (under 6 months old child)',
              not_able_to_feed_since_birth_or_stopped_feeding_well:
                'Not able to feed since birth, or stopped feeding well',
              not_able_to_breastfeed: 'Not able to breastfeed',
              Fever: 'Fever (37.5 C or more)',
              very_low_temperature: 'Very low temperature (35.4 C or less)',
              shivering: 'Shivering',
              Fast_Breathing: 'Fast Breathing',
              Very_Sleepy: 'Very Sleepy',
              Convulsions_and_Fits: 'Convulsions and Fits',
              only_moves_when_stimulated_or_does_not_move_even_on_stimulation:
                'Only moves when stimulated, or does not move even on stimulation',
              yellow_solebaby_body_turning_yellow_especially_eyes_palms_soles:
                'Yellow sole(Baby body turning yellow especially eyes, palms, soles)',
              bleeding_from_the_umbilical_stump: 'Bleeding from the umbilical stump',
              signs_of_local_infection_umbilicus_is_red_or_draining_pus_skin_boils_or_eye:
                'Signs of local infection: umbilicus is red or draining pus, skin boils, or eyes draining pus',
              weight_chart_using_color_coded_scales_if_red_or_yellowweight_below_25kg_or_:
                'Weight chart using color coded scales if RED or YELLOW(Weight below 2.5kg or born less than 36 weeks of age)',
              unable_to_cry: 'Unable to cry',
              cyanosis: 'Cyanosis',
              bulging_fontanelle: 'Bulging fontanelle',
            };

            const otherReferralMap = {
              HIV_Testing_and_Counseling: 'HIV Testing and Counseling',
              Visit_to_Clinician: 'Visit to Clinician',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              PMTCT: 'PMTCT',
              TB: 'TB',
              Treatment_for_other_OIs: 'Treatment for other OIs',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care_ANCE: 'Pregnancy Care (ANC)',
              Family_Planning_FP: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              blood_in_stool: 'Blood in Stool',
              Blood_in_Stool: 'Blood in Stool',
              Immunization: 'Immunization',
              Routine_Health_Check_ups: 'Routine Health Check ups',
              routine_health_check_ups: 'Routine Health Check ups',
              Other: 'Other',
              Poor_Breastfeeding: 'Poor Breastfeeding (under 6 months old child)',
              not_able_to_feed_since_birth_or_stopped_feeding_well:
                'Not able to feed since birth, or stopped feeding well',
              not_able_to_breastfeed: 'Not able to breastfeed',
              Fever: 'Fever (37.5 C or more)',
              very_low_temperature: 'Very low temperature (35.4 C or less)',
              shivering: 'Shivering',
              Fast_Breathing: 'Fast Breathing',
              Very_Sleepy: 'Very Sleepy',
              Convulsions_and_Fits: 'Convulsions and Fits',
              only_moves_when_stimulated_or_does_not_move_even_on_stimulation:
                'Only moves when stimulated, or does not move even on stimulation',
              yellow_solebaby_body_turning_yellow_especially_eyes_palms_soles:
                'Yellow sole(Baby body turning yellow especially eyes, palms, soles)',
              bleeding_from_the_umbilical_stump: 'Bleeding from the umbilical stump',
              signs_of_local_infection_umbilicus_is_red_or_draining_pus_skin_boils_or_eye:
                'Signs of local infection: umbilicus is red or draining pus, skin boils, or eyes draining pus',
              weight_chart_using_color_coded_scales_if_red_or_yellowweight_below_25kg_or_:
                'Weight chart using color coded scales if RED or YELLOW(Weight below 2.5kg or born less than 36 weeks of age)',
              unable_to_cry: 'Unable to cry',
              cyanosis: 'Cyanosis',
              bulging_fontanelle: 'Bulging fontanelle',
            };

            const homeCareMap = {
              Adherence_Counseling: 'Adherence Counseling',
              Pill_Count_Monitoring: 'Pill Count Monitoring',
              Nutrition_Assessment_and_Counseling: 'Nutrition Assessment and Counseling',
              WASH_Counseling: 'WASH Counseling',
              Prevention_Counseling: 'Prevention Counseling',
              Psychosocial_Support: 'Psychosocial Support',
              Provision_of_Supplies: 'Provision of Supplies',
              OI_Management_Support: 'OI Management Support',
            };
            
            const ecdMap = {
              physiotherapy: 'Physiotherapy',
              speech_therapy: 'Speech Therapy',
              nutrition_education: 'Nutrition Education',
              play_therapy: 'Play Therapy',
              assessment: 'Assessment',
              counselling: 'Counselling',
              other: 'Other'
            };

            const clinicalMap = {
              diarrhea: 'Diarrhea',
              malnutrition: 'Malnutrition',
              malaria: 'Malaria',
              acute_respiratory_infection: 'Acute Respiratoy Infection (ARI)',
              accident_injury: 'Accident/Injury',
              other: 'Other',
            };

            let relationships = [];

            // If it's a person, add the person relationship
            if (state.type === 'Person') {
              relationships.push(
                relationship(
                  'Person__r',
                  'CommCare_ID__c',
                  state.data.indices.parent.case_id
                )
              );
            }

            // If it's a service, add the service rship AND a different person rship
            if (state.type === 'Case') {
              relationships.push(
                relationship(
                  'Parent_Service__r',
                  'Service_UID__c',
                  state.data.indices.parent.case_id
                )
              );
              relationships.push(relationship('Person__r', 'CommCare_ID__c', state.ccId));
            }

            return {
              ...state,
              facilityMap,
              relationships,
              serviceMap,
              pregDangerMap,
              milestoneTypeMap,
              symptomsMap,
              childSignMap,
              otherReferralMap,
              homeCareMap,
              clinicalMap,
              ecdMap
            };
          });

          // NOTE: We finally upsert to the Service__c object in Salesforce
          upsertIf(
              state.data.properties.owner_id !== '8e725928e3ce43d19b390dd604097069',
          'Service__c', 'Service_UID__c', state => ({
            ...fields(...state.relationships),
            ...fields(
              field('Service_UID__c', dataValue('case_id')),
              field('CommCare_Code__c', dataValue('case_id')),
              field('RecordTypeID', '01224000000YAuK'),
              //field('Household_CHW__c', 'a030Q000008XyXV'), //Sandbox MOTG test CHW
              // relationship( //ADD BACK BEFORE PROD DEPLOYMENT; removed for sandbox testing
              //   'Household_CHW__r',
              //   'CommCare_ID__c',
              //   dataValue('properties.CHW_ID')
              // ),
              field('Open_Case__c', state => {
                var status = dataValue('closed')(state);
                return status === false ? true : false;
              }),
              field('Case_Closed_Date__c',dataValue('date_closed')),
              field('Age_Time_of_Service__c', dataValue('properties.age')),
              field('Source__c', dataValue('properties.Source') === '1'),
              field('Clinical_facility__c', state => {
                var facility = dataValue('properties.Facility_Visited')(state);
                return facility ? state.facilityMap[facility] : undefined;
              }),
              field('Client_Received_Services_at_Facility2__c',dataValue('properties.Facility_Visit')),
              field('Clinical_Visit_Date__c', state => {
                var date = dataValue('properties.Facility_Date')(state);
                return date === '' || date === undefined ? undefined : date;
              }),
              field(
                'CHW_Followed_Up_with_the_Client__c',
                dataValue('properties.Follow-Up')
              ),
              field('Follow_Up_Date__c', dataValue('properties.Follow-Up_Date')),
              field(
                'Person_Complied_w_Referral_in_24_hrs__c',
                dataValue('properties.referral_compliance')
              ),
              field('Skillled_Delivery__c', dataValue('properties.skilled_delivery')),
              field(
                'Child_received_immunizations__c',
                dataValue('properties.immunization')
              ),
              field(
                'Received_a_diagnosis_for_PSBI__c',
                dataValue('properties.psbi_diagnosis') //CHW.Follow-Up.PSBI.psbi_diagnosis
              ),
              field(
                'Received_antibiotics_per_protocol__c',
                dataValue('properties.antibiotic_8days') //CHW.Follow-Up.PSBI.antibiotic_8day
              ),
              field(
                'Distributed_Treatment_on_Last_Visit__c',
                dataValue('properties.distribute_treatment') //CHW.Follow-Up.distribute_treatment
              ),
              field(
                'Person_had_an_adverse_drug_reaction__c',
                dataValue('properties.adverse_drug_reaction')
              ),
              field('Defaulted__c', state => {
                var date = dataValue('properties.date_of_default')(state);
                return date && date !== '' ? true : false;
              }),
              field('Date_of_Default__c', dataValue('properties.date_of_default')),
              field(
                'Client_s_Symptoms_Improved__c',
                dataValue('properties.Client_Improved')
              ),
              field('Case_Type__c', dataValue('properties.Case_Type')),
              field('Follow_Up_By_Date__c', state => {
                var date = dataValue('properties.Follow-Up_By_Date')(state);
                return date && date !== '' ? date : undefined;
              }),
              field('Date__c', state =>
                new Date(state.data.properties.date_opened).toISOString()
              ),
              field('Reason_for_Service__c', dataValue('properties.Reason_for_Service')),
              field('Type_of_Service__c', dataValue('properties.Type_of_Service')),
              field('Malaria_Status__c', dataValue('properties.Malaria_Status')),
              field(
                'Home_Treatment_Date__c',
                dataValue('properties.home_treatment_date')
              ),
              field(
                'Malaria_Home_Test_Date__c',
                dataValue('properties.malaria_test_date')
              ),
              field('Home_ORS__c', dataValue('properties.clinic_ors')),
              field('Home_Zinc__c', dataValue('properties.clinic_zinc')),
              field('Height__c', dataValue('properties.height')),
              field('Weight__c', dataValue('properties.weight')),
              field('MUAC__c', dataValue('properties.muac')),
              field('Nutrition_Status__c', dataValue('properties.Nutrition_Status')),
              //===== NEW MAPPINGS - JAN 14 ===========================//
              field('Pregnancy_Danger_Signs__c', state => {
                var check = dataValue('properties.pregnancy_danger_signs')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.pregDangerMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Child_Danger_Signs__c', state => {
                var check = dataValue('properties.Other_Danger_Signs')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.childSignMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Delayed_Milestone__c', state => {
                var check = dataValue('properties.which_delayed_milestone')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.milestoneTypeMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Serious_Symptoms__c', state => {
                var check = dataValue('properties.symptoms_check_other')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.symptomsMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Other_Referral_Reasons__c', state => {
                var check = dataValue('properties.Other_Referral_Reasons')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.otherReferralMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Home_Based_Care_Rendered__c', state => {
                var check = dataValue('properties.Home_Based_Care_Provided')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.homeCareMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('PSBI_Visit__c', state => {
                var number = dataValue('properties.psbi_task')(state);
                return number && number !== '' ? `Day ${number}` : undefined; //sample output: 'Day 3'
              }),
              field('Clinical_Services__c', state => {
                var check = dataValue('properties.TT5_Clinical_Service')(state);
                return check ? state.clinicalMap[check] : check;
              }),
              field('Referred_Facility__c', state => {
                var check = dataValue('properties.referred_facility')(state);
                return check ? state.facilityMap[check] : check;
              }),
              field('HAWI_Clinical_Services__c', state => {
                var check = dataValue('properties.HAWI_Clinical_Service')(state);
                return check ? state.serviceMap[check] : check;
              }),
              field('ECD_Clinical_Services__c', state => {
                var check = dataValue('properties.ECD_Clinical_Service')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.ecdMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              //=====================================//
            ),
          }));

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q3-2022-Referrals-Upsert-Service-in-SF-V2:
        source_trigger: webhook
        target_job: Q3-2022-Referrals-Upsert-Service-in-SF-V2
        condition_type: js_expression
        condition_label: '"Case" task update '
        condition_expression: |
          state.data.properties["case_type"] == "Case" && state.data.properties["test_user"] != "Yes"
        enabled: true
  "Update-HH-Name-in-CommCare-[Q3-2022]":
    name: 'Update HH Name in CommCare [Q3 2022]'
    jobs:
      Q3-2022-Update-HH-Name-in-CommCare:
        name: Q3 2022 Update HH Name in CommCare
        adaptor: '@openfn/language-commcare@1.4.1'
        credential: null
        body: |
          // Update CommCare case
          fn(state => {
            const { Notification } = state.data.Envelope.Body.notifications;

            const Notifications = Array.isArray(Notification)
              ? Notification
              : [Notification];

            const notifications = Notifications.map(notification => {
              console.log(
                `Mapping HH code to CommCare: `,
                notification.sObject.Household_Code_Autonumber__c
              );
              return {
                case_id: notification.sObject.Commcare_Code__c,
                name: notification.sObject.Household_Code_Autonumber__c,
              };
            });

            return { ...state, notifications };
          });

          submitXls(state => state.notifications, {
            case_type: 'Household',
            search_field: 'case_id',
            search_column: 'case_id',
            name_column: 'name',
            create_new_cases: 'off',
          });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q3-2022-Update-HH-Name-in-CommCare:
        source_trigger: webhook
        target_job: Q3-2022-Update-HH-Name-in-CommCare
        condition_type: js_expression
        condition_label: SF HH Code Updated
        condition_expression: |
          state.data.Envelope.Body.notifications.ActionId == "04k24000000GsEhAAK"
        enabled: true
  "Upsert-Person-Visit-[Q3-2022]":
    name: 'Upsert Person Visit [Q3 2022]'
    jobs:
      Q3-2022-Upsert-Person-Visit:
        name: Q3 2022 Upsert Person Visit
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          //UPSERT PERSON VISIT
            query(
            `SELECT Id, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c FROM Location__c WHERE CommCare_User_ID__c = '${dataValue(
              'properties.owner_id'
            )(state)}'`
          );

          fn(state => {
            state.cleanChoice = function (state, choice) {
              if (choice) {
                return choice.charAt(0).toUpperCase() + choice.slice(1).replace('_', ' ');
              } else {
                return '';
              }
            };

          fn(state => ({
            ...state,
            data: {
              ...state.data,
              catchmentNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? (state.references[0].records[0].Parent_Geographic_Area__r 
                    ? state.references[0].records[0].Parent_Geographic_Area__r.Parent_Geographic_Area__c
                    : undefined)
                  : undefined,
            },
          }));

            state.handleMultiSelect = function (state, multiField) {
              return multiField
                ? multiField
                    .replace(/ /gi, ';')
                    .toLowerCase()
                    .split(';')
                    .map(value => {
                      return (
                        value.charAt(0).toUpperCase() + value.slice(1).replace('_', ' ')
                      );
                    })
                    .join(';')
                : '';
            };

            state.handleMultiSelectOriginal = function (state, multiField) {
              return multiField
                ? multiField
                    .replace(/ /gi, ';')
                    .toLowerCase()
                    .split(';')
                    .map(value => {
                      return (
                        value
                      );
                    })
                    .join(';')
                : '';
            };

            const pregDangerMap = {
              Vaginal_Bleeding: 'Vaginal Bleeding',
              Water_Breaks: 'Water Breaks before Time of Delivery',
              Prolonged_Labour: 'Prolonged Labour over 12 Hours',
              Convulsions: 'Convulsions or Fits',
              Abdominal_Pain: 'Severe Abdominal Pain before Delivery',
              High_Fever: 'High Fever',
              Low_Baby_Movement: 'Feeling the Baby move less or not at all',
              Swelling: 'Swelling of Face and Hands',
              Severe_Headache: 'Severe or Continuous Headache for more than 12 hours',
              Severe_Vomiting: 'Severe or Continuous Vomiting',
              none: 'None',
            };

            const counselMap = {
              anc_visits: 'ANC Visits',
              early_initiation_of_anc_less_than_3_months:
                'Early initiation of ANC (less than 3 months)',
              completing_recomended_anc_visits: 'Completing recomended ANC visits',
              danger_signs: 'Danger signs',
              skilled_birth: 'Skilled birth',
              immunization: 'Immunization',
              individual_birth_plan: 'Individual Birth Plan',
              emergency_preparedness: 'Emergency preparedness',
              childcare_and_affection: 'Childcare and affection',
              nutrition_counseling: 'Nutrition counseling',
              growth_monitoring: 'Growth monitoring',
              exclusive_breastfeeding: 'Exclusive breastfeeding',
              complementary_feeding: 'Complementary feeding',
              sleeping_under_llitn: 'Sleeping under LLITN',
              knowing_hiv_status: 'Knowing HIV status',
              indoor_pollution: 'Indoor pollution',
              personal_hygiene: 'Personal Hygiene',
              safe_drinking_water: 'Safe drinking water',
              safe_disposal_of_human_waste: 'Safe disposal of human waste',
            };

            const serviceMap = {
              Scheduled_PSC_Apt: 'Scheduled PSC Apt',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction/Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              TB: 'TB',
              Treatment_for_Other_OIs: 'Treatment for other Ols',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care: 'Pregnancy Care (ANC)',
              Family_Planning: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              Other: 'Other',
            };

            const reasonMap = {
              lack_of_access_to_fp_information: 'Lack of access to FP information',
              no_access_to_fp_services_hospitals:
                'Lack of hospitals or places where FP services can be accessed',
              not_willing_to_use_fp_due_to_negative_effects_myths_and_misconceptions:
                'Myths and misconceptions',
              barriers_at_service_delivery_points: 'Barriers at service delivery points',
              pregnant: 'The client is pregnant',
              intentions_of_getting_pregnant: 'Intentions of getting pregnant',
              not_sexually_active: 'The client is not sexually active',
              other_barriers_culture_male_partners_parents_etc:
                'Other barriers (culture, male partners, parents, etc)',
            };

            const milestoneTypeMap = {
              cognitive_delays_learning_difficulties:
                'Cognitive Delays Learning Difficulties',
              motor_delays: 'Motor Delays',
              speech_and_language_delay: 'Delay Speech and Language Delay',
              social_and_emotional: 'Social and emotional',
            };

            const milestoneMap = {
              movement: 'Movement',
              hearing: 'Hearing',
              communication: 'Communication',
              seeing: 'Seeing',
              cognitive_delays: 'Cognitive Delays',
              play: 'Play',
            };
            const nutritionMap = {
              severe: 'Severely Malnourished',
              moderate: 'Moderately Malnourished',
              normal: 'Normal',
            };
            
            const fpMethodMap = {
              male_condoms: "Male condoms",
              female_condoms: "Female condoms",
              pop: "POP",
              coc: "COC",
              emergency_pills: "Emergency pills",
              none: "None",
              //HMN -12/01/2023- 
              //adding normalization for the family_planning_method to Family_Planning_Method__c
              iucd: "IUCD",
              condoms: "Condoms",
              depo:"Depo",
              implant: "Implant",
              injection: "Injection",
              pills: "Pills",
              traditional: "Traditional"
            };

            const symptomsMap = {
              convulsions: 'Convulsions',
              not_able_to_eatdrink: 'Not able to drink or feed at all',
              vomits_everything: 'Vomits everything',
              'chest_in-drawing': 'Chest in - drawing',
              unusually_sleepyunconscious: 'Unusually sleepy or unconscious',
              swelling_of_both_feet: 'Swelling of both feet',
              none: "None",
            };

            const supervisorMap ={
              community_health_nurse: "Community_health_nurse",
              chw_supervisor: "CHW_supervisor",
              chewschas: "Chewschas",
              other: "Other",
              none: "None"
            };
            
            const treatmentDistributionMap = {
              ors_205gltr_sachets: 'ORS (20.5h/ltr): Sachets',
              acts_6s: 'ACTs (6s)',
              acts_12s: 'ACTs (12s)',
              acts_18s: 'ACTs (18s)',
              acts_24s: 'ACTs (24s)',
              albendazole_abz_tabs: 'Albendazole (ABZ): Tabs',
              paracetamol_tabs: 'Tetracycline Eye Ointment (TEO): 1%:tube',
              tetracycline_eye_ointment_teo_1_tube: 'Tetracycline Eye Ointment (TEO): 1%:tube',
              amoxycillin: 'Amoxycillin (125mg/5mls: Bottle',
              none: 'None'
          };

          const childDangerSignsMap = {
              none: 'None',
              Poor_Breastfeeding: 'Poor Breastfeeding',
              not_able_to_feed_since_birth_or_stopped_feeding_well: 'Not able to feed since birth, or stopped feeding well',
              not_able_to_breastfeed: 'Not able to breastfeed',
              Fever: 'Fever',
              very_low_temperature: 'Very low temperature (35.4 C or less)',
              shivering: 'Shivering',
              Fast_Breathing: 'Fast Breathing',
              Very_Sleepy: 'Very Sleepy',
              Convulsions_and_Fits: 'Convulsions and Fits',
              only_moves_when_stimulated_or_does_not_move_even_on_stimulation: 'Only moves when stimulated, or does not move even on stimulation',
              yellow_solebaby_body_turning_yellow_especially_eyes_palms_soles: 'Yellow sole(Baby body turning yellow especially eyes, palms,soles)',
              bleeding_from_the_umbilical_stump: 'Bleeding from the umbilical stump',
              signs_of_local_infection_umbilicus_is_red_or_draining_pus_skin_boils_or_eye: 'Signs of local infection: umbilicus is red or draining pus, skin boils, or eyes draining pus',
              weight_chart_using_color_coded_scales_if_red_or_yellowweight_below_25kg_or_: 'Weight chart using color coded scales if RED or YELLOW(Weight below 2.5kg or born less than 36 weeks of age)',
              unable_to_cry: 'Unable to cry',
              cyanosis: 'Cyanosis',
              bulging_fontanelle: 'Bulging fontanelle'
          }

            return {
              ...state,
              counselMap,
              serviceMap,
              reasonMap,
              milestoneTypeMap,
              milestoneMap,
              nutritionMap,
              pregDangerMap,
              fpMethodMap,
              symptomsMap,
              supervisorMap,
              treatmentDistributionMap,
              childDangerSignsMap
            };
          });

          upsertIf(
            // state.data.properties.username !== 'openfn.test' &&
              state.data.properties.username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' ,
            'Person_visit__c',
            'CommCare_ID__c',
            fields(
              //field('CommCare_ID__c', dataValue('form.case.@case_id')),
              // field('CommCare_ID__c', dataValue('id')),
              //field('CommCare_ID__c', state => {
              //  var case_id = dataValue('case_id')(state);
              //  var submitted = dataValue('properties.last_form_opened_date_and_time')(state);
              //  return case_id + '_' +  submitted;
              //}),
              field('CommCare_ID__c',dataValue('case_id')),

              relationship(
                'Person__r',
                'CommCare_ID__c',
                dataValue('indices.parent.case_id')
              ),
              /*relationship(
                'Household_CHW__r', 
                'CommCare_ID__c', 
                dataValue('properties.sfid')),*/
              // field('CommCare_Visit_ID__c',dataValue('metadata.instanceID')),
               field('CommCare_Visit_ID__c', state => {
                var case_id = dataValue('case_id')(state);
                var submitted = dataValue('properties.last_form_opened_date_and_time')(state);
                return case_id + '_' +  submitted;
              }),
              field('Date__c',dataValue('properties.Date')),
              field('Form_Submitted__c', dataValue('properties.last_form_opened_name')),
              field('Birth_Status__c',dataValue('properties.child_status')),
              field('Catchment__c', dataValue('catchmentNewId')),
              /*
              //HMN 05/01/2022 Caused alot of failures, removed this RecordType Field
              relationship('RecordType', 'Name', state => {
                    var rt = dataValue('properties.RecordType')(state);
                    if (rt === 'Unborn' || rt === 'Child') {
                      return 'Child Visit';
                    };
                    if (rt === 'Youth') {
                      return 'Youth Visit';
                    };
                    if (rt === 'Male Adult') {
                      return 'Adult Male Visit';
                    };
                    if (rt === 'Female Adult') {
                      return 'Adult Female Visit';
                    };
                  }),*/
              field('Use_mosquito_net__c', state => {
                var choice = dataValue(
                  'properties.sleep_under_net'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field(
                'Individual_birth_plan_counselling__c',
                dataValue('properties.individual_birth_plan')
              ),
              field('Reason_for_not_taking_a_pregnancy_test__c', state => {
                var reason = dataValue('properties.No_Preg_Test')(state);
                return reason ? reason.toString().replace(/_/g, ' ') : undefined;
              }),
              field('Pregnancy_danger_signs__c', state => {
                var signs = dataValue(
                  'properties.No_Preg_Test'
                )(state);
                return signs ? state.pregDangerMap[signs] : undefined;
              }),
              field('Child_Danger_Signs__c', state => {
                var signs = dataValue(
                  'properties.Other_Danger_Signs'
                )(state);
                return signs ? state.childDangerSignsMap[signs] : undefined
              }),
               field('Current_Malaria_Status__c', state => {
                var choice = dataValue(
                  'properties.malaria_test_results'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Malaria_Home_Test__c', dataValue('properties.malaria_test_date')),
              /*field('Current_Malaria_Status__c', state => {
                var choice = dataValue(
                  'properties.Malaria_Status'
                )(state);
                return state.cleanChoice(state, choice);
              }),*/
              // field('Malaria_Home_Treatment__c',dataValue('form.treatment_and_tracking.home_treatment')),
              field('Malaria_Home_Treatment__c', dataValue('properties.malaria_test_date')),
              field('Persons_symptoms__c', state => {
                var check = dataValue('properties.symptoms_check_other')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.symptomsMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Active_in_Support_Group__c', dataValue('properties.Active_in_Support_Group')),
              field('HAWI_Defaulter__c', state => {
                var hawi = dataValue('properties.default')(state);
                return hawi === 'Yes' ? true : false;
              }),
              field(
                'Date_of_Default__c',
                dataValue('properties.date_of_default')
              ),
              field(
                'Persons_temperature__c',
                dataValue('properties.temperature')
              ),
              field(
                'Days_since_illness_start__c',
                dataValue('properties.duration_of_sickness')
              ),
              field(
                'Newborn_visited_48_hours_of_delivery__c',
                dataValue(
                  'properties.newborn_visited_48_hours_of_delivery'
                )
              ),
              field(
                'Newborn_visited_by_a_CHW_within_6_days__c',
                dataValue('properties.visit_6_days_from_delivery')
              ),
              field(
                'Current_Malaria_Status__c',
                dataValue('properties.malaria_test_results')
              ),
              field('Malaria_test__c', state => {
                var choice = dataValue(
                  'properties.malaria_test'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Fever__c', state => {
                var choice = dataValue(
                  'properties.symptoms_check_fever'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Cough__c', state => {
                var choice = dataValue(
                  'properties.symptoms_check_cough'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Diarrhoea__c', state => {
                var choice = dataValue(
                 'properties.symptoms_check_diarrhea'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field(
                'TB_patients_therapy_observed__c',
                dataValue('properties.observed_tb_therapy')
              ),
              field(
                'Injuries_or_wounds__c',
                dataValue('properties.wounds_or_injuries')
              ),
              field('Currently_on_ART_s__c', dataValue('properties.ART')),
              /*field('ART_Regimen__c', state => {
                var choice = dataValue(
                 'properties.ARVs'
                )(state);
                return state.cleanChoice(state, choice);
              }),*/
              field(
                'Immediate_Breastfeeding__c',
                dataValue(
                  'properties.Breastfeeding_Delivery'
                )
              ),
              field(
                'Exclusive_Breastfeeding__c',
                dataValue(
                  'properties.Exclusive_Breastfeeding'
                )
              ),
              field(
                'Counselled_on_Exclusive_Breastfeeding__c',
                dataValue('properties.counseling')
              ),
              field('LMP__c',dataValue('properties.when_was_your_lmp')),
               field('Family_Planning__c', state => {
                var choice = dataValue(
                  'properties.family_planning'
                )(state);
                return state.cleanChoice(state, choice);
              }),
                  //HMN 12/01/2023 Failures on picklist within Salesforce
              /*
              field(
                'Family_Planning_Method__c',
                dataValue('properties.family_planning_method')
              ),*/
              field('Family_Planning_Method__c', state => {
                  //var status = dataValue('form.treatment_and_tracking.distribution.distributed_treatments')(state);
                  var status = dataValue('properties.family_planning_method')(state);
                  var value =
                  status && status !== ''
                    ? status
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                            return state.fpMethodMap[value] || value;
                        })
                      : undefined;
                    return value ? value.join(';') : undefined;
                  }),
               field('FP_Method_Distributed__c', state => {
                    //var status = dataValue('form.treatment_and_tracking.distribution.distributed_treatments')(state);
                    var status = dataValue('properties.FP_commodity')(state);
                    var value =
                      status && status !== ''
                        ? status
                            .replace(/ /gi, ';')
                            .split(';')
                            .map(value => {
                              return state.fpMethodMap[value] || value;
                            })
                        : undefined;
                    return value ? value.join(';') : undefined;
                  }),
              field('Reasons_for_not_taking_FP_method__c', state => {
                // var reason = dataValue('form.TT5.Mother_Information.No_FPmethod_reason')(state);
                // return reason ? state.reasonMap[reason] : undefined;
                var status = dataValue('properties.No_FPmethod_reason')(state);
                    var value =
                      status && status !== ''
                        ? status
                            .replace(/ /gi, ';')
                            .split(';')
                            .map(value => {
                              return state.reasonMap[value] || value;
                            })
                        : undefined;
                    return value ? value.join(';') : undefined;
              }),
              field('Pregnant__c', state => {
                var preg = dataValue('properties.Pregnant')(state);
                return preg === 'Yes' ? true : false;
              }),
              field('Counselled_on_FP_Methods__c', state => {
                var choice = dataValue(
                 'properties.CounselledFP_methods'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Client_counselled_on__c', state => {
                var choices =
                  dataValue('properties.counsel_topic')(
                    state
                  ) || dataValue('properties.counsel_topic')(state);
                var choiceGroups = choices ? choices.split(' ') : null;
                var choicesMulti = choiceGroups
                  ? choiceGroups
                      .map(cg => {
                        return state.counselMap[cg];
                      })
                      .join(';')
                  : choiceGroups;
                return choicesMulti;
              }),
              field('Client_provided_with_FP__c', state => {
                var choice = dataValue(
                  'properties.was_the_woman_15-49yrs_provided_with_family_planning_commodities_by_chv'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field(
                'Newborn_visited_48_hours_of_delivery__c',
                dataValue(
                  'properties.newborn_visited_48_hours_of_delivery'
                )
              ),
              field('Mother_visit_counselling__c', state => {
                var choice = dataValue(
                  'properties.did_you_consel_the_mother_on1'
                )(state);
                return state.handleMultiSelectOriginal(state, choice);
              }),
              field(
                'mother_visited_48_hours_of_the_delivery__c',
                dataValue('properties.visit_mother_48')
              ),
              field('Newborn_visit_counselling__c', state => {
                var choice = dataValue(
                  'properties.did_you_consel_the_mother_on2'
                )(state);
                return state.handleMultiSelectOriginal(state, choice);
              }),
              field('Know_HIV_status__c', state => {
                var choice = dataValue(
                  'properties.known_hiv_status'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('HIV_Status__c', dataValue('properties.hiv_status')),
              field('Treatment_Distribution__c', state => {
                    //var status = dataValue('form.treatment_and_tracking.distribution.distributed_treatments')(state);
                    var status = dataValue('properties.distributed_treatments')(state);
                    var value =
                      status && status !== ''
                        ? status
                            .replace(/ /gi, ';')
                            .split(';')
                            .map(value => {
                              return state.treatmentDistributionMap[value] || value;
                            })
                        : undefined;
                    return value ? value.join(';') : undefined;
                  }),
              field(
                'Current_Weight__c',
                dataValue('properties.Current_Weight')
              ),
              field(
                'Current_Height__c',
                dataValue('properties.current_height')
              ),
              field(
                'Current_MUAC__c',
                dataValue('properties.MUAC')
              ),
              field('Food_groups_3_times_a_day__c',dataValue('properties.food_groups')),
              field('Nutrition_Case_Managed__c',dataValue('properties.nutrition_case_managed')),
              field('Nutrition_Danger_Signs__c',state => {
                var choice = dataValue(
                  'properties.nutrition_danger_signs'
                  )(state);
                  return state.handleMultiSelectOriginal(state, choice);
                  
              }),
            field('Why_was_nutrition_case_not_managed__c',dataValue('properties.nutrition_case_not_managed_why')),
            field('Community_Nutrition_Treatment__c',dataValue('properties.nutrition_treatment_severe')),
            field('Community_Nutrition_Treatment__c',dataValue('properties.nutrition_treatment_moderate')),
            field('Why_was_nutrition_treatment_not_given__c',dataValue('properties.nutrition_treatment_not_given')),
              field('Current_Nutrition_Status__c', state => {
                var status = dataValue(
                  'properties.Nutrition_Status'
                )(state);
                return status ? state.nutritionMap[status] : undefined;
              }),
              field('Default_on_TB_treatment__c', state => {
                var choice = dataValue(
                 'properties.default_tb_treatment'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Received_pregnancy_test__c', state => {
                var choice = dataValue(
                  'properties.did_you_adminsiter_a_pregnancy_test'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Pregnancy_test_result__c', state => {
                var choice = dataValue(
                  'properties.pregnancy_test_result'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Chronic_illness__c', state => {
                var choice = dataValue(
                  'properties.please_specify_which_chronic_illness_the_person_has'
                )(state);
                var choice2 = state.handleMultiSelect(state, choice);
                return choice2 ? choice2.replace(/_/g, ' ') : '';
              }),
              /*field(
                    'Birth_Certificate__c',
                    dataValue('form.Status.birth_certificate')
                  ),
                  field(
                    'Child_zinc__c',
                    dataValue(
                      'form.TT5.Child_Information.Clinical_Services.diarrhea_clinic_treatment_zinc'
                    )
                  ),
                  field(
                    'Child_ORS__c',
                    dataValue(
                      'form.TT5.Child_Information.Clinical_Services.diarrhea_clinic_treatment_ORS'
                    )
                  ),*/
              field(
                'Childs_breath_per_minute__c',
                dataValue('properties.breaths_per_minuite')
              ),
              field(
                'Child_chest_in_drawing__c',
                dataValue('properties.Child_chest_in_drawing_c')
              ),
              field(
                'Caregiver_counseled_on_delayed_milestone__c',
                dataValue(
                  'properties.did_you_counsel_the_caregiver_on_delayed_milestones'
                )
              ),
              field(
                'Delayed_Milestone__c',
                dataValue(
                   'properties.does_the_child_has_a_delayed_milestone'
                )
              ),
              field(
                'Child_has_2_or_more_play_items__c',
                dataValue(
                   'properties.does_the_child_has_2_or_more_play_items_at_home'
                )
              ),
              field(
                'Child_has_3_more_picture_books__c',
                dataValue(
                  'properties.does_the_child_has_3_or_more_picture_books'
                )
              ),
              field('Delayed_Milestones_Counselled_On__c', state => {
                var ms = dataValue(
                  'properties.which_delayed_milestone_area_did_you_counsel_the_caregiver_on'
                )(state);
                return ms ? state.milestoneMap[ms] : undefined;
              }),
              field('Delayed_Milestone_Type__c', state => {
                var ms = dataValue('properties.which_delayed_milestone')(
                  state
                );
                return ms ? state.milestoneTypeMap[ms] : undefined;
              }),
              field(
                'Caretaker_trained_in_muac__c',
                dataValue('properties.mother_trained_muac')
              ),
              field(
                'Caretaker_screened_for_muac_this__c',
                dataValue(
                 'properties.mother_screened_child_muac'
                )
              ),
              field(
                'Caretaker_muac_findings__c',
                dataValue(
                  'properties.mother_screened_child_muac_result'
                )
              ),
              field(
                'Caretaker_action_after_muac_screening__c',
                dataValue(
                  'properties.mother_screened_muac_action'
                )
              ),
              field(
                'of_Caretaker_MUAC_screenings__c',
                dataValue('properties.mother_nb_screening')
              ),
              field('Pulse_Oximeter__c', dataValue('properties.pulse_oximeter_available')),
              field(
                'Heart_Rate_Pulse_Oximeter__c',
                dataValue('properties.heart_rate_pulse_oximeter')
              ),
              field(
                'Oxygen_Concentration_Pulse_Oximeter__c',
                dataValue('properties.oxygen_concentration')
              ),
              field('Can_child_drink__c', dataValue('properties.can_child_drink')),
              field(
                'Antibiotic_provided_for_fast_breathing__c',
                dataValue('properties.antibiotic_fast_breathing')
              ),
              field(
                'Antibiotic_provided_for_chest_indrawing__c',
                dataValue('properties.antibiotic_chest_indrawing')
              ),
              field('Supervisor_Visit__c', state => {
                var check = dataValue('properties.supervisor_visit')(state);
                var value =
                  check && check !== ''
                    ? check
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.supervisorMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              /*
              //HMN- 05012023 - Removed field('Visit_Closed_Date__c', dataValue('date_closed')),
              //Because I could not find it in Salesforce. It was causing errors on staging
              field('Visit_Closed_Date__c', dataValue('date_closed')),
              */
              //field('Case_Closed_Date__c', state => {
              //  var closed = dataValue('date_closed')(state);
              //  var date = dataValue('date_modified')(state);
              //  return closed && closed == true ? date : undefined;
             // })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q3-2022-Upsert-Person-Visit:
        source_trigger: webhook
        target_job: Q3-2022-Upsert-Person-Visit
        condition_type: js_expression
        condition_label: Person Visit
        condition_expression: |
          state.data.properties["app_release"] == "Q2-2022" && state.data.properties["case_type"] == "visite" && state.data.properties["test_user"] != "Yes"
        enabled: true
  "Upsert-Supervision---Accompaniment-[Q4-2022]":
    name: 'Upsert Supervision - Accompaniment [Q4 2022]'
    jobs:
      Q4-2022-Upsert-Supervision---Accompaniment:
        name: Q4 2022 Upsert Supervision - Accompaniment
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          //Job to integrate CommCare 'Accompaniement' form from the Supervision App
          fn(state => {
          state.handleMultiSelect = function (state, multiField) {
              return multiField
                ? multiField
                    .replace(/ /g, ';')
                : '';
            };
            
              state.cleanChoice = function (state, choice) {
              if (choice) {
                return choice.charAt(0).toUpperCase() + choice.slice(1).replace('_', ' ');
              } else {
                return '';
              }
            }

             return {
              ...state
            };
            
          });


          upsert(
            'Supervision_Forms__c',
            'CommCare_Form_ID__c',
            fields(
              field('CommCare_Form_ID__c', dataValue('id')),
              relationship('RecordType', 'Name', 'Accompanient Form'),
              field('Supervisor_Name__c', dataValue('form.prologue.supervisor_sfid')),
              field('CHW_Name__c', dataValue('form.prologue.chw_sfid')),
                relationship(
                'Village__r',
                'CommCare_User_ID__c',
                dataValue('form.prologue.chw_village')
              ),
              field('Form_Date__c',dataValue('form.Date')),
              field('Fertile_Women_in_Household__c',dataValue('form.WRA_check')),
              field('CHW_Asked_About_Family_Planning__c',dataValue('form.women_of_reproductive_age.fp_check')),
              field('Contraception_Distributed__c', state => {
                var choice = dataValue(
                  'form.women_of_reproductive_age.fp_resources_check'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
              
              
              field('Household_members_aware_of_CHW_SRH__c',dataValue('form.women_of_reproductive_age.srh_awareness_check')),
              field('Pregnant_Women_in_HH__c',dataValue('form.pregnancy_check')),
              field('CHW_Asked_About_ANC_Visits__c',dataValue('form.pregnant_women.anc_check')),
              field('CHW_Counseled_On_Value_of_ANC_Visits__c',dataValue('form.pregnant_women.anc_counsel_check')),
              field('CHW_Read_Each_Pregnancy_Danger_Sign__c',dataValue('form.pregnant_women.danger_sign_check')),
              field('Household_aware_of_CHW_MCH_Services__c',dataValue('form.pregnant_women.pregnancy_support_awareness_check')),
              field('Pregnant_Woman_Delivered__c',dataValue('form.pregnant_women.delivery_check')),
              field('Used_MCH_Booklet__c',dataValue('form.delivery.vaccination_check')),
              field('Counsel_on_vaccination_schedule__c',dataValue('form.delivery.vaccination_counsel_check')),
              field('Counselled_on_Exclusive_Breastfeeding__c',dataValue('form.delivery.ebf_check')),
              field('Children_Under_5_in_Household__c',dataValue('form.cu5_check')),
              field('All_children_under_5_registered__c',dataValue('form.children_under_5.cu5_enrollment_check')),
              field('MUAC_taken_for_all_children__c',dataValue('form.children_under_5.muac_check')),
              field('Measured_MUAC_circumference_properly__c',dataValue('form.children_under_5.muac_method_check')),
              //     field('Measured_MUAC_circumference_properly__c', state => {
              //   var choice = dataValue(
              //     'form.children_under_5.muac_method_check'
              //   )(state);
              //   return state.cleanChoice(state, choice);
              // }),
              field('HIV_Members_in_the_Household__c',dataValue('form.hiv_check')),
              field('Recorded_HIV_Status_Information__c',dataValue('form.hiv_clients.hiv_info_check')),
              field('Counselled_on_ART_Adherence_HIV_Services__c',dataValue('form.hiv_clients.hiv_counsel_check')),
              field('Sick_Household_Members_at_Visit__c',dataValue('form.illness_check')),
              field('Household_member_reported_fever__c',dataValue('form.illness_referrals.fever_check')),
              field('Conducted_malaria_home_test__c', dataValue('form.illness_referrals.malaria_test_check')),
              field('Malaria_test_protocol_followed__c',dataValue('form.illness_referrals.malaria_test_method_check')),
              field('Sick_person_referred__c',dataValue('form.illness_referrals.referral_accompaniment_check')),
              field('Referral_discussed_with_family__c',dataValue('form.illness_referrals.referral_followup_check')),
              field('Distributed_treatments_medications__c',dataValue('form.distribution_check')),
              field('Stock_is_full__c',dataValue('form.stocks_check')),
              field('Missing_Stock__c', state => {
                var choice = dataValue(
                  'form.missing_stocks_details'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
              field('Other_Missing_Stock__c',dataValue('form.missing_stocks_details_other')),
              field('Demonstrated_active_listening__c',dataValue('form.chw_behavior.active_listening_check')),
              field('Acted_with_respect_courtesy__c',dataValue('form.chw_behavior.respect_check')),
              field('CHW_Rating__c',dataValue('form.chw_behavior.interview_technique_check')),
              field('Tablet_used__c',dataValue('form.chw_behavior.tablet_use_check')),
              field('Tablet_used_effectively__c',dataValue('form.chw_behavior.tablet_competency_check')),
              field('Tablet_problem_observed__c', state => {
                var choice = dataValue(
                  'form.chw_behavior.tablet_issues'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
              field('Visit_Length_Mins__c',dataValue('form.visit_length')),
              field('Accompanient_components_covered__c', state => {
                  var choice = dataValue(
                    'form.feedback_type'
                     )(state);
                return state.handleMultiSelect(state, choice);
              }), 
              field('Other_comments__c',dataValue('form.supervisor_comments')),
                  field('Contraception_Distributed__c', state => {
                var choice = dataValue(
                  'form.women_of_reproductive_age.fp_resources_check'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
               )
          );  

          upsertIf(
            state.data.form.prologue.hh_code !== '' &&
            state.data.form.prologue.hh_code !== null,
            'Supervision_Forms__c',
            'CommCare_Form_ID__c',
            relationship('Household_Code__r', 
              'Name',
              dataValue('form.prologue.hh_code')
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q4-2022-Upsert-Supervision---Accompaniment:
        source_trigger: webhook
        target_job: Q4-2022-Upsert-Supervision---Accompaniment
        condition_type: js_expression
        condition_label: Supervision - Accompaniment - Form
        condition_expression: |
          state.data.form["@name"] == "Accompaniment Form" && state.data.properties["test_user"] != "Yes"
        enabled: true
  "Upsert-Supervision---Feedback-[Q4-2022]":
    name: 'Upsert Supervision - Feedback [Q4 2022]'
    jobs:
      Q4-2022-Upsert-Supervision---Feedback:
        name: Q4 2022 Upsert Supervision - Feedback
        adaptor: '@openfn/language-salesforce@latest'
        credential: null
        body: |
          //Job to integrate CommCare 'Feedback' form from the Supervision App

          upsert(
            'Supervision_Forms__c',
            'CommCare_Form_ID__c',
            fields(
            field('CommCare_Form_ID__c', dataValue('id')),
              relationship('RecordType', 'Name', 'Feedback Form'),
              field('Supervisor_Name__c', dataValue('form.prologue.supervisor_sfid')),
              field('CHW_Name__c', dataValue('form.prologue.chw_sfid')),
                relationship(
                'Village__r',
                'CommCare_User_ID__c',
                dataValue('form.prologue.chw_village')
              ),
              relationship('Catchment__r', 
              'Name',
              dataValue('form.prologue.catchment')
              ),
              field('Form_Date__c',dataValue('form.Date')),
              field('Strengths__c', dataValue('form.chw_perspectives_and_reflections.chw_strengths')),
              field('Weaknesses__c', dataValue('form.chw_perspectives_and_reflections.chw_improvement_areas')), 
              field('Challenges__c', dataValue('form.chw_perspectives_and_reflections.chw_challenges')),
              field('Solutions__c', dataValue('form.chw_perspectives_and_reflections.chw_improvement_areas')),
              field('of_Household_Visit_As_Expected__c', dataValue('form.supervision_dashboard_feedback.hh_visits_check')),
              field('of_Household_Visit_Explanation__c',dataValue('form.supervision_dashboard_feedback.hh_visits_explanation')),
              field('of_Priority_Clients_as_Expected__c', dataValue('form.supervision_dashboard_feedback.priority_hh_visits_check')),
              field('of_Priority_Clients_Explanation__c',dataValue('form.supervision_dashboard_feedback.priority_hh_visits_explanation')),
              field('Feedback_on_Indicators__c',dataValue('form.supervision_dashboard_feedback.chw_sd_feedback')),
              field('CHW_Strengths__c',dataValue('form.supervisor_perspectives_and_reflections.chw_strengths_supervisor')),
              field('CHW_Areas_for_Improvement__c',dataValue('form.supervisor_perspectives_and_reflections.chw_improvement_areas_supervisor')),
              field('CHW_Immediate_Solutions__c',dataValue('form.supervisor_perspectives_and_reflections.chw_solutions_supervisor')),
              field('Other_Recommendations__c',dataValue('form.supervisor_perspectives_and_reflections.chw_recommendation_other_supervisor')),
              )
          );    

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q4-2022-Upsert-Supervision---Feedback:
        source_trigger: webhook
        target_job: Q4-2022-Upsert-Supervision---Feedback
        condition_type: js_expression
        condition_label: Supervision - Feedback - Form
        condition_expression: |
          state.data.form["@name"] == "Feedback Form" && state.data.properties["test_user"] != "Yes"
        enabled: true
  "Upsert-Supervision---Household-Spot-Check-[Q4-2022]":
    name: 'Upsert Supervision - Household Spot Check [Q4 2022]'
    jobs:
      Q4-2022-Upsert-Supervision---Household-Spot-Check:
        name: Q4 2022 Upsert Supervision - Household Spot Check
        adaptor: '@openfn/language-salesforce@latest'
        credential: null
        body: |
          //Job to integrate CommCare 'Household Spotcheck' form from the Supervision App
          fn(state => {
          state.handleMultiSelect = function (state, multiField) {
              return multiField
                ? multiField
                    .replace(/ /g, ';')
                : '';
            };
             return {
              ...state
            };
          });


          upsert(
            'Supervision_Forms__c',
            'CommCare_Form_ID__c',
            fields(
              field('CommCare_Form_ID__c', dataValue('id')),
              relationship('RecordType', 'Name', 'Household Spotcheck Form'),
              //  relationship('Household_Code__r', 
              //'Name',
              //dataValue('form.prologue.hh_code')
             // ),
              field('Supervisor_Name__c', dataValue('form.prologue.spot_checker_sfid')),
              field('CHW_Name__c', dataValue('form.prologue.chw_sfid')),
                relationship(
                'Village__r',
                'CommCare_User_ID__c',
                dataValue('form.prologue.village')
              ),
              relationship('Catchment__r', 
              'Name',
              dataValue('form.prologue.catchment')
              ),
              field('Form_Date__c',dataValue('form.Date')),
              field('CHW_Name_Identified__c',dataValue('form.chw_awareness.chw_name_reported')),
              field('Knows_where_CHW_lives__c',dataValue('form.chw_awareness.chw_location_confirmation')),
              field('Knows_CHW_contact_number__c',dataValue('form.chw_awareness.chw_contact_number')),
              field('CHW_paid_for_services__c',dataValue('form.chw_awareness.service_fee')),
              field('CHW_Visit_Frequency__c',dataValue('form.chw_awareness.chw_visit_frequency')),
              field('Household_member_reported_fever__c',dataValue('form.iccm.fever_management')),
              field('details_on_chw_conduct__c',dataValue('form.chw_behavior.chw_conduct_detail')),
              field('Tablet_used__c',dataValue('form.chw_behavior.tablet_use_check')),
              field('Other_Recommendations__c',dataValue('form.community_comments.community_recommendations_detail')),
              field('Other_comments__c',dataValue('form.community_comments.do_you_have_any_other_comments_at_this_time')),
              field('CHW_tested_treated_child_for_malaria__c',dataValue('form.iccm.malaria_management')),
              field('If_so_when_Within_the__c',dataValue('form.iccm.malaria_management_timeline')),
              field('CHW_ever_managed_your_child_for_diarrhea__c',dataValue('form.iccm.diarrhea_management')),
              field('CHW_measured_child_s_arm_past_90_days__c',dataValue('form.iccm.muac_check')),
              field('CHW_ever_managed_child_for__c',dataValue('form.iccm.pneumonia_management')),
              field('rate_the_quality_of_services__c',dataValue('form.iccm.chw_service_quality')),
              field('CHW_revisit__c',dataValue('form.referrals_and_follow-up_visits.follow_up_check_1')),
              field('follow_up_within_3_days_of_initial_visit__c',dataValue('form.referrals_and_follow-up_visits.follow_up_check_2')),
              field('does_CHW_revisit_child_for_follow_up__c',dataValue('form.referrals_and_follow-up_visits.follow_up_check_3')),
              field('when_child_is_sick__c',dataValue('form.referrals_and_follow-up_visits.follow_up_check_4')),
              field('CHW_conduct__c',dataValue('form.chw_behavior.chw_conduct_check')),
              field('comfortable_sharing_sensitive_info__c',dataValue('form.chw_behavior.sensitive_info_check')),
              field('Please_explain__c',dataValue('form.chw_behavior.sensitive_info_detail')),
              field('Does_your_CHW_listen_to_your_perspective__c',dataValue('form.chw_behavior.listening_check')),
              field('ever_experienced_a_problem_with_CHW__c', dataValue('form.chw_behavior.problem_check')),
              field('describe_problem_experienced_with_CHW__c',dataValue('form.chw_behavior.problem_detail')),
              field('any_recommendations_for_impr__c',dataValue('form.community_comments.community_recommendations')),
              field('How_was_the_fever_managed__c', state => {
                var choice = dataValue(
                  'form.iccm.fever_management_detail'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
              field('How_was_the_malaria_managed__c', state => {
                var choice = dataValue(
                  'form.iccm.malaria_management_detail'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
              field('How_did_she_he_manage_the_diarrhea__c', state => {
                var choice = dataValue(
                  'form.iccm.malaria_management_detail'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
               field('How_did_she_he_manage_the_pneumonia__c', state => {
                var choice = dataValue(
                  'form.iccm.pneumonia_managemnt_detail'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
               field('COHORT_ONE_Maternal_and_Child_Health__c', state => {
                var choice = dataValue(
                  'form.chw_service_provision.cohort_one'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
               field('COHORT_TWO_Childcare__c', state => {
                var choice = dataValue(
                  'form.chw_service_provision.cohort_two'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
               field('COHORT_THREE_WASH_and_Nutrition__c', state => {
                var choice = dataValue(
                  'form.chw_service_provision.cohort_three'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
               field('COHORT_FOUR_FIVE_Sexual_Reproductive__c', state => {
                var choice = dataValue(
                  'form.chw_service_provision.cohort_four_-_five'
                )(state);
                return state.handleMultiSelect(state, choice);
              }),
            )
          ); 

          upsertIf(
            state.data.form.prologue.hh_code !== '' &&
            state.data.form.prologue.hh_code !== null,
            'Supervision_Forms__c',
            'CommCare_Form_ID__c',
            relationship('Household_Code__r', 
              'Name',
              dataValue('form.prologue.hh_code')
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Q4-2022-Upsert-Supervision---Household-Spot-Check:
        source_trigger: webhook
        target_job: Q4-2022-Upsert-Supervision---Household-Spot-Check
        condition_type: js_expression
        condition_label: Supervision - Household Spotcheck - Form
        condition_expression: |
          state.data.form["@name"] == "Household Spotcheck Form " && state.data.properties["test_user"] != "Yes"
        enabled: true
  "x-[archive-]Workflow-Q3-2022-Upsert-Person":
    name: 'x [archive ]Workflow Q3 2022 Upsert Person'
    jobs:
      Q3-2022-Upsert-Person:
        name: Q3 2022 Upsert Person
        adaptor: '@openfn/language-salesforce@latest'
        credential: 'rita@openfn.org-Lwala-Salesforce-Sandbox-(April-2024)'
        body: |
          // create constants and functions
          fn(state => {
            state.cleanChoice = function (state, choice) {
              if (choice) {
                return choice.charAt(0).toUpperCase() + choice.slice(1).replace('_', ' ');
              } else {
                return '';
              }
            };

            state.handleMultiSelect = function (state, multiField) {
              return multiField
                ? multiField
                    .replace(/ /gi, ';')
                    .toLowerCase()
                    .split(';')
                    .map(value => {
                      return (
                        value.charAt(0).toUpperCase() + value.slice(1).replace('_', ' ')
                      );
                    })
                    .join(';')
                : '';
            };

            const pregDangerMap = {
              Vaginal_Bleeding: 'Vaginal Bleeding',
              Water_Breaks: 'Water Breaks before Time of Delivery',
              Prolonged_Labour: 'Prolonged Labour over 12 Hours',
              Convulsions: 'Convulsions or Fits',
              Abdominal_Pain: 'Severe Abdominal Pain before Delivery',
              High_Fever: 'High Fever',
              Low_Baby_Movement: 'Feeling the Baby move less or not at all',
              Swelling: 'Swelling of Face and Hands',
              Severe_Headache: 'Severe or Continuous Headache for more than 12 hours',
              Severe_Vomiting: 'Severe or Continuous Vomiting',
              none: 'None',
            };

            const counselMap = {
              anc_visits: 'ANC Visits',
              early_initiation_of_anc_less_than_3_months:
                'Early initiation of ANC (less than 3 months)',
              completing_recomended_anc_visits: 'Completing recomended ANC visits',
              danger_signs: 'Danger signs',
              skilled_birth: 'Skilled birth',
              immunization: 'Immunization',
              individual_birth_plan: 'Individual Birth Plan',
              emergency_preparedness: 'Emergency preparedness',
              childcare_and_affection: 'Childcare and affection',
              nutrition_counseling: 'Nutrition counseling',
              growth_monitoring: 'Growth monitoring',
              exclusive_breastfeeding: 'Exclusive breastfeeding',
              complementary_feeding: 'Complementary feeding',
              sleeping_under_llitn: 'Sleeping under LLITN',
              knowing_hiv_status: 'Knowing HIV status',
              indoor_pollution: 'Indoor pollution',
              personal_hygiene: 'Personal Hygiene',
              safe_drinking_water: 'Safe drinking water',
              safe_disposal_of_human_waste: 'Safe disposal of human waste',
            };

            const serviceMap = {
              Scheduled_PSC_Apt: 'Scheduled PSC Apt',
              Adverse_Drug_Reaction_Side_Effect: 'Adverse Drug Reaction/Side Effect',
              Malnutrition: 'Malnutrition',
              Malaria: 'Malaria',
              TB: 'TB',
              Treatment_for_Other_OIs: 'Treatment for other Ols',
              ARI: 'ARI',
              Anemia: 'Anemia',
              Diarrhea: 'Diarrhea',
              Pregnancy_Care: 'Pregnancy Care (ANC)',
              Family_Planning: 'Family Planning (FP)',
              Preconception_Counseling: 'Preconception Counseling',
              Injury: 'Injury',
              Other: 'Other',
            };

            const reasonMapping = {
              lack_of_access_to_fp_information: 'Lack of access to FP information',
              no_access_to_fp_services_hospitals:
                'Lack of hospitals or places where FP services can be accessed',
              not_willing_to_use_fp_due_to_negative_effects_myths_and_misconceptions:
                'Myths and misconceptions',
              barriers_at_service_delivery_points: 'Barriers at service delivery points',
              pregnant: 'The client is pregnant',
              intentions_of_getting_pregnant: 'Intentions of getting pregnant',
              not_sexually_active: 'The client is not sexually active',
              other_barriers_culture_male_partners_parents_etc:
                'Other barriers (culture, male partners, parents, etc)',
            };

            const milestoneTypeMap = {
              cognitive_delays_learning_difficulties:
                'Cognitive Delays Learning Difficulties',
              motor_delays: 'Motor Delays',
              speech_and_language_delay: 'Delay Speech and Language Delay',
              social_and_emotional: 'Social and emotional',
            };

            const milestoneMap = {
              movement: 'Movement',
              hearing: 'Hearing',
              communication: 'Communication',
              seeing: 'Seeing',
              cognitive_delays: 'Cognitive Delays',
              play: 'Play',
            };
            const nutritionMap = {
              severe: 'Severely Malnourished',
              moderate: 'Moderately Malnourished',
              normal: 'Normal',
            };

            const fpMethodMap = {
              male_condoms: 'Male condoms',
              female_condoms: 'Female condoms',
              pop: 'POP',
              coc: 'COC',
              emergency_pills: 'Emergency pills',
              none: 'None',
            };

            return {
              ...state,
              counselMap,
              serviceMap,
              reasonMapping,
              milestoneTypeMap,
              milestoneMap,
              nutritionMap,
              pregDangerMap,
              fpMethodMap,
            };
          });

          // get data from SF
          query(
            `SELECT Id, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c FROM Location__c WHERE CommCare_User_ID__c = '${dataValue(
              'properties.owner_id'
            )(state)}'`
          );

          // build IDs from queried SF data
          fn(state => ({
            ...state,
            data: {
              ...state.data,
              villageNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Id
                  : undefined,
              areaNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Parent_Geographic_Area__c
                  : undefined,
              catchmentNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Parent_Geographic_Area__r
                    ? state.references[0].records[0].Parent_Geographic_Area__r
                        .Parent_Geographic_Area__c
                    : undefined
                  : undefined,
            },
          }));

          upsertIf(
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes', 
            'Household__c',
            'CommCare_Code__c',
            fields(
              field('CommCare_Code__c', state => {
                return (
                  dataValue('indices.parent.case_id')(state) ||
                  dataValue('properties.parent_id')(state)
                );
              })
            )
          ),

          // build sfRecord before upserting
          fn(state => {
            // This mapping was initially constructed with fields(field(), ...) syntax. We
            // preserve it here and use "expandReferences" but could also refactor this to
            // use standard object syntax, as Salesforce looks for { k: v, ... }.
            const originalMapping = fields(
              /*  field(
                    'deworming_medication__c',
                    dataValue('form.TT5.Child_Information.Deworming')
                  ),depracated field*/
              field('Source__c', 1),
              field('CommCare_ID__c', dataValue('case_id')),
              relationship(
                'Household__r',
                'CommCare_Code__c', state => {
                // (dataValue('properties.parent_id') || dataValue('indices.parent.case_id'))
                 return (
                  dataValue('properties.parent_id')(state) ||
                  dataValue('indices.parent.case_id')(state)
                );
              }),
              field('commcare_location_id__c',dataValue('properties.commcare_location_id')),
              field('CommCare_Username__c',dataValue('properties.commcare_username')),
              field('Telephone__c', dataValue('properties.contact_phone_number')), 
              field(
                'Consent_for_data_use__c',
                dataValue('properties.data_sharing_consent')
              ),
              field('CommCare_HH_Code__c', dataValue('indices.parent.case_id')),
              field('Client_Status__c', dataValue('properties.Client_Status')),
              field('Catchment__c', dataValue('catchmentNewId')),
              field('Area__c', dataValue('areaNewId')),
              field('Household_Village__c', dataValue('villageNewId')),
              field('Name', state => {
                var name1 = dataValue('properties.Person_Name')(state); //check
                var unborn = dataValue('properties.name')(state); //check
                var name2 =
                  name1 === undefined || name1 === '' || name1 === null
                    ? unborn
                    : name1.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                      });
                return name1 !== null ? name2 : 'Unborn Child';
              }),
              field('Chronic_illness__c', state => {
                var choice = dataValue(
                  'properties.please_specify_which_chronic_illness_the_person_has'
                )(state);
                var choice2 = state.handleMultiSelect(state, choice);
                return choice2 ? choice2.replace(/_/g, ' ') : '';
              }),
              field(
                'Currently_enrolled_in_school__c',
                dataValue('properties.enrolled_in_school')
              ),
              field('Education_Level__c', state => {
                var level = dataValue('properties.Education_Level')(state);
                return level ? level.toString().replace(/_/g, ' ') : null;
              }),
              field('Relation_to_the_head_of_the_household__c', state => {
                var relation = dataValue('properties.relation_to_hh')(state);
                if (relation) {
                  relation = relation.toString().replace(/_/g, ' ');
                  var toTitleCase = relation.charAt(0).toUpperCase() + relation.slice(1);
                  return toTitleCase;
                }

                return null;
              }),
              field('Gender__c',dataValue('properties.Gender')),
              field('Disability__c', state => {
                var disability = dataValue('properties.disability')(state);
                var toTitleCase =
                  disability !== undefined
                    ? disability
                        .toLowerCase()
                        .split(' ')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(';')
                    : null;
                return toTitleCase;
              }), //need case property
              field('Other_disability__c', state => {
                var disability = dataValue('properties.other_disability')(state);
                var toTitleCase =
                  disability !== undefined
                    ? disability
                        .toLowerCase()
                        .split(' ')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(';')
                    : null;
                return toTitleCase;
              }), //need case property

              field('Use_mosquito_net__c', dataValue('properties.sleep_under_net')), //need case property
              // field('Birth_Certificate__c',dataValue('properties.birth_certificate')),
              field('Birth_Certificate__c', dataValue('properties.birth_certificate')),
              field('Child_Status__c', state => {
                var status = dataValue('properties.Child_Status')(state);
                var rt = dataValue('properties.Record_Type')(state); //check that this is the right one
                if (status && rt === 'Unborn') {
                  status = 'Unborn';
                } else if (status && rt === 'Born') {
                  status = 'Born';
                }
                return status;
              }),
              //===================================================//
              relationship('RecordType', 'Name', state => {
                var rt = dataValue('properties.Record_Type')(state);
                return rt === 'Unborn' || rt === ''
                  ? 'Child'
                  : rt.toString().replace(/_/g, ' '); //convert Unborn children to Child RT
              }),

              //TT5 Mother Information

              field('MCH_booklet__c', dataValue('properties.mch_booklet')), //need to create a case property
              field('Reason_for_not_taking_a_pregnancy_test__c', state => {
                var reason = dataValue('properties.No_Preg_Test')(state);
                return reason ? reason.toString().replace(/_/g, ' ') : undefined;
              }),
              field('Pregnancy_danger_signs__c', state => {
                var signs = dataValue('properties.pregnancy_danger_signs')(state);
                return signs ? state.pregDangerMap[signs] : undefined;
              }),
              field(
                'Individual_birth_plan_counselling__c',
                dataValue('properties.individual_birth_plan')
              ),
              field('Child_Danger_Signs__c', state => {
                var signs = dataValue('properties.Other_Danger_Signs')(state);
                return signs
                  ? signs
                      .toLowerCase()
                      .split(' ')
                      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                      .join(';')
                      .toString()
                      .replace(/_/g, ' ')
                  : signs;
              }),

              //HAWI
              field(
                'Unique_Patient_Code__c',
                dataValue('properties.Unique_Patient_Code')
              ),
              field(
                'Active_in_Support_Group__c',
                dataValue('properties.Active_in_Support_Group')
              ),
              field(
                'Preferred_Care_Facility__c',
                dataValue('properties.Preferred_Care_Facility')
              ),
              field('Currently_on_ART_s__c', dataValue('properties.ART')),
              field('ART_Regimen__c', dataValue('properties.ARVs')),
              field('HAWI_Defaulter__c', state => {
                var hawi = dataValue('properties.default')(state);
                return hawi === 'Yes' ? true : false;
              }),
              field('Date_of_Default__c', dataValue('properties.date_of_default')),
              field('Know_HIV_status__c', dataValue('properties.known_hiv_status')),
              field('HIV_Status__c', dataValue('properties.hiv_status')),
              /*field('HIV_Status__c', state => {
                    var status = dataValue('properties.hiv_status')(state);
                    return status === 'yes'
                      ? 'Known'
                      : status === 'no'
                      ? 'Unknown'
                      : undefined;
                  }),//CHECK MAPPING ON THIS ONE*/

              //Illness
              field('Persons_temperature__c', dataValue('properties.temperature')),
              field(
                'Days_since_illness_start__c',
                dataValue('properties.duration_of_sickness')
              ),
              field(
                'Current_Malaria_Status__c',
                dataValue('properties.malaria_test_results')
              ),
              field('Malaria_test__c', dataValue('properties.malaria_test')),
              field(
                'Last_Malaria_Home_Test__c',
                dataValue('properties.malaria_test_date')
              ),
              field('Last_Malaria_Home_Treatment__c', state => {
                var choice = dataValue(
                  'properties.malaria_test_date'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              /*field('Current_Malaria_Status__c', dataValue('form.Malaria_Status')),//check
                  field('Malaria_Facility__c',dataValue('form.treatment_and_tracking.malaria_referral_facility')),
                  field('Fever_over_7days__c',dataValue('form.treatment_and_tracking.symptoms_check_fever')),//check*/
              field('Cough_over_14days__c', dataValue('properties.symptoms_check_cough')),
              /*field('Diarrhoea_over_14days__c',dataValue('form.treatment_and_tracking.symptoms_check_diarrhea')),//check
                  field('Diarrhoea_less_than_14_days__c',dataValue('form.treatment_and_tracking.mild_symptoms_check_diarrhea')),//check*/
              field(
                'TB_patients_therapy_observed__c',
                dataValue('properties.observed_tb_therapy')
              ),
              field('Injuries_or_wounds__c', dataValue('properties.wounds_or_injuries')),
              field(
                'Pulse_Oximeter__c',
                dataValue('properties.pulse_oximeter_available')
              ),
              field(
                'Heart_Rate_Pulse_Oximeter__c',
                dataValue('properties.heart_rate_pulse_oximeter')
              ),
              field(
                'Oxygen_Concentration_Pulse_Oximeter__c',
                dataValue('properties.oxygen_concentration')
              ),
              field('Can_child_drink__c', dataValue('properties.can_child_drink')),
              // field('Antibiotic_provided_for_fast_breathing__c',dataValue('properties.antibiotic_fast_breathing')),
              field('Antibiotic_provided_for_fast_breathing__c', state => {
                var choice = dataValue('properties.antibiotic_fast_breathing')(state);
                return state.cleanChoice(state, choice);
              }),
              // field('Antibiotic_provided_for_chest_indrawing__c',dataValue('properties.antibiotic_chest_indrawing')),
              field('Antibiotic_provided_for_chest_indrawing__c', state => {
                var choice = dataValue('properties.antibiotic_chest_indrawing')(state);
                return state.cleanChoice(state, choice);
              }),
              /*field('Child_zinc__c',dataValue('form.TT5.Child_Information.Clinical_Services.diarrhea_clinic_treatment_zinc')),//check
                  field('Child_ORS__c',dataValue('form.TT5.Child_Information.Clinical_Services.diarrhea_clinic_treatment_ORS')),//check
                  field('Childs_breath_per_minute__c',dataValue('form.psbi.breaths_per_minuite')),//check
                  field('Child_chest_in_drawing__c',dataValue('form.psbi.Child_chest_in_drawing_c')),//check*/
              field('Default_on_TB_treatment__c', state => {
                var choice = dataValue('properties.default_tb_treatment')(state); //check
                return state.cleanChoice(state, choice);
              }),
              field('Treatment_Distribution__c', state => {
                var choice = dataValue('properties.distributed_treatments')(state);
                return state.cleanChoice(state, choice);
              }), //check

              //Delivery
              field(
                'Immediate_Breastfeeding__c',
                dataValue('properties.Breastfeeding_Delivery')
              ),
              field('Place_of_Delivery__c', state => {
                var facility = dataValue('properties.Delivery_Type')(state);
                return facility === 'Skilled'
                  ? 'Facility'
                  : facility === 'Unskilled'
                  ? 'Home'
                  : undefined;
              }),
              field('Delivery_Facility__c', state => {
                var facility = dataValue('properties.Delivery_Facility')(state);
                return facility ? facility.toString().replace(/_/g, ' ') : null;
              }),
              /* field('Delivery_Facility__c', state => {
                //HMN 21//11/2022
                var birthFacility =dataValue('properties.Birth_Facility')(state);
                var deliveryFacility = dataValue('properties.Delivery_Facility')(state);
                var facilityOfBirth = dataValue ('properties.Facility_of_Birth')(state);
                var faciliy_val = 
                  facilityOfBirth //!== undefined || facilityOfBirth !== '' || facilityOfBirth !== null 
                  ? facilityOfBirth
                  :birthFacility //!== undefined || birthFacility !== '' || birthFacility !== null 
                  ? birthFacility
                  :deliveryFacility //!== undefined || deliveryFacility !== '' || deliveryFacility !== null 
                  ? deliveryFacility
                  :"";
                return faciliy_val.toString().replace(/_/g, ' '); 
              //HMN
              }), */
              //field('Delivery_Facility__c', state => {
              //  var facility = dataValue('properties.Birth_Facility')(state);
              //  return facility ? facility.toString().replace(/_/g, ' ') : null;
              //}),
              field(
                'Delivery_Facility_Other__c',
                dataValue('properties.Delivery_Facility_Other')
              ),

              //Family Planning

              field('LMP__c', dataValue('properties.LMP')),
              field('Family_Planning__c', dataValue('properties.family_planning')),
              field(
                'Family_Planning_Method__c',
                dataValue('properties.family_planning_method')
              ),
              field('FP_Method_Distributed__c', state => {
                var status = dataValue('properties.FP_commodity')(state);
                var value =
                  status && status !== ''
                    ? status
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.fpMethodMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Reasons_for_not_taking_FP_method__c', state => {
                var status = dataValue('properties.No_FPmethod_reason')(state);
                var value =
                  status && status !== ''
                    ? status
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.reasonMapping[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field('Pregnant__c', state => {
                var preg = dataValue('properties.Pregnant')(state);
                return preg === 'Yes' ? true : false;
              }),
              field('Date_of_Delivery__c', dataValue('properties.delivery_date')),
              field(
                'Counselled_on_FP_Methods__c',
                dataValue('properties.CounselledFP_methods')
              ),
              field('Client_counselled_on__c', state => {
                var choices =
                  dataValue('properties.counsel_topic')(state) ||
                  dataValue('properties.counsel_topic')(state); //need to create a case property
                var choiceGroups = choices ? choices.split(' ') : null;
                var choicesMulti = choiceGroups
                  ? choiceGroups
                      .map(cg => {
                        return state.counselMap[cg];
                      })
                      .join(';')
                  : choiceGroups;
                return choicesMulti;
              }), //OpenFn Question - can this be simplified now that this is a case property
              field('Client_provided_with_FP__c', state => {
                var choice = dataValue(
                  'properties.was_the_woman_15-49yrs_provided_with_family_planning_commodities_by_chv'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field(
                'Received_pregnancy_test__c',
                dataValue('properties.did_you_adminsiter_a_pregnancy_test')
              ),
              field(
                'Pregnancy_test_result__c',
                dataValue('properties.pregnancy_test_result')
              ),
              field('Gravida__c', dataValue('properties.Gravida')),
              field('Parity__c', dataValue('properties.Parity')),

              //TT5 Child Information

              field(
                'Exclusive_Breastfeeding__c',
                dataValue('properties.Exclusive_Breastfeeding')
              ),
              field(
                'Counselled_on_Exclusive_Breastfeeding__c',
                dataValue('properties.counseling')
              ),
              field(
                'Newborn_visited_48_hours_of_delivery__c',
                dataValue('properties.newborn_visited_48_hours_of_delivery')
              ),
              field('Newborn_visit_counselling__c', state => {
                var choice = dataValue('properties.did_you_consel_the_mother_on1')(state);
                return state.cleanChoice(state, choice);
              }),
              field(
                'mother_visited_48_hours_of_the_delivery__c',
                dataValue('properties.visit_mother_48')
              ),
              /*
              //HMN -06012023- The object Visit_after_unskilled__c seems to be missing in sfRecord
              //Investigation issue https://lwala.atlassian.net/browse/LWAL-716 raised
              //Meanwhile this is being removed to allow re-processing
              field(
                'Visit_after_unskilled__c',
                dataValue('properties.visit_24hours_after_unskilled_delivery')
              ),
              */
              field('Mother_visit_counselling__c', state => {
                var choice = dataValue('properties.did_you_consel_the_mother_on2')(state);
                return state.cleanChoice(state, choice);
              }),
              /*field('Newborn_visited_48_hours_of_delivery__c',dataValue('properties.newborn_visited_48_hours_of_delivery')), Duplicate Mapping*/
              field(
                'Newborn_visited_by_a_CHW_within_6_days__c',
                dataValue('properties.visit_6_days_from_delivery')
              ),

              //Nutrition

              field(
                'Caretaker_action_after_muac_screening__c',
                dataValue('properties.mother_screened_muac_action')
              ),
              field(
                'Caretaker_muac_findings__c',
                dataValue('properties.mother_screened_child_muac_result')
              ),
              field('Food_groups_3_times_a_day__c',dataValue('properties.food_groups')),
              // field('Caretaker_screened_for_muac_this__c', dataValue('properties.mother_screened_child_muac')),
              field('Caretaker_screened_for_muac_this__c', state => {
                var choice = dataValue('properties.mother_screened_child_muac')(state); //check
                return state.cleanChoice(state, choice);
              }),
              // field('Caretaker_trained_in_muac__c', dataValue('properties.mother_trained_muac')),
              field('Caretaker_trained_in_muac__c', state => {
                var choice = dataValue('properties.mother_trained_muac')(state); //check
                return state.cleanChoice(state, choice);
              }),
              field(
                'of_Caretaker_MUAC_screenings__c',
                dataValue('properties.mother_nb_screening')
              ),
              field('Current_Weight__c', dataValue('properties.Current_Weight')), //Only on task update
              field('Current_Height__c', dataValue('properties.current_height')),
              field('Current_MUAC__c', dataValue('properties.MUAC')),
              field('Current_Nutrition_Status__c', state => {
                var status = dataValue('properties.Nutrition_Status')(state);
                return status ? state.nutritionMap[status] : undefined;
              }),

              //TT5 & HAWI
              field('TT5_Mother_Registrant__c', state => {
                var preg = dataValue('properties.Pregnant')(state);
                return preg == 'Yes' ? 'Yes' : null;
              }),
              field('Enrollment_Date__c', state => {
                var age = dataValue('properties.age')(state);
                var date = dataValue('server_date_modified')(state);
                var preg = dataValue('properties.Pregnant')(state);
                return age < 5 || preg == 'Yes' ? date : null;
              }),
              field('HAWI_Enrollment_Date__c', state => {
                var date = dataValue('server_date_modified')(state);
                var status = dataValue('properties.hiv_status')(state);
                return status == 'positive' ? date : null;
              }),
              field('Thrive_Thru_5_Registrant__c', state => {
                var age = dataValue('properties.age')(state);
                var preg = dataValue('properties.Pregnant')(state);
                return age < 5 || preg == 'Yes' ? 'Yes' : 'No';
              }), //check mapping
              field('HAWI_Registrant__c', state => {
                var status = dataValue('properties.hiv_status')(state);
                return status == 'positive' ? 'Yes' : 'No';
              }),

              //ANC
              field('ANC_1__c', state => {
                var date = dataValue('properties.ANC_1')(state);
                return date && date !== '' ? date : undefined;
              }),
              field('ANC_2__c', state => {
                var date = dataValue('properties.ANC_2')(state);
                return date && date !== '' ? date : undefined;
              }),
              field('ANC_3__c', state => {
                var date = dataValue('properties.ANC_3')(state);
                return date && date !== '' ? date : undefined;
              }),
              field('ANC_4__c', state => {
                var date = dataValue('properties.ANC_4')(state);
                return date && date !== '' ? date : undefined;
              }),
              field('ANC_5__c', state => {
                var date = dataValue('properties.ANC_5')(state);
                return date && date !== '' ? date : undefined;
              }),
              field('Date_of_Birth__c', state => {
                var date = dataValue('properties.DOB')(state);
                return date && date !== '' ? date : undefined;
              }),

              //Immunization

              field(
                'Child_missed_immunization_type__c',
                dataValue('form.TT5.Child_Information.Immunizations.immunization_type')
              ), //check
              field('BCG__c', dataValue('properties.BCG')),
              field('OPV_0__c', dataValue('properties.OPV_0')),
              field('Measles_6__c', dataValue('properties.Measles_6')),
              field('Measles_9__c', dataValue('properties.Measles_9')),
              field('Measles_18__c', dataValue('properties.Measles_18')),
              field('OPV_1__c', dataValue('properties.OPV_PCV_Penta_1')),
              field('OPV_2__c', dataValue('properties.OPV_PCV_Penta_2')),
              field('OPV_3__c', dataValue('properties.OPV_PCV_Penta_3')),
              field('Rotavirus_1__c', dataValue('properties.rotavirus_1')),
              field('Rotavirus_2__c', dataValue('properties.rotavirus_2')),
              field('IPV__c', dataValue('properties.IPV')),
              field('Vitamin_A_12__c', dataValue('properties.Vitamine_A')),
              field('Vitamin_A_18__c', dataValue('properties.Vitamine_A_2')),
              field('Vitamin_A_24__c', dataValue('properties.Vitamine_A_3')),
              field('Deworming_12__c', dataValue('properties.Deworming_1')),
              field('Deworming_18__c', dataValue('properties.Deworming_2')),
              field('Deworming_24__c', dataValue('properties.Deworming_3')),

              //ECD
              // field('Did_you_counsel_caregiver_on__c',dataValue('properties.did_you_counsel_the_caregiver_on_delayed_milestones')),
              field('Did_you_counsel_caregiver_on__c', state => {
                var choice = dataValue(
                  'properties.did_you_counsel_the_caregiver_on_delayed_milestones'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              // field('Delayed_Milestone__c',dataValue('properties.does_the_child_has_a_delayed_milestone')),
              field('Delayed_Milestone__c', state => {
                var choice = dataValue(
                  'properties.does_the_child_has_a_delayed_milestone'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              // field('Child_has_2_or_more_play_items__c',dataValue('properties.does_the_child_has_2_or_more_play_items_at_home')),
              field('Child_has_2_or_more_play_items__c', state => {
                var choice = dataValue(
                  'properties.does_the_child_has_2_or_more_play_items_at_home'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              // field('Child_has_3_or_more_picture_books__c',dataValue('properties.does_the_child_has_3_or_more_picture_books')),
              field('Child_has_3_or_more_picture_books__c', state => {
                var choice = dataValue(
                  'properties.does_the_child_has_3_or_more_picture_books'
                )(state);
                return state.cleanChoice(state, choice);
              }),
              field('Delayed_Milestones_Counselled_On__c', state => {
                var ms = dataValue(
                  'properties.which_delayed_milestone_area_did_you_counsel_the_caregiver_on'
                )(state);
                return ms ? state.milestoneMap[ms] : undefined;
              }),
              field('Delayed_Milestone_Type__c', state => {
                var ms = dataValue('properties.which_delayed_milestone')(state);
                return ms ? state.milestoneTypeMap[ms] : undefined;
              }),

              //Death
              field('Date_of_Death__c', dataValue('properties.Date_of_Death')),
              field('Cause_of_Death__c', state => {
                var death = dataValue('properties.cause_of_death_dead')(state);
                return death ? death.toString().replace(/_/g, ' ') : death;
              }), //check which case property to use - there are 2
              field('Verbal_autopsy__c', dataValue('properties.verbal_autopsy')),

              //Closing
              field('Last_Modified_Date_CommCare__c', dataValue('date_modified')),
              field('Case_Closed_Date__c',dataValue('date_closed')),
              //field('Case_Closed_Date__c', state => {
              //  var closed = dataValue('date_closed')(state);
              //  var date = dataValue('date_modified')(state);
              //  return closed && closed == true ? date : undefined;
              //}) //need case property
            );

            let sfRecord = expandReferences(originalMapping)(state);

            Object.entries(sfRecord).forEach(([key, value]) => {
              if (value === '') sfRecord[key] = undefined;
            });

            return { ...state, sfRecord };
          });

          // upsert data to SF
          upsertIf(
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' ,
            'Person__c', 'CommCare_ID__c', state => state.sfRecord);

          upsertIf(
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' &&
              state.data.properties.caretaker_case_id !== undefined && state.data.properties.caretaker_case_id !== '', 
              'Person__c', 'CommCare_ID__c', 
              fields(
                relationship('Primary_Caregiver_Lookup__r', 'CommCare_ID__c', state => {
                return caregiver = dataValue('properties.caretaker_case_id')(state);
                }),
               field('CommCare_ID__c', dataValue('case_id')),
              )
          );

          upsertIf(
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' &&
              state.data.properties.mother_case_id !== undefined && state.data.properties.mother_case_id !== '', 
              'Person__c', 'CommCare_ID__c', 
              fields(
                relationship('Mother__r', 'CommCare_ID__c', state => {
                return caregiver = dataValue('properties.mother_case_id')(state);
                }),
                field('CommCare_ID__c', dataValue('case_id')),
              )
          );

          upsertIf(
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' &&
            state.data.properties.head_of_household_case_id  !== undefined  && state.data.properties.head_of_household_case_id !== '', 
            'Household__c', 'CommCare_Code__c',
            fields(
              field('CommCare_Code__c', state => {
                return (
                  dataValue('indices.parent.case_id')(state) ||
                  dataValue('properties.parent_id')(state)
                )
              }),
              relationship('Head_of_Household__r', 'CommCare_ID__c', dataValue('properties.head_of_household_case_id')),
                )
            )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Q3-2022-Upsert-Person:
        source_trigger: webhook
        target_job: Q3-2022-Upsert-Person
        condition_type: js_expression
        condition_label: Person
        condition_expression: |
          state.data.properties["case_type"] == "Person" && state.data.properties["test_user"] != "Yes"
        enabled: false
  "x-[archive-]Workflow-WF3-2a-Repeat-Failed-Person-Visits":
    name: 'x [archive ]Workflow WF3-2a Repeat Failed Person Visits'
    jobs:
      WF3-2a-Repeat-Failed-Person-Visits:
        name: WF3-2a Repeat Failed Person Visits
        adaptor: '@openfn/language-salesforce@latest'
        credential: null
        body: |
          fn(state => {
            const { baseUrl } = state.configuration;

            const caseTypes = ['visite'];

            //NOTE: You can use 'limit' to modify this batch size as desired
            const limit = 1000; //E.g., change to 10 to process records in smaller batch sizes

            //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs
            const indexedOnStart = '2024-01-17T01:00:00';

            //NOTE: After first job run, OpenFn will check the job sync data ("lastRunAt") to set as the indexedOnStart
            const lastRunAt =
              typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;
            console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);
            
            const aMinuteAgo = new Date( Date.now() - 1000 * 60 );
            console.log(aMinuteAgo);

            const queries = caseTypes.map(
             t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}`
              //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...
              //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates
             //t => `?type=${t}&indexed_on_start=2024-01-15T00:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59`
            );

            return { ...state, queries, baseUrl, payloads: [] };
          });

          // create a "recursiveGet" which will call itself if CommCare tells us there's
          // more data to fetch for the same form

          fn(state => {
            const recursiveGet = url =>
              get(
                url,
                {
                  headers: { 'content-type': 'application/json' },
                },
                nextState => {
                  const now = new Date();
                  const { baseUrl, data, payloads } = nextState;

                  const { meta, objects } = data;
                  console.log('Metadata in CommCare response:', meta);

                  const finalState = {
                    ...nextState,
                    payloads: [...payloads, ...objects],
                  };

                  if (meta.next) {
                    console.log('Next query detected, recursing...');
                    return recursiveGet(`${baseUrl}${meta.next}`)(finalState);
                  }
                  finalState.lastRunAt = now.toISOString().slice(0, 19);
                  return finalState;
                }
              );

            return { ...state, recursiveGet };
          });

          // for each initial query, fetch data recursively
          each(
            '$.queries[*]',
            fn(state => {
              return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);
            })
          );
          // log the total number of payloads returned
          fn(state => {
            console.log('Count of payloads', state.payloads.length);

            return { ...state, references: [], data: {} };
          });

    triggers:
      cron:
        type: cron
        cron_expression: '0 * * * *'
        enabled: false
    edges:
      cron->WF3-2a-Repeat-Failed-Person-Visits:
        source_trigger: cron
        target_job: WF3-2a-Repeat-Failed-Person-Visits
        condition_type: always
        enabled: false
  "x-[archive]-Input-Seed-Support-and-Kitchen-Garden-Adoption":
    name: 'x [archive] Input Seed Support and Kitchen Garden Adoption'
    jobs:
      Input-Seed-Support-and-Kitchen-Garden-Adoption:
        name: Input Seed Support and Kitchen Garden Adoption
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          alterState(state => {
            var input_seed_support = dataValue('form.input_seed_support')(state).split(
              ' '
            );
            for (i = 0; i < input_seed_support.length; i++) {
              upsert(
                'Household__c',
                'CommCare_Code__c',
                fields(
                  field('CommCare_Code__c', input_seed_support[i]),
                  field('Seed_Input_Support__c', 'Yes')
                )
              )(state);
            }
            return state;
          });

          alterState(state => {
            var kitchen_garden = dataValue('form.kitchen_garden')(state).split(' ');
            for (i = 0; i < kitchen_garden.length; i++) {
              upsert(
                'Household__c',
                'CommCare_Code__c',
                fields(
                  field('CommCare_Code__c', kitchen_garden[i]),
                  field('Kitchen_Garden__c', 'Yes')
                )
              )(state);
            }
            return state;
          });
          // Your job goes here.

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Input-Seed-Support-and-Kitchen-Garden-Adoption:
        source_trigger: webhook
        target_job: Input-Seed-Support-and-Kitchen-Garden-Adoption
        condition_type: js_expression
        condition_label: Input Seed Support and Kitchen Garden Adoption
        condition_expression: |
          state.data.form["@name"] == "Copy of Register Training"
        enabled: false
  "x-[archive]-Update-Household-in-CommCare":
    name: 'x [archive] Update Household in CommCare'
    jobs:
      Update-Household-in-CommCare:
        name: Update Household in CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          submit(
            fields(
              field('@', state => {
                return {
                  'xmlns:jrm': 'http://dev.commcarehq.org/jr/xforms',
                  xmlns:
                    'http://openrosa.org/formdesigner/980c10cdb3b140101225e25c6e8aff48f471b3d',
                  uiVersion: '1',
                  version: '46',
                  name: 'Update Household',
                };
              }),
              field('Source', false),
              field('Household_Status', state => {
                var str = '';
                if (dataValue('new[0].Active_Household__c')(state) === false) {
                  str = 'No';
                } else {
                  str = 'Yes';
                }
                return str;
              }),
              field('Run_Code', 'Household_Lwala'),
              field('name', dataValue('new[0].Name')),
              field('area', dataValue('new[0].Area__c')),

              field('Household_Information', state => {
                return {
                  Active_Handwashing_Station: dataValue('new[0].Tippy_Tap__c')(state),
                  Drying_Rack: dataValue('new[0].Drying_Rack__c')(state),

                  WASH_Compliant: () => {
                    var ans = '';
                    if (dataValue('new[0].WASH_Compliant__c')(state) === true) {
                      ans = 'Yes';
                    } else {
                      ans = 'No';
                    }
                    return ans;
                  },
                  Functional_Latrine: dataValue('new[0].Pit_Latrine__c')(state),
                  Clothesline: dataValue('new[0].Clothe__c')(state),
                  ITNs: dataValue('new[0].Uses_ITNs__c')(state),
                  Improved_Cooking_Method: dataValue('new[0].Cookstove__c')(state),
                  Kitchen_Garden: dataValue('new[0].Kitchen_Garden__c')(state),
                  Number_of_Over_5_Males: dataValue('new[0].Number_of_Over_5_Males__c')(
                    state
                  ),
                  Number_of_Over_5_Females: dataValue(
                    'new[0].Number_of_Over_5_Females__c'
                  )(state),
                  Number_of_Under_5_Males: dataValue('new[0].Number_of_Under_5_Males__c')(
                    state
                  ),
                  Number_of_Under_5_Females: dataValue(
                    'new[0].Number_of_Under_5_Females__c'
                  )(state),
                  Rubbish_Pit: dataValue('new[0].Rubbish_Pit__c')(state),
                  Treats_Drinking_Water: dataValue('new[0].Treats_Drinking_Water__c')(
                    state
                  ),
                  WASH_Trained: dataValue('new[0].WASH_Trained__c')(state),
                  Total_Under_5: dataValue('new[0].Total_Number_of_Under_5s__c')(state),
                  Total_Males: dataValue('new[0].Total_Number_of_Males__c')(state),
                  Total_Females: dataValue('new[0].Total_Number_of_Females__c')(state),
                  Total_Household_Members: dataValue('new[0].Total_Number_of_Members__c')(
                    state
                  ),
                  Total_Over_5: () => {
                    var num = 0;
                    num =
                      dataValue('new[0].Total_Number_of_Members__c')(state) -
                      dataValue('new[0].Total_Number_of_Under_5s__c')(state);
                    return num;
                  },
                };
              }),
              field('n0:case', state => {
                return {
                  '@': {
                    case_id: dataValue('new[0].Commcare_Code__c')(state),
                    date_modified: new Date().toISOString(),
                    user_id: 'e298884bfb6ee2d2b38591a6e8ae0228',
                    'xmlns:n0': 'http://commcarehq.org/case/transaction/v2',
                  },
                  'n0:update': {
                    'n0:case_name': dataValue('new[0].Name')(state),
                    'n0:owner_id': () => {
                      var id = '';
                      if (dataValue('new[0].chw_owner_id__c')(state) === undefined) {
                        id = 'acf8595692c76095eb5afd809c628091';
                      } else {
                        id = dataValue('new[0].chw_owner_id__c')(state);
                      }
                      return id;
                    },
                    'n0:case_type': 'Household',
                    'n0:WASH_Compliant': () => {
                      var ans = '';
                      if (dataValue('new[0].WASH_Compliant__c')(state) === true) {
                        ans = 'Yes';
                      } else {
                        ans = 'No';
                      }
                      return ans;
                    },
                    'n0:Active_Handwashing_Station': dataValue('new[0].Tippy_Tap__c')(
                      state
                    ),
                    'n0:Drying_Rack': dataValue('new[0].Drying_Rack__c')(state),
                    'n0:Functional_Latrine': dataValue('new[0].Pit_Latrine__c')(state),
                    'n0:Clothesline': dataValue('new[0].Clothe__c')(state),
                    'n0:ITNs': dataValue('new[0].Uses_ITNs__c')(state),
                    'n0:Active_in_Nutrition_Program': dataValue(
                      'new[0].Active_in_Nutrition_Program__c'
                    )(state),
                    'n0:Nutrition_Group': dataValue('new[0].Nutrition_Group__c')(state),
                    'n0:seed_input_support': dataValue('new[0].Seed_Input_Support__c')(
                      state
                    ),
                    'n0:name_concat': dataValue('new[0].Name_Concatenation__c')(state),
                    'n0:CHW_ID': dataValue('new[0].Household_CHW__c')(state),
                    'n0:Improved_Cooking_Method': dataValue('new[0].Cookstove__c')(state),
                    'n0:Kitchen_Garden': dataValue('new[0].Kitchen_Garden__c')(state),
                    'n0:Number_of_Over_5_Males': dataValue(
                      'new[0].Number_of_Over_5_Males__c'
                    )(state),
                    'n0:Number_of_Over_5_Females': dataValue(
                      'new[0].Number_of_Over_5_Females__c'
                    )(state),
                    'n0:Number_of_Under_5_Males': dataValue(
                      'new[0].Number_of_Under_5_Males__c'
                    )(state),
                    'n0:Number_of_Under_5_Females': dataValue(
                      'new[0].Number_of_Under_5_Females__c'
                    )(state),
                    'n0:Rubbish_Pit': dataValue('new[0].Rubbish_Pit__c')(state),
                    'n0:Treats_Drinking_Water': dataValue(
                      'new[0].Treats_Drinking_Water__c'
                    )(state),
                    'n0:WASH_Trained': dataValue('new[0].WASH_Trained__c')(state),
                    'n0:Total_Under_5': dataValue('new[0].Total_Number_of_Under_5s__c')(
                      state
                    ),
                    'n0:Total_Males': dataValue('new[0].Total_Number_of_Males__c')(state),
                    'n0:Total_Females': dataValue('new[0].Total_Number_of_Females__c')(
                      state
                    ),
                    'n0:area': dataValue('new[0].Area__c')(state),
                    'n0:Area_Name': dataValue('new[0].Area_Name__c')(state),
                    'n0:Total_Household_Members': dataValue(
                      'new[0].Total_Number_of_Members__c'
                    )(state),
                    'n0:Household_Status': () => {
                      var str = '';
                      if (dataValue('new[0].Active_Household__c')(state) === false) {
                        str = 'No';
                      } else {
                        str = 'Yes';
                      }
                      return str;
                    },
                    'n0:Total_Over_5': () => {
                      var num = 0;
                      num =
                        dataValue('new[0].Total_Number_of_Members__c')(state) -
                        dataValue('new[0].Total_Number_of_Under_5s__c')(state);
                      return num;
                    },
                  },
                  'n0:index': {
                    'n0:parent': {
                      '@': {
                        case_type: 'Area',
                      },
                      '#': dataValue('new[0].Area_Case_ID__c')(state),
                    },
                  },
                };
              }),
              field('n1:meta', state => {
                return {
                  '@': { 'xmlns:n1': 'http://openrosa.org/jr/xforms' },
                  'n1:deviceID': 'Formplayer',
                  'n1:timeStart': new Date().toISOString(),
                  'n1:timeEnd': new Date().toISOString(),
                  'n1:userID': 'e298884bfb6ee2d2b38591a6e8ae0228',
                };
              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Update-Household-in-CommCare:
        source_trigger: webhook
        target_job: Update-Household-in-CommCare
        condition_type: js_expression
        condition_label: SF Update HH
        condition_expression: |
          state.data.label == "Update Household"
        enabled: false
  "x-[archive]-Update-Person-in-CommCare-V2":
    name: 'x [archive] Update Person in CommCare V2'
    jobs:
      Update-Person-in-CommCare-V2:
        name: Update Person in CommCare V2
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          submit(
            fields(
              field('@', state => {
                return {
                  'xmlns:jrm': 'http://dev.commcarehq.org/jr/xforms',
                  xmlns: () => {
                    return dataValue('new[0].Catchment__c')(state) == 'a001p000017gpfZAAQ'
                      ? 'http://openrosa.org/formdesigner/457C806C-B47D-44F0-BE4B-7E88F7162D1D'
                      : 'http://openrosa.org/formdesigner/a34af027a7fa943998c39f64bc84a337a668114a';
                  },
                  uiVersion: '1',
                  version: '81',
                  name: () => {
                    return dataValue('new[0].Catchment__c')(state) == 'a001p000017gpfZAAQ'
                      ? 'Update Person MOH'
                      : 'Update Person';
                  },
                };
              }),
              field('Source', 0),
              field('Status', state => {
                return {
                  Client_Status: dataValue('new[0].Client_Status__c')(state),
                  Date_of_Transfer_Out: dataValue('new[0].Date_of_Transfer_Out__c')(
                    state
                  ),
                  Date_Last_Seen: dataValue('new[0].Date_Last_Seen__c')(state),
                  Date_of_Death: dataValue('new[0].Date_of_Death__c')(state),
                  Cause_of_Death: dataValue('new[0].Cause_of_Death__c')(state),
                };
              }),
              field('Basic_Information', state => {
                return {
                  Basic_Information: {
                    Phone_Number: dataValue('new[0].Telephone__c')(state),
                    Final_Program: () => {
                      var program = '';
                      if (
                        dataValue('new[0].Active_In_Thrive_Thru_5__c')(state) == 'Yes' ||
                        dataValue('new[0].Active_TT5_Mother__c')(state) == 'Yes'
                      ) {
                        if (dataValue('new[0].Active_In_HAWI__c')(state) == 'Yes') {
                          program = 'Both';
                        } else {
                          program = 'Thrive_Through_5';
                        }
                      } else {
                        if (dataValue('new[0].Active_In_HAWI__c')(state) == 'Yes') {
                          program = 'HAWI';
                        }
                      }
                      return program;
                    },
                  },
                };
              }),
              field('TT5', state => {
                return {
                  Child_Information: {
                    ANCs: {
                      ANC_1: dataValue('new[0].ANC_1__c')(state),
                      ANC_2: dataValue('new[0].ANC_2__c')(state),
                      ANC_3: dataValue('new[0].ANC_3__c')(state),
                      ANC_4: dataValue('new[0].ANC_4__c')(state),
                      ANC_5: dataValue('new[0].ANC_5__c')(state),
                    },
                    Delivery_Information: {
                      Person_Name: dataValue('new[0].Name')(state),
                      DOB: dataValue('new[0].Date_of_Birth__c')(state),
                      Delivery_Type: () => {
                        var val = '';
                        if (dataValue('new[0].Place_of_Delivery__c')(state) == 'Home') {
                          val = 'Unskilled';
                        } else if (
                          dataValue('new[0].Place_of_Delivery__c')(state) == 'Facility'
                        ) {
                          val = 'Skilled';
                        }
                        return val;
                      },
                      Delivery_Facility: dataValue('new[0].Delivery_Facility__c')(state),
                    },
                    Immunizations: {
                      BCG: dataValue('new[0].BCG__c')(state),
                      OPV_0: dataValue('new[0].OPV_0__c')(state),
                      OPV_PCV_Penta_1: dataValue('new[0].OPV_1__c')(state),
                      OPV_PCV_Penta_2: dataValue('new[0].OPV_2__c')(state),
                      OPV_PCV_Penta_3: dataValue('new[0].OPV_3__c')(state),
                      Measles_6: dataValue('new[0].Measles_6__c')(state),
                      Measles_9: dataValue('new[0].Measles_9__c')(state),
                      Measles_18: dataValue('new[0].Measles_18__c')(state),
                      Fully_Immunized: dataValue(
                        'new[0].Fully_Immunized_at_12_Months__c'
                      )(state),
                    },
                    /*"CCMM":{
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                    }*/
                  },
                  Mother_Information: {
                    Pregnant: () => {
                      if (dataValue('new[0].Pregnant__c')(state) === true) {
                        return 'Yes';
                      }
                    },
                  },
                };
              }),
              field('HAWI', state => {
                return {
                  Unique_Patient_Code: dataValue('new[0].Unique_Patient_Code__c')(state),
                  Support_Group: dataValue('new[0].Active_in_Support_Group__c')(state),
                  Preferred_Care_F: {
                    Preferred_Care_Facility: dataValue(
                      'new[0].Preferred_Care_Facility__c'
                    )(state),
                  },
                };
              }),

              field('n0:case', state => {
                return {
                  '@': {
                    case_id: dataValue('new[0].CommCare_ID__c')(state),
                    date_modified: new Date().toISOString(),
                    user_id: 'e298884bfb6ee2d2b38591a6e8ae0228',
                    'xmlns:n0': 'http://commcarehq.org/case/transaction/v2',
                  },
                  'n0:create': {
                    'n0:case_name': () => {
                      var name1 = dataValue('new[0].Name')(state);
                      var name2 = name1.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                      });
                      return name2;
                    },
                    'n0:case_type': 'Person',
                    'n0:parent_id': dataValue('new[0].CommCare_HH_Code__c')(state),
                  },
                  'n0:update': {
                    'n0:ANC_1': dataValue('new[0].ANC_1__c')(state),

                    'n0:ANC_2': dataValue('new[0].ANC_2__c')(state),
                    'n0:ANC_3': dataValue('new[0].ANC_3__c')(state),
                    'n0:ANC_4': dataValue('new[0].ANC_4__c')(state),
                    'n0:ANC_5': dataValue('new[0].ANC_5__c')(state),
                    'n0:BCG': dataValue('new[0].BCG__c')(state),
                    'n0:Fully_Immunized': dataValue(
                      'new[0].Fully_Immunized_at_12_Months__c'
                    )(state),
                    'n0:Delivery_Type': () => {
                      var val = '';
                      if (dataValue('new[0].Place_of_Delivery__c')(state) == 'Home') {
                        val = 'Unskilled';
                      } else if (
                        dataValue('new[0].Place_of_Delivery__c')(state) == 'Facility'
                      ) {
                        val = 'Skilled';
                      }
                      return val;
                    },
                    'n0:Delivery_Facility': dataValue('new[0].Delivery_Facility__c')(
                      state
                    ),
                    'n0:Family_Planning_Method': dataValue(
                      'new[0].Family_Planning_Method__c'
                    )(state),
                    'n0:Child_Status': dataValue('new[0].Child_Status__c')(state),
                    'n0:Active_in_OSG_Mentoring': dataValue('new[0].Active_in_OSG__c')(
                      state
                    ),
                    'n0:OSG_Mentoring_Group': dataValue('new[0].OSG_Group__c')(state),
                    'n0:OPV_0': dataValue('new[0].OPV_0__c')(state),
                    'n0:OPV_PCV_Penta_1': dataValue('new[0].OPV_1__c')(state),
                    'n0:OPV_PCV_Penta_2': dataValue('new[0].OPV_2__c')(state),
                    'n0:OPV_PCV_Penta_3': dataValue('new[0].OPV_3__c')(state),
                    'n0:Current_Height': dataValue('new[0].Current_Height__c')(state),
                    'n0:Current_Weight': dataValue('new[0].Current_Weight__c')(state),
                    'n0:Current_MUAC': dataValue('new[0].Current_MUAC__c')(state),
                    'n0:Measles_6': dataValue('new[0].Measles_6__c')(state),
                    'n0:Measles_9': dataValue('new[0].Measles_9__c')(state),
                    'n0:LMP': dataValue('new[0].LMP__c')(state),
                    'n0:EDD': dataValue('new[0].EDD__c')(state),
                    'n0:Measles_18': dataValue('new[0].Measles_18__c')(state),
                    'n0:Pregnant': () => {
                      if (dataValue('new[0].Pregnant__c')(state) === true) {
                        return 'Yes';
                      }
                    },
                    'n0:ART': dataValue('new[0].Currently_on_ART_s__c')(state),
                    'n0:ARVs': dataValue('new[0].ART_Regimen__c')(state),
                    'n0:Active_in_Support_Group': dataValue(
                      'new[0].Active_in_Support_Group__c'
                    )(state),
                    'n0:Client_Program': () => {
                      var program = '';
                      if (
                        dataValue('new[0].Active_in_Thrive_Thru_5__c')(state) == 'Yes' ||
                        dataValue('new[0].Active_TT5_Mother__c')(state) == 'Yes'
                      ) {
                        if (dataValue('new[0].Active_in_HAWI__c')(state) == 'Yes') {
                          program = 'Both';
                        } else {
                          program = 'Thrive_Through_5';
                        }
                      } else {
                        if (dataValue('new[0].Active_in_HAWI__c')(state) == 'Yes') {
                          program = 'HAWI';
                        }
                      }
                      return program;
                    },
                    'n0:Currently_on_family_planning': dataValue(
                      'new[0].Family_Planning__c'
                    )(state),
                    'n0:DOB': dataValue('new[0].Date_of_Birth__c')(state),
                    'n0:Education_Level': () => {
                      if (dataValue('new[0].Education_Level__c')(state) !== undefined) {
                        return dataValue('new[0].Education_Level__c')(state)
                          .toString()
                          .replace(/ /g, '_');
                      }
                    },
                    'n0:Ever_on_Family_Planning': dataValue(
                      'new[0].Ever_on_Family_Planning__c'
                    )(state),
                    'n0:Gender': dataValue('new[0].Gender__c')(state),
                    'n0:Gravida': dataValue('new[0].Gravida__c')(state),
                    'n0:Active_in_TT5': dataValue('new[0].Active_in_Thrive_Thru_5__c')(
                      state
                    ),
                    'n0:Active_in_HAWI': dataValue('new[0].Active_in_HAWI__c')(state),
                    'n0:Marital_Status': dataValue('new[0].Marital_Status__c')(state),
                    'n0:Exclusive_Breastfeeding': dataValue(
                      'new[0].Exclusive_Breastfeeding__c'
                    )(state),
                    'n0:Next_of_Kin': dataValue('new[0].Next_of_Kin__c')(state),
                    'n0:Next_of_Kin_Phone': dataValue('new[0].Next_of_Kin_Phone__c')(
                      state
                    ),
                    'n0:Parity': dataValue('new[0].Parity__c')(state),

                    'n0:Phone_Number': dataValue('new[0].Telephone__c')(state),
                    'n0:Preferred_Care_Facility': dataValue(
                      'new[0].Preferred_Care_Facility__c'
                    )(state),
                    'n0:Record_Type': () => {
                      return dataValue('new[0].Record_Type_Name__c')(state)
                        .toString()
                        .replace(/ /g, '_');
                    },
                    'n0:Unique_Patient_Code': dataValue('new[0].Unique_Patient_Code__c')(
                      state
                    ),
                  },
                  'n0:index': {
                    'n0:parent': {
                      '@': {
                        case_type: 'Household',
                      },
                      '#': dataValue('new[0].CommCare_HH_Code__c')(state),
                    },
                  },
                };
              }),

              field('n2:meta', state => {
                return {
                  '@': { 'xmlns:n2': 'http://openrosa.org/jr/xforms' },
                  'n2:deviceID': 'Formplayer',
                  'n2:timeStart': new Date().toISOString(),
                  'n2:timeEnd': new Date().toISOString(),
                  'n2:userID': 'e298884bfb6ee2d2b38591a6e8ae0228',
                };
              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Update-Person-in-CommCare-V2:
        source_trigger: webhook
        target_job: Update-Person-in-CommCare-V2
        condition_type: js_expression
        condition_label: SF Update Person
        condition_expression: |
          state.data.label == "Update Person"
        enabled: false
  "x-[archive]-Workflow-Nutrition-Survey-Submissions":
    name: 'x [archive] Workflow Nutrition Survey Submissions'
    jobs:
      Nutrition-Survey-Submissions:
        name: Nutrition Survey Submissions
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          upsert(
            'Service__c',
            'Service_UID__c',
            fields(
              field('Service_UID__c', state => {
                const id = dataValue('form.subcase_0.case.@case_id')(state);
                const date = dataValue('$.form.Date')(state);
                return id + date + 'Nutrition-Screening';
              }),
              field('Source__c', 1),
              field('Catchment__c', 'a002400000pAcOe'),
              field('Date__c', dataValue('$.form.Date')),
              field('Type_of_Service__c', 'CHW Mobile Survey'),
              field('Household_CHW__c', dataValue('$.form.Household_CHW')),
              field('RecordTypeID', '01224000000YAuK'),
              field('Reason_for_Service__c', 'Nutrition Screening'),
              relationship(
                'Person__r',
                'CommCare_ID__c',
                dataValue('$.form.case.@case_id')
              ),
              field(
                'Primary_Caregiver__c',
                dataValue('$.form.Child_Information.Primary_Caregiver')
              ),
              field('Height__c', dataValue('$.form.Child_Information.body_specs.Height')),
              field('Weight__c', dataValue('$.form.Child_Information.body_specs.Weight')),
              field('MUAC__c', dataValue('$.form.Child_Information.body_specs.MUAC')),
              field('Nutrition_Status__c', state => {
                var status = '';
                if (
                  dataValue('$.form.Child_Information.malnourished.Nutrition_Status')(
                    state
                  ) == 'normal'
                ) {
                  status = 'Normal';
                } else if (
                  dataValue('$.form.Child_Information.malnourished.Nutrition_Status')(
                    state
                  ) == 'moderate'
                ) {
                  status = 'Moderately Malnourished';
                } else if (
                  dataValue('$.form.Child_Information.malnourished.Nutrition_Status')(
                    state
                  ) == 'severe'
                ) {
                  status = 'Severely Malnourished';
                }
                return status;
              }),
              field(
                'Ever_been_breastfed__c',
                dataValue('$.form.Child_Information.infant_diet.ever_been_breastfed')
              ),
              field(
                'Age_at_which_breastfed__c',
                dataValue('$.form.Child_Information.infant_diet.age_at_which_breastfed')
              ),
              field(
                'X24_Hours_Breastfed__c',
                dataValue('$.form.Child_Information.infant_diet.how_many_times_24_hours')
              ),
              field(
                'Formula_Milk__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_formula')
              ),
              field(
                'Water__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_water')
              ),
              field(
                'Glucose__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_glucose')
              ),
              field(
                'Animal_Milk__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_animal_milk')
              ),
              field(
                'Juice__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_juice')
              ),
              field(
                'Sweetened_Drinks__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_sweetened_drinks')
              ),
              field(
                'Honey__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_honey')
              ),
              field(
                'Sugar__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_sugar')
              ),
              field(
                'Clear_Soup__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_clear_soup')
              ),
              field(
                'Grains__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_grains')
              ),
              field(
                'Yellow_Flesh__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_yellow_flesh')
              ),
              field(
                'Roots__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_roots')
              ),
              field(
                'Leafy_Vegetables__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_leafy_veg')
              ),
              field(
                'Fruits_or_Vegetables__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_other_fruit_veg')
              ),
              field(
                'Meat__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_meat')
              ),
              field(
                'Organ_Meat__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_organ_meat')
              ),
              field(
                'Eggs__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_eggs')
              ),
              field(
                'Dried_Silver_Fish__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_silver_fish')
              ),
              field(
                'Seafood__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_other_seafood')
              ),
              field(
                'Dairy__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_milk_products')
              ),
              field(
                'Fats__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_fats')
              ),
              field(
                'Sugary_Foods__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_sugary_foods')
              ),
              field(
                'Insects__c',
                dataValue('$.form.Child_Information.infant_diet.has_had_insects')
              )
            )
          );

          alterState(state => {
            if (
              dataValue('$.form.Child_Information.malnourished.Follow-Up_Required')(
                state
              ) === 'Yes'
            ) {
              return upsert(
                'Service__c',
                'Service_UID__c',
                fields(
                  field('Service_UID__c', state => {
                    const id = dataValue('form.subcase_0.case.@case_id')(state);
                    const date = dataValue('$.form.Date')(state);
                    return id + date + 'Nutrition-Referral';
                  }),
                  field('Source__c', 1),
                  field('Catchment__c', 'a002400000pAcOe'),
                  field('Date__c', dataValue('$.form.Date')),
                  field('Type_of_Service__c', 'CHW Mobile Survey'),
                  field('Household_CHW__c', dataValue('$.form.Household_CHW')),
                  field('RecordTypeID', '01224000000kOto'),
                  field('Referred__c', 1),
                  field(
                    'Follow_Up_By_Date__c',
                    dataValue('$.form.Child_Information.malnourished.Follow-Up_By_Date')
                  ),
                  field('Reason_for_Service__c', 'Referral'),
                  field('Open_Case__c', 1),
                  field('CommCare_Code__c', dataValue('form.subcase_0.case.@case_id')),
                  field(
                    'Purpose_of_Referral__c',
                    dataValue('form.Child_Information.malnourished.Purpose_of_Referral')
                  ),
                  relationship(
                    'Person__r',
                    'CommCare_ID__c',
                    dataValue('$.form.case.@case_id')
                  )
                )
              )(state);
            }

            return state;
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Nutrition-Survey-Submissions:
        source_trigger: webhook
        target_job: Nutrition-Survey-Submissions
        condition_type: js_expression
        condition_label: CommCare Nutrition Survey Update Person
        condition_expression: |
          state.data.form["@name"] == "Nutrition Survey" && state.data.metadata.username != "test.2021"
        enabled: false
  "x-[archive]-Workflow-Q3-2022-Upsert-Household-&-Household-Visit-in-SF":
    name: 'x [archive] Workflow Q3 2022 Upsert Household & Household Visit in SF'
    jobs:
      Q3-2022-Upsert-Household-and-Household-Visit-in-SF:
        name: Q3 2022 Upsert Household and Household Visit in SF
        adaptor: '@openfn/language-salesforce@latest'
        credential: null
        body: |
          query(
            `SELECT Id, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c FROM Location__c WHERE CommCare_User_ID__c = '${dataValue(
              'properties.owner_id'
            )(state)}'`
          );

          fn(state => { console.log("query1 done"); return state; });
          fn(state => {
            return new Promise((resolve, reject) => {
              setTimeout(() => {
                console.log('4 second cooldown finished.');
                resolve(state);
              }, 4000);
            });
          });

          fn(state => ({
            ...state,
            data: {
              ...state.data,
              villageNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Id
                  : undefined,
              areaNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Parent_Geographic_Area__c
                  : undefined,
              catchmentNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? (state.references[0].records[0].Parent_Geographic_Area__r 
                    ? state.references[0].records[0].Parent_Geographic_Area__r.Parent_Geographic_Area__c
                    : undefined)
                  : undefined,
            },
          }));

          upsertIf(
             state.data.properties.commcare_username !== 'openfn.test' &&
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' ,
            'Household__c',
            'CommCare_Code__c',
            fields(
              field('CommCare_Username__c', dataValue('properties.commcare_username')),
              field('MOH_household_code__c', dataValue('properties.moh_code')),
             field('CommCare_Code__c', dataValue('case_id')),
              field('Source__c', true),
              //field('Household_CHW__c', 'a030Q00000A0jeYQAR'), //sandbox hardcoded mapping
           field('Household_CHW__c', state => {
                var chw = dataValue('properties.CHW_ID')(state);
                return chw === 'a030800001zQrk'
                  ? 'a030800001zQrk5'
                  : chw
                  ? chw
                  : undefined;
              }),
             //TODO: Prod mapping to add back before go-live
              field('Catchment__c', dataValue('catchmentNewId')),
              field('Area__c', dataValue('areaNewId')),
              field('Village__c', dataValue('villageNewId')),
              field('Household_Village__c', dataValue('properties.village')),
            //   relationship('Catchment__r', 'Name', state => {
            //     var catchment =
            //       state.data.properties.catchement ||
            //       state.data.properties.catchment_name;
            //     return catchment === '' || catchment === undefined
            //       ? 'Unknown Location'
            //       : catchment;
            //   }), // check
            //   field('Area__c', state => {
            //    // var area = dataValue('properties.Area_Name')(state);
            //     return area === '' || area === undefined ? 'a000Q00000Egmu4' : area;
            //   }),  // Commented out because it was causing a job error 
            //   field('Household_village__c', dataValue('properties.village')),//case property, but not in message
            
            //   field('Village__c',dataValue('properties.village_name')), //lookup
              field('Deaths_in_the_last_6_months__c', state => {
                var death = dataValue(
                  'properties.deaths_in_past_6_months'
                )(state);
                return death > 0 ? 'Yes' : 'No';
              }),
              field('Access_to_safe_water__c',dataValue('properties.Safe_Water')),//not coming through
              field('Treats_Drinking_Water__c',dataValue('properties.Treats_Drinking_Water')),//not coming through
              field('Tippy_Tap__c',dataValue('properties.Active_Handwashing_Station')),//not coming through
              field('Pit_Latrine__c',dataValue('properties.Functional_Latrine')),//not coming through
              field('Rubbish_Pit__c',dataValue('properties.Rubbish_Pit')),//not coming through
              field('Drying_Rack__c',dataValue('properties.Drying_Rack')),//not coming through
              field('Kitchen_Garden__c',dataValue('properties.Kitchen_Garden')),//not coming through
              field('Cookstove__c',dataValue('properties.Improved_Cooking_Method')),//not coming through
              field('Clothe__c',dataValue('properties.Clothesline')),//not coming through
              field('WASH_Trained__c',dataValue('properties.WASH_Trained')),//not coming through
              field('Uses_ITNs__c',dataValue('properties.ITNs')),
               field(
                'Has_muac_tape__c',
                dataValue('properties.family_muac_tape_available')
              ),
              //field('Total_household_people__c',dataValue('properties.Total_Number_of_Members')), //not coming through
              field('Health_insurance__c', dataValue('properties.health_insurace_cover')),
              field('Health_insurance_active_status__c',dataValue('properties.healthinsurance_active')),
              field('Health_insurance_type__c', state => {
                var status = dataValue('properties.health_insurance')(state);
                return status && status === 'other_please_specify_if_active'
                  ? 'Other'
                  : status === 'nhif'
                  ? 'NHIF'
                  : status === 'Linda_mama' || 'linda_mama'
                  ? 'Linda mama'
                  : status;
              }),
              field('Other_Health_Insurance__c',dataValue('properties.if_other_please_specify')),
              field('Work_with_TBA__c', dataValue('properties.tba')),
              field('TBA_name__c', dataValue('properties.which_tba')),
              field('Last_Modified_Date_CommCare__c', dataValue('server_date_modified')),//Need a case property),
              field('Active_Household__c', state => {
                var status = dataValue('properties.Household_Status')(state);
                return status && status === 'No'
                  ? false
                  : status === 'Yes'
                  ? true
                  : status;
              }),
              // relationship('Head_of_Household__r', 'CommCare_ID__c', dataValue('properties.head_of_household_case_id')),
               field('Inactive_Reason__c', state => {
                var reason = dataValue('properties.Reason_for_Inactive')(state);
                return reason ? reason.toString().replace(/_/g, ' ') : null;
              }),
               field(
                'Active_in_Nutrition_Program__c',
                dataValue(
                  'properties.enrolled_in_a_lwala_nutrition_program'
                )
              ),
              field(
                'lwala_nutrition_program_enrollment_date__c',
                dataValue(
                  'properties.lwala_nutrition_program_enrollment_date'
                )
              ),
              field(
                'Trained_in_gardening__c',
                dataValue('properties.household_trained_on_gardening')
              ),
              field(
                'household_trained_on_gardening_date__c',
                dataValue(
                  'properties.when_was_the_household_trained_on_gardening'
                )
              ),
              field(
                'Seed_Input_Support__c',
                dataValue('properties.household_provided_with_seed_input_support'
                )
              ),
              field(
                'household_provided_with_seed_input_suppo__c',
                dataValue(
                  'properties.when_was_the_household_provided_with_seed_input_support'
                )
              ),
              field(
                'MIYCN_Trained__c',
                dataValue('properties.household_trained_on_MIYCN')
              ),
              // not in message:
              // field(
              //   'Kitchen_Garden__c',
              //   dataValue('properties.nutrition_enrollment.household_has_kitchen_garden')
              // ),

              //field('Case_Closed_Date__c', state => {
              //  var closed = dataValue('date_closed')(state); 
              //  var date =  dataValue('server_date_modified')(state); 
              //  return closed && closed == true ? date : undefined; 
             // })
              )
          );

          fn(state => { console.log("upsertIf1 done"); return state; });
          fn(state => {
            return new Promise((resolve, reject) => {
              setTimeout(() => {
                console.log('4 second cooldown finished.');
                resolve(state);
              }, 4000);
            });
          });

          //Household Visit
          query(
            `SELECT Id, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c FROM Location__c WHERE CommCare_User_ID__c = '${dataValue(
              'properties.owner_id'
            )(state)}'`
          );

          fn(state => { console.log("query2 done"); return state; });
          fn(state => {
            return new Promise((resolve, reject) => {
              setTimeout(() => {
                console.log('4 second cooldown finished.');
                resolve(state);
              }, 4000);
            });
          });

          fn(state => ({
            ...state,
            data: {
              ...state.data,
              catchmentNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? (state.references[0].records[0].Parent_Geographic_Area__r 
                    ? state.references[0].records[0].Parent_Geographic_Area__r.Parent_Geographic_Area__c
                    : undefined)
                  : undefined,
            },
          }));

          fn(state => {
          /*  const deaths = state.data.form.household_deaths
              ? state.data.form.household_deaths.deaths
              : '';
            if (deaths !== '' && !Array.isArray(deaths)) {
              state.data.form.household_deaths.deaths = [deaths];
            }*/

            const supervisorMap = {
              community_health_nurse: 'Community Health Nurse',
              chw_supervisor: 'CHW Supervisor',
              chewschas: 'CHEWs/CHAs',
              other: 'Other',
              none: 'None',
            };

            const insuranceMap = {
              nhif: 'NHIF',
              Linda_mama: 'Linda mama',
              other_please_specify_if_active: 'Other',
              none: 'None',
            };

            return { ...state, supervisorMap, insuranceMap };
          });

          upsertIf(
            // state.data.properties.username !== 'openfn.test' &&
              state.data.properties.username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' ,
            'Visit__c',
            'CommCare_Visit_ID__c',
            fields(
              field('CommCare_Username__c', dataValue('properties.commcare_username')),//
              // field('CommCare_Visit_ID__c', dataValue('id')),
              field('CommCare_Visit_ID__c', state => {
                var case_id = dataValue('case_id')(state);
                var submitted = dataValue('properties.last_form_opened_date_and_time')(state);
                return case_id + '_' +  submitted;
              }),
              // field('Household_CHW__c', 'a030Q00000A0jeY'),
              // field('Catchment__c', dataValue('a000Q00000Egmtk')),
              field('Catchment__c', dataValue('catchmentNewId')),
              // field('Household__c','a010Q00000BL6lT'),
              // field('Household__c', dataValue('form.case.@case_id')),
              relationship(
                    'Household__r',
                    'CommCare_Code__c',
                    dataValue('case_id')),
              field('Date__c',dataValue('properties.Date')),
              field('Form_Submitted__c', dataValue('properties.last_form_opened_name')),

              //field('MOH_household_code__c', state => {
              //  var moh = dataValue('form.Household_Information.moh_code')(state);
              //  var mohLinked = dataValue('form.MOH_household_code_linked')(state);
              // return moh ? moh : mohLinked && mohLinked !== '' ? mohLinked : undefined;
             // }),
              field('Active_Household__c', state => {
                var status = dataValue('properties.Household_Status')(state);
                return status && status === 'No'
                  ? false
                  : status === 'Yes'
                  ? true
                  : status;
              }),
              //field('Inactive_Reason__c', state => {
              //  var reason = dataValue('form.Reason_for_Inactive')(state);
              //  return reason ? reason.toString().replace(/_/g, ' ') : null;
              //}),
              //field('Source__c', 1),//
              //relationship(
              //  'Household_CHW__r', 
              //  'CommCare_ID__c', 
              //  dataValue('form.sfid')),TO UPDATE IN PRODUCTION
             // field('Household_village__c', dataValue('form.village')),//
              //New Nutrition Field (MOTG)
              field(
                'Active_in_Nutrition_Program__c',
                dataValue(
                  'properties.enrolled_in_a_lwala_nutrition_program'
                )
              ),
              field(
                'lwala_nutrition_program_enrollment_date__c',
                dataValue(
                  'properties.lwala_nutrition_program_enrollment_date'
                )
              ),
              field(
                'Trained_in_gardening__c',
                dataValue('properties.household_trained_on_gardening')
              ),
              field(
                'household_trained_on_gardening_date__c',
                dataValue(
                  'properties.when_was_the_household_trained_on_gardening'
                )
              ),
              field(
                'Seed_Input_Support__c',
                dataValue(
                  'properties.household_provided_with_seed_input_support'
                )
              ),
              field(
                'household_provided_with_seed_input_suppo__c',
                dataValue(
                  'properties.when_was_the_household_provided_with_seed_input_support'
                )
              ),
              field(
                'MIYCN_Trained__c',
                dataValue('properties.household_trained_on_MIYCN')
              ),
              field(
                'Kitchen_Garden__c',
                dataValue('properties.Kitchen_Garden')
              ),

              field(
                'Access_to_safe_water__c',
                dataValue('properties.Safe_Water')
              ),
              field(
                'Treats_Drinking_Water__c',
                dataValue('properties.Treats_Drinking_Water')
              ),
              field(
                'Tippy_Tap__c',
                dataValue('properties.Active_Handwashing_Station')
              ),
              field(
                'Pit_Latrine__c',
                dataValue('properties.Functional_Latrine')
              ),
              field(
                'Rubbish_Pit__c',
                dataValue('properties.Rubbish_Pit')
              ),
              field(
                'Drying_Rack__c',
                dataValue('properties.Drying_Rack')
              ),
              field(
                'Kitchen_Garden__c',
                dataValue('properties.Kitchen_Garden')
              ),
              field(
                'Cookstove__c',
                dataValue('properties.Improved_Cooking_Method')
              ),
              field('Clothe__c', dataValue('properties.Clothesline')),
              field(
                'WASH_Trained__c',
                dataValue('properties.WASH_Trained')
              ),
              field(
                'Has_muac_tape__c',
                dataValue('properties.family_muac_tape_available')
              ),
              field('Uses_ITNs__c', dataValue('properties.ITNs')),
              field('Supervisor_Visit__c', state =>
                state.data.properties.supervisor_visit
                  ? state.supervisorMap[state.data.properties.supervisor_visit]
                  : null
              ),
              field('Health_insurance__c', dataValue('properties.health_insurace_cover')),
              field(
                'Health_insurance_active_status__c',
                dataValue('properties.healthinsurance_active')
              ),
              field('Health_insurance_type__c', state => {
                var status = dataValue('properties.health_insurance')(state);
                var value =
                  status && status !== ''
                    ? status
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.insuranceMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field(
                'Other_Health_Insurance__c',
                dataValue('properties.if_other_please_specify')
              ),
              //field('Last_Modified_Date_CommCare__c', dataValue('server_modified_on')),
              field('CommCare_Form_Opened__c', state=> {
                var form_opened = dataValue('properties.last_form_opened_date_and_time')(state);
                var value1 = form_opened.split('-').slice(0, 2).join('-');
                var value2 = form_opened.split('-').slice(2).join('-');
                var formattedValue = [value1, value2].join(' ');
                return new Date(formattedValue).toISOString();
              }),
              field('Case_Closed_Date__c', state => {
                var closed = dataValue('date_closed')(state);
                var date = dataValue('server_modified_on')(state);
                return closed && closed == true ? date : undefined;
              })
            )
          );

          fn(state => { console.log("upsertIf2 done"); return state; });
          fn(state => {
            return new Promise((resolve, reject) => {
              setTimeout(() => {
                console.log('Final 4 second cooldown finished.');
                resolve(state);
              }, 4000);
            });
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Q3-2022-Upsert-Household-and-Household-Visit-in-SF:
        source_trigger: webhook
        target_job: Q3-2022-Upsert-Household-and-Household-Visit-in-SF
        condition_type: js_expression
        condition_label: Household
        condition_expression: |
          state.data.properties["app_release"] == "Q2-2022" && state.data.properties["case_type"] == "Household" && state.data.properties["test_user"] != "Yes"
        enabled: false
  "x-[archive]-Workflow-Register-OSG-Mentoring-Attendance":
    name: 'x [archive] Workflow Register OSG Mentoring Attendance'
    jobs:
      Register-OSG-Mentoring-Attendance:
        name: Register OSG Mentoring Attendance
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          create(
            'Activity__c',
            fields(
              field('Date__c', dataValue('form.info.date')),
              field('Catchment__c', 'a002400000pAcOe'),
              field('Module_Type__c', state => {
                var str1 = dataValue('form.module_number')(state)
                  .toString()
                  .replace(/_/g, ' ');
                return str1;
              }),
              field('Facilitator__c', dataValue('form.info.Facilitator')),
              field('Name', state => {
                var str1 = dataValue('form.module_name')(state)
                  .toString()
                  .replace(/_/g, ' ');
                return str1;
              }),
              field('Group__c', dataValue('form.sfid')),
              field('Program__c', dataValue('form.program')),
              field('CommCare_ID__c', dataValue('metadata.instanceID'))
            )
          );

          alterState(state => {
            var attendees = dataValue('form.attendees')(state).split(' ');
            for (i = 0; i < attendees.length; i++) {
              create(
                'Attendance__c',
                fields(
                  field('Activity__c', lastReferenceValue('id')),
                  field('Date__c', dataValue('form.info.date')),
                  relationship('Person__r', 'CommCare_ID__c', attendees[i])
                )
              )(state);
            }
            return state;
          });
          /*create("Household_Attendance__c",fields(
              field("Activity__c",lastReferenceValue("id")),
              field("Date__c",dataValue("form.info.date")),
              relationship("Household__c","Name","01465")
          ))*/

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Register-OSG-Mentoring-Attendance:
        source_trigger: webhook
        target_job: Register-OSG-Mentoring-Attendance
        condition_type: js_expression
        condition_label: Register OSG Mentoring Attendance
        condition_expression: |
          state.data.form["@name"] == "Register OSG Mentoring Session"
        enabled: false
  "x-[archive]-Workflow-Register-Training":
    name: 'x [archive] Workflow Register Training'
    jobs:
      Register-Training:
        name: Register Training
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          create(
            'Activity__c',
            fields(
              field('Date__c', dataValue('form.info.date')),
              field('Catchment__c', 'a002400000pAcOe'),
              field('Module_Type__c', state => {
                var str1 = dataValue('form.info.module_number')(state)
                  .toString()
                  .replace(/_/g, ' ');
                return str1;
              }),
              field('Facilitator__c', dataValue('form.info.Facilitator')),
              field('Name', state => {
                var str1 = dataValue('form.info.name')(state)
                  .toString()
                  .replace(/_/g, ' ');
                return str1;
              }),
              field('Group__c', dataValue('form.sfid')),
              field('Program__c', dataValue('form.program')),
              field('CommCare_ID__c', dataValue('metadata.instanceID'))
            )
          );

          alterState(state => {
            var attendees = dataValue('form.attendees')(state).split(' ');
            for (i = 0; i < attendees.length; i++) {
              create(
                'Household_Attendance__c',
                fields(
                  field('Activity__c', lastReferenceValue('id')),
                  field('Date__c', dataValue('form.info.date')),
                  relationship('Household__r', 'CommCare_Code__c', attendees[i])
                )
              )(state);
            }
            return state;
          });
          /*create("Household_Attendance__c",fields(
              field("Activity__c",lastReferenceValue("id")),
              field("Date__c",dataValue("form.info.date")),
              relationship("Household__c","Name","01465")
          ))*/

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Register-Training:
        source_trigger: webhook
        target_job: Register-Training
        condition_type: js_expression
        condition_label: Register Training
        condition_expression: |
          state.data.form["@name"] == "Register Training"
        enabled: false
  "x-[archive]-Workflow-TEST-Create-HH-in-Sandbox":
    name: 'x [archive] Workflow TEST Create HH in Sandbox'
    jobs:
      TEST-Create-HH-in-Sandbox:
        name: TEST Create HH in Sandbox
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Alters CommCare arrays so that they are formatted as arrays instead of just single values.
          alterState(state => {
            const person = state.data.form.Person;
            if (!Array.isArray(person)) {
              state.data.form.Person = [person];
            }
            return state;
          });

          upsert(
            'Household__c',
            'CommCare_Code__c',
            fields(
              field('Name', '00000'),
              //state =>{
              //  return dataValue('$.form.case.@case_id')(state).substring(0,5); //<- Will, this change we made was causing errors? what does the '0000' do?
             //  }),
              field('Catchment__c', state => {
                if (dataValue('form.catchment')(state) == 'East Kamagambo') {
                  return 'a002400000pAcQt';
                } else {
                  return 'a002400000pAcOe';
                }
              }),
              field('CommCare_Code__c', dataValue('$.form.case.@case_id')),
              field('Household_CHW__c', dataValue('$.form.CHW_ID')),
              field('Area__c', dataValue('$.form.area')),
              field('Household_Head_No_Program__c', dataValue('form.No_Program_Head')),
              field(
                'Treats_Drinking_Water__c',
                dataValue('$.form.Household_Information.Treats_Drinking_Water')
              ),
              field(
                'WASH_Trained__c',
                dataValue('$.form.Household_Information.WASH_Trained')
              ),
              field(
                'Rubbish_Pit__c',
                dataValue('$.form.Household_Information.Rubbish_Pit')
              ),
              field(
                'Kitchen_Garden__c',
                dataValue('$.form.Household_Information.Kitchen_Garden')
              ),
              field(
                'Cookstove__c',
                dataValue('$.form.Household_Information.Improved_Cooking_Method')
              ),
              field('Uses_ITNs__c', dataValue('$.form.Household_Information.ITNs')),
              field(
                'Pit_Latrine__c',
                dataValue('$.form.Household_Information.Functional_Latrine')
              ),
              field('Clothe__c', dataValue('$.form.Household_Information.Clothesline')),
              field(
                'Drying_Rack__c',
                dataValue('$.form.Household_Information.Drying_Rack')
              ),
              field(
                'Tippy_Tap__c',
                dataValue('$.form.Household_Information.Active_Handwashing_Station')
              ),
              field(
                'Number_of_Over_5_Females__c',
                dataValue('$.form.Household_Information.Number_of_over_5_Females')
              ),
              field(
                'Number_of_Under_5_Males__c',
                dataValue('$.form.Household_Information.Number_of_Under_5_Males')
              ),
              field(
                'Number_of_Under_5_Females__c',
                dataValue('$.form.Household_Information.Number_of_Under_5_Females')
              ),
              field(
                'Number_of_Over_5_Males__c',
                dataValue('$.form.Household_Information.Number_of_Over_5_Males')
              ),
              field('Source__c', true)
            )
          );

          alterState(state => {
            if (dataValue('$.form.Person[0].Source')(state) == 1) {
              return beta.each(
                dataPath('$.form.Person[*]'),
                upsert(
                  'Person__c',
                  'CommCare_ID__c',
                  fields(
                    field('Name', state => {
                      var name1 = dataValue('Basic_Information.Person_Name')(state);
                      var name2 = name1.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                      });
                      return name2;
                    }),
                    relationship('RecordType', 'Name', state => {
                      return dataValue('Basic_Information.Record_Type')(state)
                        .toString()
                        .replace(/_/g, ' ');
                    }),
                    field('Catchment__c', state => {
                      if (dataValue('catchment')(state) == 'East Kamagambo') {
                        return 'a002400000pAcQt';
                      } else {
                        return 'a002400000pAcOe';
                      }
                    }),
                    field('HAWI_Registrant__c', state => {
                      if (dataValue('Basic_Information.HAWI_Status')(state) == 'Yes') {
                        return 'Yes';
                      }
                    }),
                    field('Active_in_HAWI__c', state => {
                      if (dataValue('Basic_Information.HAWI_Status')(state) == 'Yes') {
                        return 'Yes';
                      }
                    }),
                    field('Active_in_Thrive_Thru_5__c', state => {
                      if (
                        dataValue('Basic_Information.Record_Type')(state)
                          .toString()
                          .replace(/_/g, ' ') == 'Child' &&
                        dataValue('Basic_Information.TT5_Status')(state) == 'Yes'
                      ) {
                        return 'Yes';
                      }
                    }),
                    field('Thrive_Thru_5_Registrant__c', state => {
                      if (
                        dataValue('Basic_Information.Record_Type')(state)
                          .toString()
                          .replace(/_/g, ' ') == 'Child' &&
                        dataValue('Basic_Information.TT5_Status')(state) == 'Yes'
                      ) {
                        return 'Yes';
                      }
                    }),
                    field('Active_TT5_Mother__c', state => {
                      if (
                        dataValue('Basic_Information.Record_Type')(state)
                          .toString()
                          .replace(/_/g, ' ') == 'Female Adult' &&
                        dataValue('Basic_Information.TT5_Status')(state) == 'Yes'
                      ) {
                        return 'Yes';
                      }
                    }),
                    field('TT5_Mother_Registrant__c', state => {
                      if (
                        dataValue('Basic_Information.Record_Type')(state)
                          .toString()
                          .replace(/_/g, ' ') == 'Female Adult' &&
                        dataValue('Basic_Information.TT5_Status')(state) == 'Yes'
                      ) {
                        return 'Yes';
                      }
                    }),
                    field('Enrollment_Date__c', state => {
                      if (dataValue('Basic_Information.TT5_Status')(state) == 'Yes') {
                        return dataValue('case.@date_modified')(state);
                      }
                    }),
                    field('HAWI_Enrollment_Date__c', state => {
                      if (dataValue('Basic_Information.HAWI_Status')(state) == 'Yes') {
                        return dataValue('case.@date_modified')(state);
                      }
                    }),
                    field('LMP__c', dataValue('TT5.Child_Information.ANCs.LMP')),
                    field('Source__c', true),
                    field('CommCare_ID__c', dataValue('case.@case_id')),
                    field('Date_of_Birth__c', dataValue('Basic_Information.DOB')),
                    field(
                      'Exclusive_Breastfeeding__c',
                      dataValue(
                        'TT5.Child_Information.Exclusive_Breastfeeding.Exclusive_Breastfeeding'
                      )
                    ),
                    field('Gender__c', dataValue('Basic_Information.Final_Gender')),
                    field(
                      'Marital_Status__c',
                      dataValue('Basic_Information.Marital_Status')
                    ),
                    field(
                      'Telephone__c',
                      dataValue('Basic_Information.Contact_Info.contact_phone_number')
                    ),
                    field(
                      'Next_of_Kin__c',
                      dataValue('Basic_Information.Contact_Info.Next_of_Kin')
                    ),
                    field(
                      'Next_of_Kin_Phone__c',
                      dataValue('Basic_Information.Contact_Info.next_of_kin_phone')
                    ),
                    field('Client_Status__c', 'Active'),
                    field(
                      'Ever_on_Family_Planning__c',
                      dataValue('Basic_Information.Ever_on_Family_Planning')
                    ),
                    field(
                      'Family_Planning__c',
                      dataValue('Basic_Information.Currently_on_family_planning')
                    ),
                    field(
                      'Family_Planning_Method__c',
                      dataValue('Basic_Information.Family_Planning_Method')
                    ),
                    field('ANC_1__c', dataValue('TT5.Child_Information.ANCs.ANC_1')),
                    field('ANC_2__c', dataValue('TT5.Child_Information.ANCs.ANC_2')),
                    field('ANC_3__c', dataValue('TT5.Child_Information.ANCs.ANC_3')),
                    field('ANC_4__c', dataValue('TT5.Child_Information.ANCs.ANC_4')),
                    field('ANC_5__c', dataValue('TT5.Child_Information.ANCs.ANC_5')),
                    field('BCG__c', dataValue('TT5.Child_Information.Immunizations.BCG')),
                    field(
                      'OPV_0__c',
                      dataValue('TT5.Child_Information.Immunizations.OPV_0')
                    ),
                    field(
                      'OPV_1__c',
                      dataValue('TT5.Child_Information.Immunizations.OPV_PCV_Penta_1')
                    ),
                    field(
                      'OPV_2__c',
                      dataValue('TT5.Child_Information.Immunizations.OPV_PCV_Penta_2')
                    ),
                    field(
                      'OPV_3__c',
                      dataValue('TT5.Child_Information.Immunizations.OPV_PCV_Penta_3')
                    ),
                    field(
                      'Measles_6__c',
                      dataValue('TT5.Child_Information.Immunizations.Measles_6')
                    ),
                    field(
                      'Measles_9__c',
                      dataValue('TT5.Child_Information.Immunizations.Measles_9')
                    ),
                    field(
                      'Measles_18__c',
                      dataValue('TT5.Child_Information.Immunizations.Measles_18')
                    ),
                    field('Pregnant__c', state => {
                      if (dataValue('TT5.Mother_Information.Pregnant')(state) == 'Yes')
                        return 1;
                    }),
                    field('Education_Level__c', state => {
                      if (
                        dataValue('Basic_Information.Record_Type')(state) !== 'Child' &&
                        dataValue('Basic_Information.Record_Type')(state) !== 'Youth'
                      ) {
                        return dataValue('Basic_Information.Education_Level')(state)
                          .toString()
                          .replace(/_/g, ' ');
                      }
                    }),
                    field(
                      'Gravida__c',
                      dataValue('TT5.Mother_Information.Pregnancy_Information.Gravida')
                    ),
                    field(
                      'Parity__c',
                      dataValue('TT5.Mother_Information.Pregnancy_Information.Parity')
                    ),
                    field(
                      'Unique_Patient_Code__c',
                      dataValue('HAWI.Unique_Patient_Code')
                    ),
                    field(
                      'Active_in_Support_Group__c',
                      dataValue('HAWI.Active_in_Support_Group')
                    ),

                    field('Currently_on_ART_s__c', dataValue('HAWI.ART')),
                    field('ART_Regimen__c', state => {
                      var art = '';
                      var str = dataValue('HAWI.ARVs')(state);
                      if (str !== undefined) {
                        art = str.replace(/ /g, '; ');
                      }
                      return art;
                    }),
                    field('Preferred_Care_Facility__c', state => {
                      var val = '';
                      if (
                        dataValue('HAWI.Preferred_Care_Facility')(state) !== undefined
                      ) {
                        val = dataValue('HAWI.Preferred_Care_Facility')(state)
                          .toString()
                          .replace(/_/g, ' ');
                      }
                      return val;
                    }),
                    field('CommCare_HH_Code__c', dataValue('case.index.parent.#text')),
                    field('Child_Status__c', dataValue('Basic_Information.Child_Status')),
                    field('Place_of_Delivery__c', state => {
                      var val = '';
                      var placeholder = '';
                      if (
                        dataValue(
                          'TT5.Child_Information.Delivery_Information.Skilled_Unskilled'
                        )(state) !== undefined
                      ) {
                        placeholder = dataValue(
                          'TT5.Child_Information.Delivery_Information.Skilled_Unskilled'
                        )(state);
                        if (placeholder == 'Skilled') {
                          val = 'Facility';
                        } else if (placeholder == 'Unskilled') {
                          val = 'Home';
                        }
                      }
                      return val;
                    }),
                    field('Delivery_Facility__c', state => {
                      var val = '';
                      var placeholder = '';
                      if (
                        dataValue(
                          'TT5.Child_Information.Delivery_Information.Birth_Facility'
                        )(state) !== undefined
                      ) {
                        placeholder = dataValue(
                          'TT5.Child_Information.Delivery_Information.Birth_Facility'
                        )(state);
                        val = placeholder.toString().replace(/_/g, ' ');
                      }
                      return val;
                    })
                  )
                )
              )(state);
            }

            return state;
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->TEST-Create-HH-in-Sandbox:
        source_trigger: webhook
        target_job: TEST-Create-HH-in-Sandbox
        condition_type: js_expression
        condition_label: Commcare Create HH
        condition_expression: |
          state.data.form.Source == "1" && state.data.form["@name"] == "Enroll New Household"
        enabled: false
  "x-[archive]-Workflow-Test-Job":
    name: 'x [archive] Workflow Test Job'
    jobs:
      Test-Job:
        name: Test Job
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          // Your job goes here.

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Test-Job:
        source_trigger: webhook
        target_job: Test-Job
        condition_type: js_expression
        condition_label: SF Update HH
        condition_expression: |
          state.data.label == "Update Household"
        enabled: false
  "x-[archive]-Workflow-Test-Service-Upsert":
    name: 'x [archive] Workflow Test Service Upsert'
    jobs:
      Test-Service-Upsert:
        name: Test Service Upsert
        adaptor: '@openfn/language-salesforce@v2.7.4'
        credential: null
        body: |
          upsert('Service__c', 'Service_UID__c', 
            fields(
              relationship('Parent_Service__r',
                  'Service_UID__c',
                  dataValue('indices.parent.case_id')),
              field('Service_UID__c', dataValue('case_id'))
          )); 

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Test-Service-Upsert:
        source_trigger: webhook
        target_job: Test-Service-Upsert
        condition_type: js_expression
        condition_label: Case
        condition_expression: |
          state.data.properties["case_type"] == "Case" && state.data.properties["test_user"] != "Yes"
        enabled: false
  "x-[archive]-Workflow-Update-Household-in-CommCare-V2":
    name: 'x [archive] Workflow Update Household in CommCare V2'
    jobs:
      Update-Household-in-CommCare-V2:
        name: Update Household in CommCare V2
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          submit(
            fields(
              field('@', state => {
                return {
                  'xmlns:jrm': 'http://dev.commcarehq.org/jr/xforms',
                  xmlns: () => {
                    return dataValue('new[0].Catchment__c')(state) == 'a001p000017gpfZAAQ'
                      ? 'http://openrosa.org/formdesigner/7bdbfcc02fd44260837d799d24051449'
                      : 'http://openrosa.org/formdesigner/980c10cdb3b140101225e25c6e8aff48f471b3d';
                  },
                  uiVersion: '1',
                  version: '46',
                  name: 'Update Household',
                };
              }),
              field('Source', 0),
              field('Household_Status', state => {
                var str = '';
                if (dataValue('new[0].Active_Household__c')(state) === false) {
                  str = 'No';
                } else {
                  str = 'Yes';
                }
                return str;
              }),
              field('Run_Code', 'Household_Lwala'),
              field('name', state => {
                var name = dataValue('new[0].Name')(state); 
                var code = dataValue('new[0].Household_Code_Autonumber__c')(state);
                return name.length > 6 ? code : name; 
                //return hh autonumber if name = sf id
              }),
              field('area', dataValue('new[0].Area__c')),

              field('Household_Information', state => {
                return {
                  moh_code: dataValue('new[0].MOH_household_code__c')(state), //NEW
                  Active_Handwashing_Station: dataValue('new[0].Tippy_Tap__c')(state),
                  Drying_Rack: dataValue('new[0].Drying_Rack__c')(state),

                  WASH_Compliant: () => {
                    var ans = '';
                    if (dataValue('new[0].WASH_Compliant__c')(state) === true) {
                      ans = 'Yes';
                    } else {
                      ans = 'No';
                    }
                    return ans;
                  },
                  Functional_Latrine: dataValue('new[0].Pit_Latrine__c')(state),
                  Clothesline: dataValue('new[0].Clothe__c')(state),
                  ITNs: dataValue('new[0].Uses_ITNs__c')(state),
                  Improved_Cooking_Method: dataValue('new[0].Cookstove__c')(state),
                  Kitchen_Garden: dataValue('new[0].Kitchen_Garden__c')(state),
                  Number_of_Over_5_Males: dataValue('new[0].Number_of_Over_5_Males__c')(
                    state
                  ),
                  Number_of_Over_5_Females: dataValue(
                    'new[0].Number_of_Over_5_Females__c'
                  )(state),
                  Number_of_Under_5_Males: dataValue('new[0].Number_of_Under_5_Males__c')(
                    state
                  ),
                  Number_of_Under_5_Females: dataValue(
                    'new[0].Number_of_Under_5_Females__c'
                  )(state),
                  Rubbish_Pit: dataValue('new[0].Rubbish_Pit__c')(state),
                  Treats_Drinking_Water: dataValue('new[0].Treats_Drinking_Water__c')(
                    state
                  ),
                  WASH_Trained: dataValue('new[0].WASH_Trained__c')(state),
                  Total_Under_5: dataValue('new[0].Total_Number_of_Under_5s__c')(state),
                  Total_Males: dataValue('new[0].Total_Number_of_Males__c')(state),
                  Total_Females: dataValue('new[0].Total_Number_of_Females__c')(state),
                  Total_Household_Members: dataValue('new[0].Total_Number_of_Members__c')(
                    state
                  ),
                  Total_Number_of_Members: dataValue('Total_household_people__c')(state), //NEW
                  Total_Over_5: () => {
                    var num = 0;
                    num =
                      dataValue('new[0].Total_Number_of_Members__c')(state) -
                      dataValue('new[0].Total_Number_of_Under_5s__c')(state);
                    return num;
                  },
                };
              }),
              field('n0:case', state => {
                return {
                  '@': {
                    case_id: dataValue('new[0].Commcare_Code__c')(state),
                    date_modified: new Date().toISOString(),
                    user_id: 'e298884bfb6ee2d2b38591a6e8ae0228',
                    'xmlns:n0': 'http://commcarehq.org/case/transaction/v2',
                  },
                  'n0:update': {
                    'n0:case_name': () => {
                      var name = dataValue('new[0].Name')(state); 
                      var code = dataValue('new[0].Household_Code_Autonumber__c')(state);
                      return name.length > 6 ? code : name; 
                      //return hh autonumber if name = sf id
                      },
                    'n0:owner_id': () => {
                      var id = '';
                      if (dataValue('new[0].chw_owner_id__c')(state) === undefined) {
                        id = 'acf8595692c76095eb5afd809c628091';
                      } else {
                        id = dataValue('new[0].chw_owner_id__c')(state);
                      }
                      return id;
                    },
                    'n0:case_type': 'Household',
                    'n0:WASH_Compliant': () => {
                      var ans = '';
                      if (dataValue('new[0].WASH_Compliant__c')(state) === true) {
                        ans = 'Yes';
                      } else {
                        ans = 'No';
                      }
                      return ans;
                    },
                    'n0:Active_Handwashing_Station': dataValue('new[0].Tippy_Tap__c')(
                      state
                    ),
                    'n0:Drying_Rack': dataValue('new[0].Drying_Rack__c')(state),
                    'n0:Functional_Latrine': dataValue('new[0].Pit_Latrine__c')(state),
                    'n0:Clothesline': dataValue('new[0].Clothe__c')(state),
                    'n0:ITNs': dataValue('new[0].Uses_ITNs__c')(state),
                    'n0:Active_in_Nutrition_Program': dataValue(
                      'new[0].Active_in_Nutrition_Program__c'
                    )(state),
                    'n0:Nutrition_Group': dataValue('new[0].Nutrition_Group__c')(state),
                    'n0:seed_input_support': dataValue('new[0].Seed_Input_Support__c')(
                      state
                    ),
                    'n0:name_concat': dataValue('new[0].Household_Code_Autonumber__c')(state),
                    'n0:CHW_ID': dataValue('new[0].Household_CHW__c')(state),
                    'n0:Improved_Cooking_Method': dataValue('new[0].Cookstove__c')(state),
                    'n0:Kitchen_Garden': dataValue('new[0].Kitchen_Garden__c')(state),
                    'n0:Number_of_Over_5_Males': dataValue(
                      'new[0].Number_of_Over_5_Males__c'
                    )(state),
                    'n0:Number_of_Over_5_Females': dataValue(
                      'new[0].Number_of_Over_5_Females__c'
                    )(state),
                    'n0:Number_of_Under_5_Males': dataValue(
                      'new[0].Number_of_Under_5_Males__c'
                    )(state),
                    'n0:Number_of_Under_5_Females': dataValue(
                      'new[0].Number_of_Under_5_Females__c'
                    )(state),
                    'n0:Rubbish_Pit': dataValue('new[0].Rubbish_Pit__c')(state),
                    'n0:Treats_Drinking_Water': dataValue(
                      'new[0].Treats_Drinking_Water__c'
                    )(state),
                    'n0:WASH_Trained': dataValue('new[0].WASH_Trained__c')(state),
                    'n0:Total_Under_5': dataValue('new[0].Total_Number_of_Under_5s__c')(
                      state
                    ),
                    'n0:Total_Males': dataValue('new[0].Total_Number_of_Males__c')(state),
                    'n0:Total_Females': dataValue('new[0].Total_Number_of_Females__c')(
                      state
                    ),
                    'n0:area': dataValue('new[0].Area__c')(state),
                    'n0:Area_Name': dataValue('new[0].Area_Name__c')(state),
                    'n0:Total_Household_Members': dataValue(
                      'new[0].Total_Number_of_Members__c'
                    )(state),
                    Total_Number_of_Members: dataValue('new[0].Total_household_people__c')(
                      state
                    ), //NEW
                    'n0:Household_Status': () => {
                      var str = '';
                      if (dataValue('new[0].Active_Household__c')(state) === false) {
                        str = 'No';
                      } else {
                        str = 'Yes';
                      }
                      return str;
                    },
                    'n0:Total_Over_5': () => {
                      var num = 0;
                      num =
                        dataValue('new[0].Total_Number_of_Members__c')(state) -
                        dataValue('new[0].Total_Number_of_Under_5s__c')(state);
                      return num;
                    },
                  },
                  'n0:index': {
                    'n0:parent': {
                      '@': {
                        case_type: 'Area',
                      },
                      '#': dataValue('new[0].Area_Case_ID__c')(state),
                    },
                  },
                };
              }),
              field('n1:meta', state => {
                return {
                  '@': { 'xmlns:n1': 'http://openrosa.org/jr/xforms' },
                  'n1:deviceID': 'Formplayer',
                  'n1:timeStart': new Date().toISOString(),
                  'n1:timeEnd': new Date().toISOString(),
                  'n1:userID': 'e298884bfb6ee2d2b38591a6e8ae0228',
                };
              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Update-Household-in-CommCare-V2:
        source_trigger: webhook
        target_job: Update-Household-in-CommCare-V2
        condition_type: js_expression
        condition_label: SF Update HH
        condition_expression: |
          state.data.label == "Update Household"
        enabled: false
  "x-[archive]-Workflow-Update-Person-in-CommCare":
    name: 'x [archive] Workflow Update Person in CommCare'
    jobs:
      Update-Person-in-CommCare:
        name: Update Person in CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          submit(
            fields(
              field('@', state => {
                return {
                  'xmlns:jrm': 'http://dev.commcarehq.org/jr/xforms',
                  xmlns:
                    'http://openrosa.org/formdesigner/a34af027a7fa943998c39f64bc84a337a668114a',
                  uiVersion: '1',
                  version: '81',
                  name: 'Update Person',
                };
              }),
              field('Source', 0),
              field('Status', state => {
                return {
                  Client_Status: dataValue('new[0].Client_Status__c')(state),
                  Date_of_Transfer_Out: dataValue('new[0].Date_of_Transfer_Out__c')(
                    state
                  ),
                  Date_Last_Seen: dataValue('new[0].Date_Last_Seen__c')(state),
                  Date_of_Death: dataValue('new[0].Date_of_Death__c')(state),
                  Cause_of_Death: dataValue('new[0].Cause_of_Death__c')(state),
                };
              }),
              field('Basic_Information', state => {
                return {
                  Basic_Information: {
                    Phone_Number: dataValue('new[0].Telephone__c')(state),
                    Final_Program: () => {
                      var program = '';
                      if (
                        dataValue('new[0].Active_In_Thrive_Thru_5__c')(state) == 'Yes' ||
                        dataValue('new[0].Active_TT5_Mother__c')(state) == 'Yes'
                      ) {
                        if (dataValue('new[0].Active_In_HAWI__c')(state) == 'Yes') {
                          program = 'Both';
                        } else {
                          program = 'Thrive_Through_5';
                        }
                      } else {
                        if (dataValue('new[0].Active_In_HAWI__c')(state) == 'Yes') {
                          program = 'HAWI';
                        }
                      }
                      return program;
                    },
                  },
                };
              }),
              field('TT5', state => {
                return {
                  Child_Information: {
                    ANCs: {
                      ANC_1: dataValue('new[0].ANC_1__c')(state),
                      ANC_2: dataValue('new[0].ANC_2__c')(state),
                      ANC_3: dataValue('new[0].ANC_3__c')(state),
                      ANC_4: dataValue('new[0].ANC_4__c')(state),
                      ANC_5: dataValue('new[0].ANC_5__c')(state),
                    },
                    Delivery_Information: {
                      Person_Name: dataValue('new[0].Name')(state),
                      DOB: dataValue('new[0].Date_of_Birth__c')(state),
                      Delivery_Type: () => {
                        var val = '';
                        if (dataValue('new[0].Place_of_Delivery__c')(state) == 'Home') {
                          val = 'Unskilled';
                        } else if (
                          dataValue('new[0].Place_of_Delivery__c')(state) == 'Facility'
                        ) {
                          val = 'Skilled';
                        }
                        return val;
                      },
                      Delivery_Facility: dataValue('new[0].Delivery_Facility__c')(state),
                    },
                    Immunizations: {
                      BCG: dataValue('new[0].BCG__c')(state),
                      OPV_0: dataValue('new[0].OPV_0__c')(state),
                      OPV_PCV_Penta_1: dataValue('new[0].OPV_1__c')(state),
                      OPV_PCV_Penta_2: dataValue('new[0].OPV_2__c')(state),
                      OPV_PCV_Penta_3: dataValue('new[0].OPV_3__c')(state),
                      Measles_6: dataValue('new[0].Measles_6__c')(state),
                      Measles_9: dataValue('new[0].Measles_9__c')(state),
                      Measles_18: dataValue('new[0].Measles_18__c')(state),
                      Fully_Immunized: dataValue(
                        'new[0].Fully_Immunized_at_12_Months__c'
                      )(state),
                    },
                    /*"CCMM":{
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                      "Home_Test_Date":dataValue("new[0].Measles_18__c")(state),
                    }*/
                  },
                  Mother_Information: {
                    Pregnant: () => {
                      if (dataValue('new[0].Pregnant__c')(state) === true) {
                        return 'Yes';
                      }
                    },
                  },
                };
              }),
              field('HAWI', state => {
                return {
                  Unique_Patient_Code: dataValue('new[0].Unique_Patient_Code__c')(state),
                  Support_Group: dataValue('new[0].Active_in_Support_Group__c')(state),
                  Preferred_Care_F: {
                    Preferred_Care_Facility: dataValue(
                      'new[0].Preferred_Care_Facility__c'
                    )(state),
                  },
                };
              }),

              field('n0:case', state => {
                return {
                  '@': {
                    case_id: dataValue('new[0].CommCare_ID__c')(state),
                    date_modified: new Date().toISOString(),
                    user_id: 'e298884bfb6ee2d2b38591a6e8ae0228',
                    'xmlns:n0': 'http://commcarehq.org/case/transaction/v2',
                  },
                  'n0:create': {
                    'n0:case_name': () => {
                      var name1 = dataValue('new[0].Name')(state);
                      var name2 = name1.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                      });
                      return name2;
                    },
                    'n0:case_type': 'Person',
                    'n0:parent_id': dataValue('new[0].CommCare_HH_Code__c')(state),
                  },
                  'n0:update': {
                    'n0:ANC_1': dataValue('new[0].ANC_1__c')(state),

                    'n0:ANC_2': dataValue('new[0].ANC_2__c')(state),
                    'n0:ANC_3': dataValue('new[0].ANC_3__c')(state),
                    'n0:ANC_4': dataValue('new[0].ANC_4__c')(state),
                    'n0:ANC_5': dataValue('new[0].ANC_5__c')(state),
                    'n0:BCG': dataValue('new[0].BCG__c')(state),
                    'n0:Fully_Immunized': dataValue(
                      'new[0].Fully_Immunized_at_12_Months__c'
                    )(state),
                    'n0:Delivery_Type': () => {
                      var val = '';
                      if (dataValue('new[0].Place_of_Delivery__c')(state) == 'Home') {
                        val = 'Unskilled';
                      } else if (
                        dataValue('new[0].Place_of_Delivery__c')(state) == 'Facility'
                      ) {
                        val = 'Skilled';
                      }
                      return val;
                    },
                    'n0:Delivery_Facility': dataValue('new[0].Delivery_Facility__c')(
                      state
                    ),
                    'n0:Family_Planning_Method': dataValue(
                      'new[0].Family_Planning_Method__c'
                    )(state),
                    'n0:Child_Status': dataValue('new[0].Child_Status__c')(state),
                    'n0:Active_in_OSG_Mentoring': dataValue('new[0].Active_in_OSG__c')(
                      state
                    ),
                    'n0:OSG_Mentoring_Group': dataValue('new[0].OSG_Group__c')(state),
                    'n0:OPV_0': dataValue('new[0].OPV_0__c')(state),
                    'n0:OPV_PCV_Penta_1': dataValue('new[0].OPV_1__c')(state),
                    'n0:OPV_PCV_Penta_2': dataValue('new[0].OPV_2__c')(state),
                    'n0:OPV_PCV_Penta_3': dataValue('new[0].OPV_3__c')(state),
                    'n0:Current_Height': dataValue('new[0].Current_Height__c')(state),
                    'n0:Current_Weight': dataValue('new[0].Current_Weight__c')(state),
                    'n0:Current_MUAC': dataValue('new[0].Current_MUAC__c')(state),
                    'n0:Measles_6': dataValue('new[0].Measles_6__c')(state),
                    'n0:Measles_9': dataValue('new[0].Measles_9__c')(state),
                    'n0:LMP': dataValue('new[0].LMP__c')(state),
                    'n0:EDD': dataValue('new[0].EDD__c')(state),
                    'n0:Measles_18': dataValue('new[0].Measles_18__c')(state),
                    'n0:Pregnant': () => {
                      if (dataValue('new[0].Pregnant__c')(state) === true) {
                        return 'Yes';
                      }
                    },
                    'n0:ART': dataValue('new[0].Currently_on_ART_s__c')(state),
                    'n0:ARVs': dataValue('new[0].ART_Regimen__c')(state),
                    'n0:Active_in_Support_Group': dataValue(
                      'new[0].Active_in_Support_Group__c'
                    )(state),
                    'n0:Client_Program': () => {
                      var program = '';
                      if (
                        dataValue('new[0].Active_in_Thrive_Thru_5__c')(state) == 'Yes' ||
                        dataValue('new[0].Active_TT5_Mother__c')(state) == 'Yes'
                      ) {
                        if (dataValue('new[0].Active_in_HAWI__c')(state) == 'Yes') {
                          program = 'Both';
                        } else {
                          program = 'Thrive_Through_5';
                        }
                      } else {
                        if (dataValue('new[0].Active_in_HAWI__c')(state) == 'Yes') {
                          program = 'HAWI';
                        }
                      }
                      return program;
                    },
                    'n0:Currently_on_family_planning': dataValue(
                      'new[0].Family_Planning__c'
                    )(state),
                    'n0:DOB': dataValue('new[0].Date_of_Birth__c')(state),
                    'n0:Education_Level': () => {
                      if (dataValue('new[0].Education_Level__c')(state) !== undefined) {
                        return dataValue('new[0].Education_Level__c')(state)
                          .toString()
                          .replace(/ /g, '_');
                      }
                    },
                    'n0:Ever_on_Family_Planning': dataValue(
                      'new[0].Ever_on_Family_Planning__c'
                    )(state),
                    'n0:Gender': dataValue('new[0].Gender__c')(state),
                    'n0:Gravida': dataValue('new[0].Gravida__c')(state),
                    'n0:Active_in_TT5': dataValue('new[0].Active_in_Thrive_Thru_5__c')(
                      state
                    ),
                    'n0:Active_in_HAWI': dataValue('new[0].Active_in_HAWI__c')(state),
                    'n0:Marital_Status': dataValue('new[0].Marital_Status__c')(state),
                    'n0:Exclusive_Breastfeeding': dataValue(
                      'new[0].Exclusive_Breastfeeding__c'
                    )(state),
                    'n0:Next_of_Kin': dataValue('new[0].Next_of_Kin__c')(state),
                    'n0:Next_of_Kin_Phone': dataValue('new[0].Next_of_Kin_Phone__c')(
                      state
                    ),
                    'n0:Parity': dataValue('new[0].Parity__c')(state),

                    'n0:Phone_Number': dataValue('new[0].Telephone__c')(state),
                    'n0:Preferred_Care_Facility': dataValue(
                      'new[0].Preferred_Care_Facility__c'
                    )(state),
                    'n0:Record_Type': () => {
                      return dataValue('new[0].Record_Type_Name__c')(state)
                        .toString()
                        .replace(/ /g, '_');
                    },
                    'n0:Unique_Patient_Code': dataValue('new[0].Unique_Patient_Code__c')(
                      state
                    ),
                  },
                  'n0:index': {
                    'n0:parent': {
                      '@': {
                        case_type: 'Household',
                      },
                      '#': dataValue('new[0].CommCare_HH_Code__c')(state),
                    },
                  },
                };
              }),

              field('n2:meta', state => {
                return {
                  '@': { 'xmlns:n2': 'http://openrosa.org/jr/xforms' },
                  'n2:deviceID': 'Formplayer',
                  'n2:timeStart': new Date().toISOString(),
                  'n2:timeEnd': new Date().toISOString(),
                  'n2:userID': 'e298884bfb6ee2d2b38591a6e8ae0228',
                };
              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Update-Person-in-CommCare:
        source_trigger: webhook
        target_job: Update-Person-in-CommCare
        condition_type: js_expression
        condition_label: SF Update Person
        condition_expression: |
          state.data.label == "Update Person"
        enabled: false
  "x-[archive]-Workflow-Upsert-Household-Visit":
    name: 'x [archive] Workflow Upsert Household Visit'
    jobs:
      Upsert-Household-Visit:
        name: Upsert Household Visit
        adaptor: '@openfn/language-salesforce@latest'
        credential: null
        body: |
          query(
            `SELECT Id, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c FROM Location__c WHERE CommCare_User_ID__c = '${dataValue(
              'form.owner_id'
            )(state)}'`
          );

          fn(state => ({
            ...state,
            data: {
              ...state.data,
              catchmentNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? (state.references[0].records[0].Parent_Geographic_Area__r 
                    ? state.references[0].records[0].Parent_Geographic_Area__r.Parent_Geographic_Area__c
                    : undefined)
                  : undefined,
            },
          }));

          fn(state => {
            const deaths = state.data.form.household_deaths
              ? state.data.form.household_deaths.deaths
              : '';
            if (deaths !== '' && !Array.isArray(deaths)) {
              state.data.form.household_deaths.deaths = [deaths];
            }

            const supervisorMap = {
              community_health_nurse: 'Community Health Nurse',
              chw_supervisor: 'CHW Supervisor',
              chewschas: 'CHEWs/CHAs',
              other: 'Other',
              none: 'None',
            };

            const insuranceMap = {
              nhif: 'NHIF',
              Linda_mama: 'Linda mama',
              other_please_specify_if_active: 'Other',
              none: 'None',
            };

            return { ...state, supervisorMap, insuranceMap };
          });

          upsertIf(
              state.data.metadata.username !== 'test.2021' &&
              state.data.form.test_user  !== 'Yes' ,
            'Visit__c',
            'CommCare_Visit_ID__c',
            fields(
              field('CommCare_Username__c', dataValue('form.meta.username')),//
              field('CommCare_Visit_ID__c', dataValue('id')),
              // field('Household_CHW__c', 'a030Q00000A0jeY'),
              // field('Catchment__c', dataValue('a000Q00000Egmtk')),
              field('Catchment__c', dataValue('catchmentNewId')),
              // field('Household__c','a010Q00000BL6lT'),
              // field('Household__c', dataValue('form.case.@case_id')),
              relationship(
                    'Household__r',
                    'CommCare_Code__c',
                    dataValue('form.case.@case_id')),
              field('Date__c',dataValue('form.Date')),
              //field('MOH_household_code__c', state => {
              //  var moh = dataValue('form.Household_Information.moh_code')(state);
              //  var mohLinked = dataValue('form.MOH_household_code_linked')(state);
              // return moh ? moh : mohLinked && mohLinked !== '' ? mohLinked : undefined;
             // }),
              field('Active_Household__c', state => {
                var status = dataValue('form.Household_Status')(state);
                return status && status === 'No'
                  ? false
                  : status === 'Yes'
                  ? true
                  : status;
              }),
              //field('Inactive_Reason__c', state => {
              //  var reason = dataValue('form.Reason_for_Inactive')(state);
              //  return reason ? reason.toString().replace(/_/g, ' ') : null;
              //}),
              //field('Source__c', 1),//
              field('Household_CHW__c', state => {
                var chw = dataValue('properties.CHW_ID')(state);
                return chw === 'a030800001zQrk'
                  ? 'a030800001zQrk5'
                  : chw
                  ? chw
                  : undefined;
              }), //TO UPDATE IN PRODUCTION
              field(
                'Completed_COVID_19_Phone_Screening__c',
                dataValue(
                  'form.did_you_complete_the_covid-19_phone_screening_for_this_household'
                )
              ),
              field('Household_Visit_Type__c', state => {
                var visit = dataValue(
                  'form.is_this_a_physical_home_visit_or_a_phone_call_visit'
                )(state);
                return visit ? visit.toString().replace(/_/g, ' ') : null;
              }),
             // field('Household_village__c', dataValue('form.village')),//
              //New Nutrition Field (MOTG)
              field(
                'Active_in_Nutrition_Program__c',
                dataValue(
                  'form.nutrition_enrollment.enrolled_in_a_lwala_nutrition_program'
                )
              ),
              field(
                'lwala_nutrition_program_enrollment_date__c',
                dataValue(
                  'form.nutrition_enrollment.lwala_nutrition_program_enrollment_date'
                )
              ),
              field(
                'Trained_in_gardening__c',
                dataValue('form.nutrition_enrollment.household_trained_on_gardening')
              ),
              field(
                'household_trained_on_gardening_date__c',
                dataValue(
                  'form.nutrition_enrollment.when_was_the_household_trained_on_gardening'
                )
              ),
              field(
                'Seed_Input_Support__c',
                dataValue(
                  'form.nutrition_enrollment.household_provided_with_seed_input_support'
                )
              ),
              field(
                'household_provided_with_seed_input_suppo__c',
                dataValue(
                  'form.nutrition_enrollment.when_was_the_household_provided_with_seed_input_support'
                )
              ),
              field(
                'MIYCN_Trained__c',
                dataValue('form.nutrition_enrollment.household_trained_on_MIYCN')
              ),
              field(
                'Kitchen_Garden__c',
                dataValue('form.nutrition_enrollment.household_has_kitchen_garden')
              ),

              field(
                'Access_to_safe_water__c',
                dataValue('form.Household_Information.Safe_Water')
              ),
              field(
                'Treats_Drinking_Water__c',
                dataValue('form.Household_Information.Treats_Drinking_Water')
              ),
              field(
                'Tippy_Tap__c',
                dataValue('form.Household_Information.Active_Handwashing_Station')
              ),
              field(
                'Pit_Latrine__c',
                dataValue('form.Household_Information.Functional_Latrine')
              ),
              field(
                'Rubbish_Pit__c',
                dataValue('form.Household_Information.Rubbish_Pit')
              ),
              field(
                'Drying_Rack__c',
                dataValue('form.Household_Information.Drying_Rack')
              ),
              field(
                'Kitchen_Garden__c',
                dataValue('form.Household_Information.Kitchen_Garden')
              ),
              field(
                'Cookstove__c',
                dataValue('form.Household_Information.Improved_Cooking_Method')
              ),
              field('Clothe__c', dataValue('form.Household_Information.Clothesline')),
              field(
                'WASH_Trained__c',
                dataValue('form.Household_Information.WASH_Trained')
              ),
              field(
                'Has_muac_tape__c',
                dataValue('form.Household_Information.family_muac_tape_available')
              ),
              field('Uses_ITNs__c', dataValue('form.Household_Information.ITNs')),
              field('Deaths_in_the_last_6_months__c', state => {
                var deaths = dataValue('form.household_deaths.deaths_in_past_6_months')(
                  state
                );
                return deaths && deaths > 0 ? 'Yes' : 'No';
              }),
              //field(
              //  'Total_household_people__c',
              //  dataValue('form.Total_Number_of_Members')
             // ),
              field('Supervisor_Visit__c', state =>
                state.data.form.supervisor_visit
                  ? state.supervisorMap[state.data.form.supervisor_visit]
                  : null
              ),
              field('Health_insurance__c', dataValue('form.health_insurace_cover')),
              field(
                'Health_insurance_active_status__c',
                dataValue('form.healthinsurance_active')
              ),
              field('Health_insurance_type__c', state => {
                var status = dataValue('form.health_insurance')(state);
                var value =
                  status && status !== ''
                    ? status
                        .replace(/ /gi, ';')
                        .split(';')
                        .map(value => {
                          return state.insuranceMap[value] || value;
                        })
                    : undefined;
                return value ? value.join(';') : undefined;
              }),
              field(
                'Other_Health_Insurance__c',
                dataValue('form.if_other_please_specify')
              ),
              //field('Last_Modified_Date_CommCare__c', dataValue('server_modified_on')),
              field('Case_Closed_Date__c', state => {
                var closed = dataValue('form.case.update.closed')(state);
                var date = dataValue('server_modified_on')(state);
                return closed && closed == true ? date : undefined;
              })
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Upsert-Household-Visit:
        source_trigger: webhook
        target_job: Upsert-Household-Visit
        condition_type: js_expression
        condition_label: Upsert Household Visit App Release Q2-2022
        condition_expression: |
          state.data.form["@name"] == "Update Household Revised" && state.data.form["app_release"] == "Q2-2022" && state.data.properties["test_user"] != "Yes"
        enabled: false
  "x-[archive]-Workflow-test-get-forms":
    name: 'x [archive] Workflow test get forms'
    jobs:
      test-get-forms:
        name: test get forms
        adaptor: '@openfn/language-http@v2.4.15'
        credential: null
        body: |
          get("https://www.commcarehq.org/a/lwala-community-alliance/api/v0.5/form/", {
               headers: {"content-type": "application/json"},
               authentication: {username: "aleksa@verasolutions.org", password: "chw$@kamo20"},
               query: {"limit": "1"}
             },
             function(state) {
               return state;
             }
           );
           console.log(state);
           each(dataPath('objects[*]'), state => {
             return post("https://www.openfn.org/inbox/e77693cc-71d5-49a9-8192-5b15679450df", { body: state => state.data })(state);
           });

    triggers:
      cron:
        type: cron
        cron_expression: '1 * * * *'
        enabled: false
    edges:
      cron->test-get-forms:
        source_trigger: cron
        target_job: test-get-forms
        condition_type: always
        enabled: false
  "x-[archive]-Workflow-test-revised":
    name: 'x [archive] Workflow test revised'
    jobs:
      test-revised:
        name: test revised
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          // REVISED Form - To replace old Update HH
          alterState(state => {
            const data = state.data.data;
            
            const deaths = state.data.data.form.household_deaths ? state.data.data.form.household_deaths.deaths : '';
            if (deaths !== '' &&!Array.isArray(deaths)) {
              state.data.data.form.household_deaths.deaths = [deaths];
            }

            const supervisorMap = {
              community_health_nurse: 'Community Health Nurse',
              chw_supervisor: 'CHW Supervisor',
              chewschas: 'CHEWs/CHAs',
              other: 'Other',
              none: 'None',
            };

            return { ...state, supervisorMap };
          });
          upsert(
            'Household__c',
            'CommCare_Code__c',
            fields(
              field('CommCare_Code__c', dataValue('form.case.@case_id')),
              field('MOH_household_code__c', state => {
                var moh = dataValue('form.Household_Information.moh_code')(state);
                var mohLinked = dataValue('form.MOH_household_code_linked')(state);
                return moh ? moh : mohLinked;
              }),
              field('Active_Household__c', state => {
                var status = dataValue('form.Household_Status')(state);
                if(status==='No'){
                  status = false;
                } else if(status==='Yes'){
                  status = true;
                }
                return status;
                //return status=='No'? false : true;
              }),
              /*field('Reactivated__c', state => {
                var status = dataValue('form.Household_Status')(state);
                return status=='No'? false : true;
                }),*/
              field('Inactive_Reason__c', state => {
                var reason = dataValue('form.Reason_for_Inactive')(state);
                return reason !== undefined ? reason : null;
              }),
              field('Source__c', 1),
              field('Household_village__c', dataValue('form.village')), 
              field(
                'Access_to_safe_water__c',
                dataValue('form.Household_Information.Safe_Water')
              ),
              field(
                'Treats_Drinking_Water__c',
                dataValue('form.Household_Information.Treats_Drinking_Water')
              ),
              field(
                'Tippy_Tap__c',
                dataValue('form.Household_Information.Active_Handwashing_Station')
              ),
              field(
                'Pit_Latrine__c',
                dataValue('form.Household_Information.Functional_Latrine')
              ),
              field(
                'Rubbish_Pit__c',
                dataValue('form.Household_Information.Rubbish_Pit')
              ),
              field(
                'Drying_Rack__c',
                dataValue('form.Household_Information.Drying_Rack')
              ),
              field(
                'Kitchen_Garden__c',
                dataValue('form.Household_Information.Kitchen_Garden')
              ),
              field(
                'Cookstove__c',
                dataValue('form.Household_Information.Improved_Cooking_Method')
              ),
              field('Clothe__c', dataValue('form.Household_Information.Clothesline')),
              field(
                'WASH_Trained__c',
                dataValue('form.Household_Information.WASH_Trained')
              ),
              field('Uses_ITNs__c', dataValue('form.Household_Information.ITNs')),
              //field("Family_planning__c", dataValue("form.Household_Information.family_planning")), // new mapping
              //field("Family_planning_method__c", dataValue("form.Household_Information.Family_planning_method")), // new mapping
              field('Deaths_in_the_last_6_months__c', state => {
                var deaths = dataValue('form.household_deaths.deaths_in_past_6_months')(
                  state
                );
                return deaths && deaths > 0 ? 'Yes' : 'No';
              }),
              field(
                'Total_household_people__c',
                dataValue('form.Total_Number_of_Members')
              ),
              field('Supervisor_Visit__c', state =>
                state.data.form.supervisor_visit
                  ? state.supervisorMap[state.data.form.supervisor_visit]
                  : null
              )
            )
          ),
            upsert(
              'Visit__c',
              'CommCare_Visit_ID__c',
              fields(
                field('CommCare_Visit_ID__c', dataValue('id')),
                relationship(
                  'Household__r',
                  'CommCare_Code__c',
                  dataValue('form.case.@case_id')
                ),
                field('Date__c', dataValue('form.metadata.timeEnd')),
                //field("Household_CHW__c", "a031x000002S9lm"), //Hardcoded for sandbox testing
                field('Household_CHW__c', dataValue('form.chw')),
                field('Name', 'CHW Visit'),
                field('Supervisor_Visit__c', state =>
                  state.data.form.supervisor_visit
                    ? state.supervisorMap[state.data.form.supervisor_visit]
                    : null
                )
              )
            ),
            //New logic to insert child Person records if person is marked as deceased in HH form
            each(
              merge(
                dataPath('$.form.household_deaths.deaths[*]'),
                fields(
                  field('caseId', dataValue('form.case.@case_id')),
                  field('catchment', dataValue('form.catchment')),
                  field('Date', dataValue('form.Date'))
                )
              ),
              upsertIf(
                state.data.form.household_deaths && state.data.form.household_deaths.deaths_in_past_6_months > 0, //only insert deceased Person if deaths
                'Person__c',
                'CommCare_ID__c',
                fields(
                  field('CommCare_ID__c', state => {
                    var age = dataValue('age_dead')(state);
                    return `${state.data.caseId}${age}`;
                  }),
                  field('CommCare_HH_Code__c', dataValue('caseId')),
                  relationship('RecordType', 'Name', state => {
                    var age = dataValue('age_dead')(state);
                    var gender = dataValue('gender_dead')(state);
                    var rt = '';
                    if (age < 5) {
                      rt = 'Child';
                    } else if (age < 18) {
                      rt = 'Youth';
                    } else if (gender === 'female') {
                      rt = 'Female Adult';
                    } else {
                      rt = 'Male Adult';
                    }
                    return rt;
                  }),
                  field('Name', 'Deceased Person'),
                  field('Source__c', true),
                  relationship('Catchment__r', 'Name', dataValue('catchment')),
                  field('Client_Status__c', 'Deceased'),
                  field('Dead_age__c', dataValue('age_dead')),
                  field('Cause_of_Death__c', state => {
                    var cause = dataValue('cause_of_death_dead')(state);
                    return cause !== undefined
                      ? cause.toString().replace(/_/g, ' ')
                      : null;
                  }),
                  field('Verbal_autopsy__c', dataValue('verbal_autopsy')),
                  field('Client_Status__c', 'Deceased'),
                  field('Active_in_Thrive_Thru_5__c', 'No'),
                  field('Active_in_HAWI__c', 'No'),
                  field('Active_TT5_Mother__c', 'No'),
                  field('TT5_Mother_Registrant__c', 'No'),
                  field('Date_of_Death__c', dataValue('Date')),
                  field('Inactive_Date__c', dataValue('Date'))
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->test-revised:
        source_trigger: webhook
        target_job: test-revised
        condition_type: js_expression
        condition_label: test form csv
        condition_expression: |
          state.data["form.@name"] == "Update Household Revised"
        enabled: false
  "z-[archive]-Upsert-Household":
    name: 'z [archive] Upsert Household'
    jobs:
      Upsert-Household:
        name: Upsert Household
        adaptor: '@openfn/language-salesforce@latest'
        credential: null
        body: |
          query(
            `SELECT Id, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c FROM Location__c WHERE CommCare_User_ID__c = '${dataValue(
              'properties.owner_id'
            )(state)}'`
          );

          fn(state => ({
            ...state,
            data: {
              ...state.data,
              villageNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Id
                  : undefined,
              areaNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? state.references[0].records[0].Parent_Geographic_Area__c
                  : undefined,
              catchmentNewId:
                state.references[0].records && state.references[0].records.length !== 0
                  ? (state.references[0].records[0].Parent_Geographic_Area__r 
                    ? state.references[0].records[0].Parent_Geographic_Area__r.Parent_Geographic_Area__c
                    : undefined)
                  : undefined,
            },
          }));

          upsertIf(
              state.data.properties.commcare_username !== 'test.2021' &&
              state.data.properties.test_user  !== 'Yes' ,
            'Household__c',
            'CommCare_Code__c',
            fields(
              field('CommCare_Username__c', dataValue('properties.commcare_username')),
              field('MOH_household_code__c', dataValue('properties.moh_code')),
             field('CommCare_Code__c', dataValue('case_id')),
              field('Source__c', true),
              //field('Household_CHW__c', 'a030Q00000A0jeYQAR'), //sandbox hardcoded mapping
              field('Household_CHW__c', state => {
                var chw = dataValue('properties.CHW_ID')(state);
                return chw === 'a030800001zQrk'
                  ? 'a030800001zQrk5'
                  : chw
                  ? chw
                  : undefined;
              }),
             //TODO: Prod mapping to add back before go-live
              field('Catchment__c', dataValue('catchmentNewId')),
              field('Area__c', dataValue('areaNewId')),
              field('Village__c', dataValue('villageNewId')),
              field('Household_Village__c', dataValue('properties.village')),
            //   relationship('Catchment__r', 'Name', state => {
            //     var catchment =
            //       state.data.properties.catchement ||
            //       state.data.properties.catchment_name;
            //     return catchment === '' || catchment === undefined
            //       ? 'Unknown Location'
            //       : catchment;
            //   }), // check
            //   field('Area__c', state => {
            //    // var area = dataValue('properties.Area_Name')(state);
            //     return area === '' || area === undefined ? 'a000Q00000Egmu4' : area;
            //   }),  // Commented out because it was causing a job error 
            //   field('Household_village__c', dataValue('properties.village')),//case property, but not in message
            
            //   field('Village__c',dataValue('properties.village_name')), //lookup
              field('Deaths_in_the_last_6_months__c', state => {
                var death = dataValue(
                  'properties.deaths_in_past_6_months'
                )(state);
                return death > 0 ? 'Yes' : 'No';
              }),
              field('Access_to_safe_water__c',dataValue('properties.Safe_Water')),//not coming through
              field('Treats_Drinking_Water__c',dataValue('properties.Treats_Drinking_Water')),//not coming through
              field('Tippy_Tap__c',dataValue('properties.Active_Handwashing_Station')),//not coming through
              field('Pit_Latrine__c',dataValue('properties.Functional_Latrine')),//not coming through
              field('Rubbish_Pit__c',dataValue('properties.Rubbish_Pit')),//not coming through
              field('Drying_Rack__c',dataValue('properties.Drying_Rack')),//not coming through
              field('Kitchen_Garden__c',dataValue('properties.Kitchen_Garden')),//not coming through
              field('Cookstove__c',dataValue('properties.Improved_Cooking_Method')),//not coming through
              field('Clothe__c',dataValue('properties.Clothesline')),//not coming through
              field('WASH_Trained__c',dataValue('properties.WASH_Trained')),//not coming through
              field('Uses_ITNs__c',dataValue('properties.ITNs')),
               field(
                'Has_muac_tape__c',
                dataValue('properties.family_muac_tape_available')
              ),
              //field('Total_household_people__c',dataValue('properties.Total_Number_of_Members')), //not coming through
              field('Health_insurance__c', dataValue('properties.health_insurace_cover')),
              field('Health_insurance_active_status__c',dataValue('properties.healthinsurance_active')),
              field('Health_insurance_type__c', state => {
                var status = dataValue('properties.health_insurance')(state);
                return status && status === 'other_please_specify_if_active'
                  ? 'Other'
                  : status === 'nhif'
                  ? 'NHIF'
                  : status === 'Linda_mama' || 'linda_mama'
                  ? 'Linda mama'
                  : status;
              }),
              field('Other_Health_Insurance__c',dataValue('properties.if_other_please_specify')),
              field('Work_with_TBA__c', dataValue('properties.tba')),
              field('TBA_name__c', dataValue('properties.which_tba')),
              field('Last_Modified_Date_CommCare__c', dataValue('server_date_modified')),//Need a case property),
              field('Active_Household__c', state => {
                var status = dataValue('properties.Household_Status')(state);
                return status && status === 'No'
                  ? false
                  : status === 'Yes'
                  ? true
                  : status;
              }),
              // relationship('Head_of_Household__r', 'CommCare_ID__c', dataValue('properties.head_of_household_case_id')),
               field('Inactive_Reason__c', state => {
                var reason = dataValue('properties.Reason_for_Inactive')(state);
                return reason ? reason.toString().replace(/_/g, ' ') : null;
              }),
               field(
                'Active_in_Nutrition_Program__c',
                dataValue(
                  'properties.enrolled_in_a_lwala_nutrition_program'
                )
              ),
              field(
                'lwala_nutrition_program_enrollment_date__c',
                dataValue(
                  'properties.lwala_nutrition_program_enrollment_date'
                )
              ),
              field(
                'Trained_in_gardening__c',
                dataValue('properties.household_trained_on_gardening')
              ),
              field(
                'household_trained_on_gardening_date__c',
                dataValue(
                  'properties.when_was_the_household_trained_on_gardening'
                )
              ),
              field(
                'Seed_Input_Support__c',
                dataValue('properties.household_provided_with_seed_input_support'
                )
              ),
              field(
                'household_provided_with_seed_input_suppo__c',
                dataValue(
                  'properties.when_was_the_household_provided_with_seed_input_support'
                )
              ),
              field(
                'MIYCN_Trained__c',
                dataValue('properties.household_trained_on_MIYCN')
              ),
              // not in message:
              // field(
              //   'Kitchen_Garden__c',
              //   dataValue('properties.nutrition_enrollment.household_has_kitchen_garden')
              // ),

              //field('Case_Closed_Date__c', state => {
              //  var closed = dataValue('date_closed')(state); 
              //  var date =  dataValue('server_date_modified')(state); 
              //  return closed && closed == true ? date : undefined; 
             // })
              )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Upsert-Household:
        source_trigger: webhook
        target_job: Upsert-Household
        condition_type: js_expression
        condition_label: Household
        condition_expression: |
          state.data.properties["app_release"] == "Q2-2022" && state.data.properties["case_type"] == "Household" && state.data.properties["test_user"] != "Yes"
        enabled: false
